[
  {
    "_id": "81d35b4e-607a-4e7a-87aa-bdc0db6de97a",
    "colId": "history",
    "containerId": "",
    "name": "http://127.0.0.1:8080/apply/deploy/strategy/fls-aflm-fund-aggregation/fls-aflm/test/default/v20220602/arch/fund",
    "url": "http://127.0.0.1:8080/apply/deploy/strategy/fls-aflm-fund-aggregation/fls-aflm/test/default/v20220602/arch/fund",
    "method": "GET",
    "sortNum": 0,
    "created": "2022-10-08T05:06:51.108Z",
    "modified": "2022-10-08T05:06:51.112Z",
    "headers": [],
    "params": [],
    "tests": []
  },
  {
    "_id": "f2f8e628-147b-493e-964b-2c3ed7a91328",
    "colId": "history",
    "containerId": "",
    "name": "http://127.0.0.1:8080/apply/deploy/strategy/fls-aflm-fund-aggregation/fls-aflm/test/default/v20220602/arch/fund",
    "url": "http://127.0.0.1:8080/apply/deploy/strategy/fls-aflm-fund-aggregation/fls-aflm/test/default/v20220602/arch/fund",
    "method": "POST",
    "sortNum": 0,
    "created": "2022-10-08T05:06:53.734Z",
    "modified": "2022-10-08T05:07:06.883Z",
    "headers": [],
    "params": [],
    "tests": []
  },
  {
    "_id": "ad4d3a0a-26da-4c3b-9317-8a6f5bcf93d5",
    "colId": "history",
    "containerId": "",
    "name": "http://127.0.0.1:8080/actuator/health",
    "url": "http://127.0.0.1:8080/actuator/health",
    "method": "GET",
    "sortNum": 0,
    "created": "2022-10-08T05:46:01.666Z",
    "modified": "2022-10-08T06:16:03.796Z",
    "headers": [],
    "params": [],
    "tests": []
  },
  {
    "_id": "07d539c8-e1f5-4841-bcc3-8687e5b41f8f",
    "colId": "history",
    "containerId": "",
    "name": "127.0.0.1:8080/test",
    "url": "127.0.0.1:8080/test",
    "method": "GET",
    "sortNum": 0,
    "created": "2022-10-31T01:46:32.455Z",
    "modified": "2022-10-31T01:46:46.970Z",
    "headers": [],
    "params": [],
    "tests": []
  },
  {
    "_id": "f257e1b1-9c79-4472-a93a-48fcd7b87ee4",
    "colId": "history",
    "containerId": "",
    "name": "http://127.0.0.1:8080/resource/fls-aflm-payment",
    "url": "http://127.0.0.1:8080/resource/fls-aflm-payment",
    "method": "POST",
    "sortNum": 0,
    "created": "2022-11-29T05:40:53.660Z",
    "modified": "2022-11-29T05:40:53.685Z",
    "headers": [],
    "params": [],
    "tests": []
  },
  {
    "_id": "b75adfab-1751-4e34-b6ea-361e1948c6ee",
    "colId": "history",
    "containerId": "",
    "name": "http://127.0.0.1:8080/info/resource/fls-aflm-payment",
    "url": "http://127.0.0.1:8080/info/resource/fls-aflm-payment",
    "method": "POST",
    "sortNum": 0,
    "created": "2022-11-29T05:41:03.513Z",
    "modified": "2022-11-29T05:57:27.413Z",
    "headers": [],
    "params": [],
    "tests": []
  },
  {
    "_id": "76d0bf8a-1a71-421c-89de-841fc6006b12",
    "colId": "history",
    "containerId": "",
    "name": "http://127.0.0.1:8080/hook/commit/separate/commit/check",
    "url": "http://127.0.0.1:8080/hook/commit/separate/commit/check",
    "method": "POST",
    "sortNum": 0,
    "created": "2022-11-30T09:21:06.620Z",
    "modified": "2022-11-30T09:21:06.620Z",
    "headers": [],
    "params": [],
    "body": {
      "type": "json",
      "raw": "{\r\n    \"Commiter\": \"liaoxingxing426\",\r\n    \"Branch\": \"master\",\r\n    \"Type\": \"git\",\r\n    \"ChangedFiles\": [\r\n        {\r\n            \"Path\": \"src/main/java/com/poype/heracles/auth/facade/config/CenterConfig.java\",\r\n            \"Status\": \"M\",\r\n            \"Content\": \"package com.poype.heracles.auth.facade.config;\\n\\nimport com.alibaba.fastjson.JSON;\\nimport com.alibaba.fastjson.JSONObject;\\nimport com.pazl.platform.cfg.Config;\\nimport com.pazl.platform.cfg.ConfigService;\\nimport com.pazl.platform.cfg.model.ConfigChange;\\nimport com.poype.heracles.common.constant.Constants;\\nimport com.poype.heracles.common.util.LogUtil;\\nimport lombok.extern.slf4j.Slf4j;\\nimport org.apache.commons.lang.StringUtils;\\nimport org.springframework.beans.factory.annotation.Value;\\nimport org.springframework.stereotype.Component;\\n\\nimport javax.annotation.PostConstruct;\\nimport java.util.ArrayList;\\nimport java.util.HashMap;\\nimport java.util.List;\\nimport java.util.Map;\\nimport java.util.concurrent.ConcurrentHashMap;\\n\\n/**\\n * 获取配置中心数据工具类\\n * @author EX-LUOWEICHAO001\\n */\\n@Component\\n@Slf4j\\npublic class  CenterConfig {\\n\\n    public static Map\\u003cString, String\\u003e configMap;\\n\\n    private Config config;\\n\\n    @Value(\\\"${apolloCenter.namespace}\\\")\\n    private String namespace;\\n\\n    /**\\n     * 返回配置中key对应的值\\n     *\\n     * @param key\\n     * @return\\n     */\\n    public String get(String key) {\\n        return configMap.get(key);\\n    }\\n\\n    @PostConstruct\\n    public void init() {\\n        getConfigFromCenter();\\n        readProperty();\\n    }\\n\\n    /**\\n     * 初始化配置服务对象\\n     * 启动配置服务监听\\n     */\\n    private void getConfigFromCenter() {\\n        config = ConfigService.getConfig(namespace);\\n        config.addChangeListener(changeEvent -\\u003e {\\n            LogUtil.info(log, \\\"Changes for namespace \\\", changeEvent.getNamespace());\\n            changeEvent.changedKeys().forEach(key -\\u003e {\\n                ConfigChange change = changeEvent.getChange(key);\\n                configMap.put(change.getPropertyName(), change.getNewValue());\\n                LogUtil.info(log, String.format(\\\"find change - key: %s, oldValue: %s, newValue: %s, changeType: %s\\\",\\n                        change.getPropertyName(),\\n                        change.getOldValue(),\\n                        change.getNewValue(),\\n                        change.getChangeType()));\\n            });\\n        });\\n    }\\n\\n    /**\\n     * 初始化Map\\n     */\\n    private void readProperty() {\\n        // 初始化本地配置信息\\n        configMap = initDefaultConfig();\\n        // 读取配置中心配置\\n        config.getPropertyNames().forEach((key) -\\u003e configMap.put(key, config.getProperty(key, configMap.get(key))));\\n        configMap.forEach((key, value) -\\u003e\\n                LogUtil.info(log, String.format(\\\"Value for key %s is %s\\\", key, config.getProperty(key, value))));\\n    }\\n\\n    /**\\n     * 初始化本地配置信息\\n     *\\n     * @return\\n     */\\n    private static Map\\u003cString, String\\u003e initDefaultConfig() {\\n        Map\\u003cString, String\\u003e map = new ConcurrentHashMap\\u003c\\u003e();\\n        //map.put(Constant.FUSIONPAGSERVICE_SWITCH_KEY, Constant.FUSIONPAGSERVICE_SWITCH_OFF);\\n        return map;\\n    }\\n\\n    public \\u003cT\\u003e T getObject(String key, Class\\u003cT\\u003e tClass){\\n        String value = configMap.get(key);\\n        if(StringUtils.isBlank(value)){\\n            return null;\\n        }\\n        return JSON.parseObject(value, tClass);\\n    }\\n\\n    public HashMap getHashMapDefault(String key, HashMap map){\\n        String value = configMap.get(key);\\n        if(StringUtils.isBlank(value)){\\n            return map;\\n        }\\n        try {\\n            return JSON.parseObject(value, HashMap.class);\\n        } catch (Exception e) {\\n            log.warn(\\\"getHashMapDefault warring:\\\", e);\\n            return map;\\n        }\\n    }\\n\\n    public List getEntranceGuardConf(String key) {\\n        try {\\n            String EntranceGuardConf = get(Constants.ENTRANCE_GUARD_CONF);\\n            if (StringUtils.isBlank(EntranceGuardConf)) {\\n                return new ArrayList();\\n            }\\n            JSONObject rootJson = JSONObject.parseObject(EntranceGuardConf);\\n            List list = rootJson.getObject(key, ArrayList.class);\\n            if (list == null) {\\n                return new ArrayList();\\n            }\\n            return list;\\n        } catch (Exception e) {\\n            log.error(\\\"getEntranceGuard error:\\\", e);\\n            return new ArrayList();\\n        }\\n    }\\n\\n}\"\r\n        },\r\n        {\r\n            \"Path\": \"src/main/java/com/poype/heracles/auth/facade/config/ConsulConfigWatch.java\",\r\n            \"Status\": \"M\",\r\n            \"Content\": \"package com.poype.heracles.auth.facade.config;\\n\\nimport com.ecwid.consul.v1.ConsulClient;\\nimport com.ecwid.consul.v1.QueryParams;\\nimport com.ecwid.consul.v1.Response;\\nimport com.ecwid.consul.v1.kv.model.GetValue;\\nimport com.poype.heracles.core.manager.ApplicationManager;\\nimport com.poype.heracles.core.repository.dao.ApplicationDAO;\\nimport com.poype.heracles.core.repository.dao.model.ApplicationDO;\\nimport lombok.extern.slf4j.Slf4j;\\nimport org.apache.commons.lang.StringUtils;\\nimport org.springframework.beans.factory.annotation.Autowired;\\nimport org.springframework.boot.ApplicationArguments;\\nimport org.springframework.boot.ApplicationRunner;\\nimport org.springframework.cloud.consul.config.ConsulConfigProperties;\\nimport org.springframework.stereotype.Component;\\nimport org.springframework.util.CollectionUtils;\\n\\nimport java.util.List;\\nimport java.util.concurrent.ThreadPoolExecutor;\\n\\n/**\\n * 概要信息:\\n * \\u003cp\\u003e\\n * 版权: ©2020 中国平安国际融资租赁有限公司 版权所有\\n *\\n * @author YANGPENGFEI131\\n * @version %I%, %G%\\n * @date 2021-7-21\\n */\\n@Component\\n@Slf4j\\npublic class ConsulConfigWatch implements ApplicationRunner {\\n    private static final String REFRESH_KEY_PREFIX = \\\"arch\\\";\\n    private static final String SEPARATOR_CHAR = \\\".\\\";\\n    private static final int FILTER_KEYS_LENGTH = 2;\\n\\n    @Autowired\\n    private ApplicationManager applicationManager;\\n\\n    /*@Autowired\\n    private Environment environment;\\n\\n    @EventListener(EnvironmentChangeEvent.class)\\n    public void listener(EnvironmentChangeEvent event) {\\n        for (String refreshKey : event.getKeys()) {\\n            if(!StringUtils.startsWith(refreshKey, REFRESH_KEY_PREFIX)) {\\n                continue;\\n            }\\n            String[] keys = StringUtils.split(refreshKey, SEPARATOR_CHAR);\\n            if(keys.length != FILTER_KEYS_LENGTH){\\n                continue;\\n            }\\n            String afterRefreshed = environment.getProperty(refreshKey);\\n            if(StringUtils.isBlank(afterRefreshed)){\\n                continue;\\n            }\\n            log.info(\\\"refresh from iac {} - {}\\\", refreshKey, afterRefreshed);\\n            //新增或更新应用\\n            applicationManager.addAppFromConsulWatch(afterRefreshed);\\n        }\\n    }*/\\n\\n    @Autowired\\n    private ThreadPoolExecutor scanIacTaskScheduler;\\n\\n    @Autowired\\n    private ConsulClient consul;\\n\\n    @Autowired\\n    private ConsulConfigProperties properties;\\n\\n    @Autowired\\n    private ApplicationDAO applicationDAO;\\n\\n    private volatile long curIndex = -1;\\n    private static final long SLEEP_TIME = 60 * 1000;\\n//    private volatile long curTime = System.currentTimeMillis();\\n\\n    @Override\\n    public void run(ApplicationArguments args) throws Exception {\\n        init();\\n    }\\n\\n//    @PostConstruct\\n    public void init(){\\n        scanIacTaskScheduler.execute(this::syncIacConfig);\\n    }\\n\\n    private void syncIacConfig(){\\n        do {\\n            try {\\n                log.info(\\\"-------------syncIacConfig start--------------\\\");\\n                String keyPrefix = \\\"/ops/iac/arch/\\\";\\n                Response\\u003cList\\u003cGetValue\\u003e\\u003e response = this.consul.getKVValues(keyPrefix, this.properties.getAclToken(),\\n                        new QueryParams(10, curIndex));\\n                log.info(\\\"consulIndex: {} - consulKnownLeader: {} - consulLastContact: {}\\\", response.getConsulIndex(), response.isConsulKnownLeader(), response.getConsulLastContact());\\n                if (CollectionUtils.isEmpty(response.getValue())) {\\n                    log.error(\\\"{} has no content\\\", keyPrefix);\\n                    return;\\n                }\\n                curIndex = response.getConsulIndex();\\n                log.info(\\\"{} values size: {}\\\", keyPrefix, response.getValue().size());\\n                List\\u003cApplicationDO\\u003e applicationList = applicationDAO.selectAppNameAndLastIndex();\\n                log.info(\\\"applicationList size: {}\\\", applicationList.size());\\n                for (GetValue value : response.getValue()) {\\n                    try {\\n                        if (value == null) {\\n                            log.info(\\\"syncIacConfig foreach ,GetValue is null!!\\\");\\n                            continue;\\n                        }\\n                        log.info(\\\"createIndex: {} - modifyIndex: {} - key: {}\\\", value.getCreateIndex(), value.getModifyIndex(), value.getKey());\\n                        String appName = StringUtils.substring(value.getKey(), StringUtils.lastIndexOf(value.getKey(), \\\"/\\\") + 1);\\n                        if (StringUtils.isBlank(appName)) {\\n                            continue;\\n                        }\\n                        long lastIndex = value.getModifyIndex() \\u003e 0 ? value.getModifyIndex() : value.getCreateIndex();\\n                        ApplicationDO appDO = applicationList.stream().filter(app -\\u003e StringUtils.equals(app.getApplicationName(), appName)).findFirst().orElse(null);\\n                        if (appDO == null) {\\n                            String content = value.getDecodedValue();\\n                            log.info(\\\"add app: {} - {}\\\", appName, content);\\n                            applicationManager.addAppFromConsulWatch(content, lastIndex);\\n                        } else if (appDO.getLastIndex() != lastIndex) {\\n                            String content = value.getDecodedValue();\\n                            log.info(\\\"update app: {} - {}\\\", appName, content);\\n                            applicationManager.addAppFromConsulWatch(content, lastIndex);\\n                        } else {\\n                            log.info(\\\"app: {} not change\\\", appName);\\n                        }\\n                    } catch (Exception e) {\\n                        log.error(\\\"syncIacConfig values foreach error\\\", e);\\n                    }\\n                }\\n                log.info(\\\"-------------syncIacConfig end sleep 60s--------------\\\");\\n                //线程开始执行时先休眠60s\\n                Thread.sleep(SLEEP_TIME);\\n\\n            } catch (Exception e) {\\n                log.error(\\\"syncIacConfig error\\\", e);\\n            }\\n        }while (true);\\n    }\\n\\n}\"\r\n        },\r\n        {\r\n            \"Path\": \"src/main/java/com/poype/heracles/auth/facade/config/RabbitConfig.java\",\r\n            \"Status\": \"D\",\r\n            \"Content\": \"fatal: Path 'src/main/java/com/poype/heracles/auth/facade/config/RabbitConfig.java' does not exist in '94b07be93611b3076f3a56b77a43d6fa05982c11'\"\r\n        },\r\n        {\r\n            \"Path\": \"src/main/java/com/poype/heracles/auth/facade/config/TaskExecutePool.java\",\r\n            \"Status\": \"M\",\r\n            \"Content\": \"package com.poype.heracles.auth.facade.config;\\n\\nimport lombok.extern.slf4j.Slf4j;\\nimport org.springframework.beans.factory.BeanFactory;\\nimport org.springframework.beans.factory.annotation.Autowired;\\nimport org.springframework.cloud.sleuth.instrument.async.LazyTraceExecutor;\\nimport org.springframework.context.annotation.Bean;\\nimport org.springframework.context.annotation.Configuration;\\nimport org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;\\nimport org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;\\n\\nimport java.util.concurrent.Executor;\\nimport java.util.concurrent.LinkedBlockingQueue;\\nimport java.util.concurrent.ThreadPoolExecutor;\\nimport java.util.concurrent.TimeUnit;\\n\\n/**\\n * 概要信息:\\n * \\u003cp\\u003e\\n * 版权: ©2018 中国平安国际融资租赁有限公司 版权所有\\n *\\n * @author YANGPENGFEI131\\n * @version %I%, %G%\\n * @date 2019-11-26\\n */\\n@Configuration\\n@Slf4j\\npublic class TaskExecutePool {\\n\\n    @Autowired\\n    BeanFactory beanFactory;\\n\\n    @Bean\\n    public ThreadPoolTaskScheduler createTaskScheduler() {\\n        ThreadPoolTaskScheduler threadPoolTaskScheduler = new ThreadPoolTaskScheduler();\\n        //设置线程名\\n        threadPoolTaskScheduler.setThreadNamePrefix(\\\"createTask-\\\");\\n        threadPoolTaskScheduler.setRejectedExecutionHandler(new ThreadPoolExecutor.DiscardPolicy());\\n        threadPoolTaskScheduler.initialize();\\n        return threadPoolTaskScheduler;\\n    }\\n\\n    @Bean\\n    public ThreadPoolTaskScheduler consumeTaskScheduler() {\\n        ThreadPoolTaskScheduler threadPoolTaskScheduler = new ThreadPoolTaskScheduler();\\n        //设置线程名\\n        threadPoolTaskScheduler.setThreadNamePrefix(\\\"consumeTask-\\\");\\n        threadPoolTaskScheduler.setRejectedExecutionHandler(new ThreadPoolExecutor.DiscardPolicy());\\n        threadPoolTaskScheduler.initialize();\\n        return threadPoolTaskScheduler;\\n    }\\n\\n    @Bean\\n    public ThreadPoolExecutor scanIacTaskScheduler() {\\n        return new ThreadPoolExecutor(3, 3, 0L, TimeUnit.MILLISECONDS,\\n                new LinkedBlockingQueue\\u003c\\u003e(3), new ThreadPoolExecutor.DiscardPolicy());\\n    }\\n\\n    @Bean\\n    public Executor getAsyncExecutor(){\\n        ThreadPoolTaskExecutor threadPoolTask = new ThreadPoolTaskExecutor();\\n        threadPoolTask.setThreadNamePrefix(\\\"AsyncExecutor-\\\");\\n        threadPoolTask.setCorePoolSize(25);\\n        threadPoolTask.setMaxPoolSize(25);\\n        threadPoolTask.setQueueCapacity(500);\\n        threadPoolTask.initialize();\\n        return new LazyTraceExecutor(beanFactory, threadPoolTask);\\n    }\\n\\n    /**\\n     * 应用发布mq监听器线程池\\n     * @return\\n     */\\n    @Bean\\n    public Executor deployExecutor() {\\n        ThreadPoolTaskExecutor threadPoolTask = new ThreadPoolTaskExecutor();\\n        threadPoolTask.setThreadNamePrefix(\\\"deployExecutor-\\\");\\n        threadPoolTask.setCorePoolSize(14);\\n        threadPoolTask.setMaxPoolSize(14);\\n        threadPoolTask.setQueueCapacity(50);\\n        threadPoolTask.initialize();\\n        return threadPoolTask;\\n    }\\n\\n    @Bean\\n    public Executor ssdlcExecutor() {\\n        ThreadPoolTaskExecutor threadPoolTask = new ThreadPoolTaskExecutor();\\n        threadPoolTask.setThreadNamePrefix(\\\"ssdlcExecutor-\\\");\\n        threadPoolTask.setCorePoolSize(5);\\n        threadPoolTask.setMaxPoolSize(5);\\n        threadPoolTask.setQueueCapacity(20);\\n        threadPoolTask.initialize();\\n        return threadPoolTask;\\n    }\\n\\n    /**\\n     * 陆吾门禁检查线程池\\n     * @return\\n     */\\n    @Bean\\n    public Executor scanEntranceGuard(){\\n        ThreadPoolTaskExecutor threadPoolTask = new ThreadPoolTaskExecutor();\\n        threadPoolTask.setThreadNamePrefix(\\\"EntranceGuard-\\\");\\n        threadPoolTask.setCorePoolSize(20);\\n        threadPoolTask.setMaxPoolSize(30);\\n        threadPoolTask.setQueueCapacity(500);\\n        threadPoolTask.initialize();\\n        return new LazyTraceExecutor(beanFactory, threadPoolTask);\\n    }\\n}\"\r\n        },\r\n        {\r\n            \"Path\": \"src/main/java/com/poype/heracles/auth/facade/config/mq/RabbitConfig.java\",\r\n            \"Status\": \"A\",\r\n            \"Content\": \"package com.poype.heracles.auth.facade.config.mq;\\n\\nimport com.poype.heracles.common.constant.MqConstant;\\nimport org.springframework.amqp.core.*;\\nimport org.springframework.amqp.rabbit.config.SimpleRabbitListenerContainerFactory;\\nimport org.springframework.amqp.rabbit.connection.ConnectionFactory;\\nimport org.springframework.amqp.rabbit.core.RabbitAdmin;\\nimport org.springframework.amqp.rabbit.listener.RabbitListenerContainerFactory;\\nimport org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer;\\nimport org.springframework.context.annotation.Bean;\\nimport org.springframework.context.annotation.Configuration;\\n\\nimport javax.annotation.Resource;\\nimport java.util.HashMap;\\nimport java.util.Map;\\nimport java.util.concurrent.Executor;\\n\\n@Configuration\\npublic class RabbitConfig {\\n\\n    @Resource\\n    private Executor deployExecutor;\\n\\n    @Resource\\n    private Executor ssdlcExecutor;\\n\\n    @Bean\\n    public RabbitAdmin rabbitAdmin(ConnectionFactory connectionFactory) {\\n        RabbitAdmin rabbitAdmin = new RabbitAdmin(connectionFactory);\\n        //spring加载RabbitAdmin\\n        rabbitAdmin.setAutoStartup(true);\\n        return rabbitAdmin;\\n    }\\n\\n    @Bean\\n    public RabbitListenerContainerFactory\\u003cSimpleMessageListenerContainer\\u003e eoaSubmitApprovalResultContainerFactory(ConnectionFactory connectionFactory){\\n        SimpleRabbitListenerContainerFactory factory = new SimpleRabbitListenerContainerFactory();\\n        factory.setConnectionFactory(connectionFactory);\\n        factory.setPrefetchCount(1);\\n        factory.setConcurrentConsumers(1);\\n        factory.setMaxConcurrentConsumers(1);\\n        return factory;\\n    }\\n\\n    /**\\n     *  heracles 发布队列监听器\\n     *  7个线程,每个线程一次处理一条数据\\n     * @param connectionFactory\\n     * @return\\n     */\\n    @Bean\\n    public RabbitListenerContainerFactory\\u003cSimpleMessageListenerContainer\\u003e deploySITContainerFactory(ConnectionFactory connectionFactory) {\\n        SimpleRabbitListenerContainerFactory factory = new SimpleRabbitListenerContainerFactory();\\n        factory.setConnectionFactory(connectionFactory);\\n        factory.setPrefetchCount(1);//单个线程每次处理数据的数量\\n        factory.setConcurrentConsumers(7);//线程数\\n        factory.setMaxConcurrentConsumers(7);//最大线程数\\n        factory.setTaskExecutor(deployExecutor);//指定线程池\\n        return factory;\\n    }\\n\\n    @Bean\\n    public RabbitListenerContainerFactory\\u003cSimpleMessageListenerContainer\\u003e deployProdContainerFactory(ConnectionFactory connectionFactory) {\\n        SimpleRabbitListenerContainerFactory factory = new SimpleRabbitListenerContainerFactory();\\n        factory.setConnectionFactory(connectionFactory);\\n        factory.setPrefetchCount(1);//单个线程每次处理数据的数量\\n        factory.setConcurrentConsumers(7);//线程数\\n        factory.setMaxConcurrentConsumers(7);//最大线程数\\n        factory.setTaskExecutor(deployExecutor);//指定线程池\\n        return factory;\\n    }\\n\\n\\n    @Bean\\n    public RabbitListenerContainerFactory\\u003cSimpleMessageListenerContainer\\u003e ssdlcContainerFactory(ConnectionFactory connectionFactory) {\\n        SimpleRabbitListenerContainerFactory factory = new SimpleRabbitListenerContainerFactory();\\n        factory.setConnectionFactory(connectionFactory);\\n        factory.setPrefetchCount(1);//单个线程每次处理数据的数量\\n        factory.setConcurrentConsumers(5);//线程数\\n        factory.setMaxConcurrentConsumers(5);//最大线程数\\n        factory.setTaskExecutor(ssdlcExecutor);//指定线程池\\n        return factory;\\n    }\\n\\n    @Bean\\n    public FanoutExchange flowEngineEOAFanoutEx() {\\n        return new FanoutExchange(MqConstant.FLOW_ENGINE_EOA_EX);\\n    }\\n\\n    @Bean\\n    public DirectExchange deploySitEx() {\\n        return new DirectExchange(MqConstant.DEPLOY_SIT_EXCHANGE_NAME);\\n    }\\n\\n    @Bean\\n    public DirectExchange deployProdEx() {\\n        return new DirectExchange(MqConstant.DEPLOY_PROD_EXCHANGE_NAME);\\n    }\\n\\n    @Bean\\n    public Queue serialEoaApproveQueue() {\\n        return new Queue(MqConstant.SERIAL_EOA_SUBMIT_APPROVE_QUEUE, true, false, false);\\n    }\\n\\n    @Bean\\n    public Queue deploySITQueue() {\\n        return new Queue(MqConstant.DEPLOY_SIT_QUEUE_NAME, true, false, false);\\n    }\\n\\n    @Bean\\n    public Queue deployPRODQueue() {\\n        return new Queue(MqConstant.DEPLOY_PROD_QUEUE_NAME, true, false, false);\\n    }\\n\\n    // 绑定发布队列到发布交换机\\n    @Bean\\n    public Binding bindingSITDeployQueueToDeployEx(DirectExchange deploySitEx, Queue deploySITQueue) {\\n        return BindingBuilder.bind(deploySITQueue).to(deploySitEx).with(MqConstant.DEPLOY_SIT_QUEUE_NAME);\\n    }\\n\\n    @Bean\\n    public Binding bindingPRODDeployQueueToDeployEx(DirectExchange deployProdEx, Queue deployPRODQueue) {\\n        return BindingBuilder.bind(deployPRODQueue).to(deployProdEx).with(MqConstant.DEPLOY_PROD_QUEUE_NAME);\\n    }\\n\\n\\n    @Bean\\n    public Binding bindingSerialEoaApproveResult(FanoutExchange flowEngineEOAFanoutEx, Queue serialEoaApproveQueue) {\\n        return BindingBuilder.bind(serialEoaApproveQueue).to(flowEngineEOAFanoutEx);\\n    }\\n\\n\\n\\n\\n    // TTL + 死信队列配置\\n\\n    //rabbitMq内置死信队列属性信息\\n    private final String dlExchange = \\\"x-dead-letter-exchange\\\";\\n    private final String dlRouteKey = \\\"x-dead-letter-routing-key\\\";\\n    private final String ttl = \\\"x-message-ttl\\\";\\n\\n    //创建死信交换机\\n    @Bean\\n    public DirectExchange ssdlcDelayExchange() {\\n        return new DirectExchange(MqConstant.SSDLC_DELAY_EXCHANGE_NAME);\\n    }\\n\\n    //创建死信队列\\n    @Bean\\n    public Queue ssdlcDeadQueue() {\\n        return new Queue(MqConstant.SSDLC_DEAD_DELAY_QUEUE_NAME, true, false, false);\\n    }\\n\\n    /**\\n     * 创建超时队列（业务队列）\\n     */\\n    @Bean\\n    public Queue ssdlcDelayQueue() {\\n        Map\\u003cString, Object\\u003e params = new HashMap\\u003c\\u003e();\\n        //设置队列的过期时间 timeout\\n        params.put(ttl, 1000 * 60 * 5);\\n        //声明当前队列绑定的死信交换机\\n        params.put(dlExchange, MqConstant.SSDLC_DELAY_EXCHANGE_NAME);\\n        //声明当前队列的死信路由键\\n        params.put(dlRouteKey, MqConstant.SSDLC_DEAD_DELAY_ROUTE_KEY);//消息过期发送到新的路由key\\n\\n        return new Queue(MqConstant.SSDLC_DELAY_QUEUE_NAME, true, false, false, params);\\n\\n    }\\n\\n    @Bean\\n    public Binding deadLetterBidngs(){\\n        return BindingBuilder.bind(ssdlcDeadQueue()).to(ssdlcDelayExchange()).with(MqConstant.SSDLC_DEAD_DELAY_ROUTE_KEY);\\n    }\\n\\n}\"\r\n        },\r\n        {\r\n            \"Path\": \"src/main/java/com/poype/heracles/auth/facade/config/mq/SsdlcReqMsg.java\",\r\n            \"Status\": \"A\",\r\n            \"Content\": \"package com.poype.heracles.auth.facade.config.mq;\\n\\nimport com.poype.heracles.core.repository.integration.model.ssdlc.SsdlcRequest;\\n\\nimport java.util.Date;\\n\\n\\npublic class SsdlcReqMsg extends SsdlcRequest {\\n\\n    /**\\n     * 允许扫描时间\\n     */\\n    private Date nextScanTime;\\n\\n    public SsdlcReqMsg() {\\n    }\\n\\n    public SsdlcReqMsg(Date nextScanTime) {\\n        this.nextScanTime = nextScanTime;\\n    }\\n\\n    @Override\\n    public String toString() {\\n        return \\\"SsdlcReqMsg{\\\" +\\n                \\\"nextScanTime=\\\" + nextScanTime +\\n                '}';\\n    }\\n\\n    public Date getNextScanTime() {\\n        return nextScanTime;\\n    }\\n\\n    public void setNextScanTime(Date nextScanTime) {\\n        this.nextScanTime = nextScanTime;\\n    }\\n}\"\r\n            },\r\n            {\r\n                \"Path\": \"src/main/java/com/poype/heracles/common/constant/Constants.java\",\r\n                \"Status\": \"M\",\r\n                \"Content\": \"package com.poype.heracles.common.constant;\\n\\npublic class Constants {\\n\\n    // 运维Jenkins项目路径\\n    public static final String OPS_WORKSPACE_DIR = \\\"/wls/wls81/heracles/git/jenkins-library/app/\\\";\\n\\n    public static final String WORKSPACE_DIR = \\\"/wls/wls81/heracles/git/\\\";\\n\\n    // 运维工程名称\\n    public static final String operationProjectName = \\\"jenkins-library\\\";\\n\\n    // 模板文件存放路径\\n    public static final String TEMPLATE_DIR = \\\"/wls/wls81/heracles/template/\\\";\\n\\n    // jenkinsFile文件名字\\n    public static final String JENKINS_TEMPLATE_FILE_NAME = \\\"Jenkinsfile.ftl\\\";\\n\\n    public static final String H5_JENKINS_TEMPLATE_FILE_NAME = \\\"H5_Jenkinsfile.ftl\\\";\\n\\n    public static final String Apollo_H5_JENKINS_TEMPLATE_FILE_NAME = \\\"Apollo_H5_Jenkinsfile.ftl\\\";\\n\\n    public static final String H5_VALUES_TEMPLATE_FILE_NAME = \\\"H5_VALUES.ftl\\\";\\n\\n    public static final String DOCKER_FILE_PATH = \\\"/wls/wls81/heracles/template/Dockerfile\\\";\\n\\n    public static final String APOLLO_APP_DOCKER_FILE_PATH = \\\"/wls/wls81/heracles/template/Apollo_App_Dockerfile\\\";\\n\\n    public static final String APOLLO_GW_DOCKER_FILE_PATH = \\\"/wls/wls81/heracles/template/Apollo_Gw_Dockerfile\\\";\\n\\n    public static final String H5_DOCKER_FILE_PATH = \\\"/wls/wls81/heracles/template/H5_Dockerfile\\\";\\n\\n    public static final String APOLLO_H5_DOCKER_FILE_PATH = \\\"/wls/wls81/heracles/template/Apollo_H5_Dockerfile\\\";\\n\\n    public static final String USER_DN = \\\"userdn\\\";\\n    public static final String USER_CREDENTIALS = \\\"userpwd\\\";\\n\\n    public static final String CONFIG_FILE = \\\"D:\\\\\\\\Users\\\\\\\\ex-luoweichao001\\\\\\\\Desktop\\\\\\\\devops\\\\\\\\yaml\\\";\\n\\n    public static final String OPERATORS_PRIVILEGE = \\\"operators_privilege\\\";\\n\\n    public static final String CONSUL_URL_PRE = \\\"consul.url.pre\\\";\\n\\n    public static final String SSDLC_CONFIG = \\\"ssdlc.config\\\";\\n\\n    public static final String EOA_BUCKET = \\\"eoa.bucket\\\";\\n\\n    public static final String BRANCH_COMPARE = \\\"branch.compare\\\";\\n\\n    public static final String HERACLES_MSG_CENTER_CONFIG = \\\"fls.heracles.msg.center.config\\\";\\n\\n    public static final String ENTRANCE_GUARD_CONF = \\\"fls.heracles.entrance.guard.conf\\\";\\n\\n    public static final String ENTRANCE_GUARD_TEAMS_KEY = \\\"team.list\\\";\\n\\n    public static final String ENTRANCE_GUARD_SCENARIO_KEY = \\\"scenario.list\\\";\\n\\n    public static final String ENTRANCE_GUARD_URL_KEY = \\\"entrance.guard.url\\\";\\n\\n    public static final String DEPLOY_ENV_SWITCH = \\\"deploy.env.switch\\\";\\n\\n\\n}\"\r\n            },\r\n            {\r\n                \"Path\": \"src/main/java/com/poype/heracles/common/constant/MqConstant.java\",\r\n                \"Status\": \"M\",\r\n                \"Content\": \"package com.poype.heracles.common.constant;\\n\\npublic class MqConstant {\\n\\n    public static final String HERACLES_EXCHANGE_NAME = \\\"heracles_exchange\\\";\\n\\n    public static final String RELEASE_ORDER_QUEUE = \\\"release_order_queue\\\";\\n\\n    public static final String APPLICATION_QUEUE = \\\"application_queue\\\";\\n\\n    public static final String SPRINT_QUEUE = \\\"sprint_queue\\\";\\n\\n    //EOA签报\\n    public static final String SERIAL_EOA_SUBMIT_APPROVE_QUEUE = \\\"serial.eoa.submit.approve.queue\\\";\\n    public static final String FLOW_ENGINE_EOA_EX = \\\"aflm.arch.flow.eoa.fanout.exchange\\\";\\n\\n    // heracles ssdlc死信交换机名字\\n    public static final String SSDLC_DELAY_EXCHANGE_NAME = \\\"heracles.ssdlc.dead.delay.exchange\\\";\\n\\n    // heracles 死信路由主键\\n    public static final String SSDLC_DEAD_DELAY_ROUTE_KEY = \\\"heracles.ssdlc.dead.delay.route.key\\\";\\n\\n    //heracles ssdlc死信队列名字\\n    public static final String SSDLC_DEAD_DELAY_QUEUE_NAME = \\\"heracles.ssdlc.dead.delay.queue\\\";\\n    //heracles ssdlc延时队列名字\\n    public static final String SSDLC_DELAY_QUEUE_NAME = \\\"heracles.ssdlc.delay.queue\\\";\\n\\n    //heracles发布业务队列\\n    public static final String DEPLOY_SIT_QUEUE_NAME = \\\"heracles.sit.deploy.queue\\\";\\n    public static final String DEPLOY_PROD_QUEUE_NAME = \\\"heracles.prod.deploy.queue\\\";\\n    //heracles发布业务交换机\\n    public static final String DEPLOY_SIT_EXCHANGE_NAME = \\\"heracles.sit.deploy.exchange\\\";\\n    public static final String DEPLOY_PROD_EXCHANGE_NAME = \\\"heracles.prod.deploy.exchange\\\";\\n\\n\\n\\n}\"\r\n            },\r\n            {\r\n                \"Path\": \"src/main/java/com/poype/heracles/common/enums/BusinessErrorCode.java\",\r\n                \"Status\": \"M\",\r\n                \"Content\": \"package com.poype.heracles.common.enums;\\n\\nimport org.apache.commons.lang.StringUtils;\\n\\nimport static com.poype.heracles.common.dto.error.ErrorLevel.ERROR;\\nimport static com.poype.heracles.common.dto.error.ErrorLevel.INFO;\\n\\npublic enum BusinessErrorCode {\\n\\n    /*********************通用错误码，与业务无关*********************/\\n    /**\\n     * 成功\\n     */\\n    SUCCESS(\\\"000\\\", INFO, \\\"success\\\"),\\n\\n    /**\\n     * 参数不合法\\n     */\\n    PARAM_ILLEGAL(\\\"001\\\", ERROR, \\\"param illegal\\\"),\\n\\n    /**\\n     * system error\\n     */\\n    SYSTEM_ERROR(\\\"999\\\", ERROR, \\\"system error\\\"),\\n\\n    GIT_ADDR_ILLEGAL(\\\"003\\\", INFO, \\\"Git仓库地址不合法\\\"),\\n\\n    RELEASE_ENV_ILLEGAL(\\\"004\\\", INFO, \\\"发布环境不合法，请选择发布相同环境的应用\\\"),\\n\\n    GIT_PUSH_ERROR(\\\"005\\\", INFO, \\\"GIT PUSH ERROR\\\"),\\n\\n    GIT_CLONE_ERROR(\\\"006\\\", INFO, \\\"GIT CLONE ERROR\\\"),\\n\\n    GIT_PULL_ERROR(\\\"007\\\", INFO, \\\"GIT PULL ERROR\\\"),\\n\\n    GIT_CREATE_BRANCH_ERROR(\\\"008\\\", INFO, \\\"GIT CREATE BRANCH ERROR\\\"),\\n\\n    DUPLICATE_APP_NAME(\\\"009\\\", INFO, \\\"DUPLICATE APP NAME\\\"),\\n\\n    APP_NOT_FOUND(\\\"010\\\", INFO, \\\"APP NOT FOUND\\\"),\\n\\n    ILLEGAL_SPRINT_STATUS(\\\"011\\\", INFO, \\\"illegal sprint status\\\"),\\n\\n    ILLEGAL_ENVIRONMENT(\\\"012\\\", INFO, \\\"illegal environment\\\"),\\n\\n    NO_FREE_SIT_ENV(\\\"013\\\", INFO, \\\"can't find any free sit environment\\\"),\\n\\n    ENV_NOT_EXIST(\\\"014\\\", INFO, \\\"env not exist\\\"),\\n\\n    PICK_ENV_CONFLICT(\\\"015\\\", INFO, \\\"pick environment conflict\\\"),\\n\\n    APP_OF_SPRINT_CONFLICT(\\\"016\\\", INFO, \\\"已存在相同的版本,请核查\\\"),\\n\\n    ROLE_LOST(\\\"020\\\", INFO, \\\"请选择用户角色\\\"),\\n\\n    ACCOUNT_ERROR(\\\"022\\\", INFO, \\\"登录账号认证失败\\\"),\\n\\n    PASSWORD_ERROR(\\\"023\\\", INFO, \\\"登录密码认证失败\\\"),\\n\\n    ROLE_EXIST(\\\"024\\\", INFO, \\\"用户角色已存在\\\"),\\n\\n    CLONE_APP_CODE_ERROR(\\\"025\\\", INFO, \\\"clone app code error\\\"),\\n\\n    GENERATE_CONFIG_FILE_ERROR(\\\"026\\\", INFO, \\\"generate config file error\\\"),\\n\\n    CREATE_JENKINS_JOB_ERROR(\\\"027\\\", INFO, \\\"create jenkins job error\\\"),\\n\\n    CONCURRENT_UPDATE_APP_STATUS(\\\"028\\\", ERROR, \\\"concurrent update app's status\\\"),\\n\\n    ILLEGAL_APP_STATUS(\\\"029\\\", ERROR, \\\"Illegal app status\\\"),\\n\\n    APP_DEPLOYING(\\\"030\\\", ERROR, \\\"应用发布中,请稍等\\\"),\\n\\n    APP_EXIST(\\\"031\\\", ERROR, \\\"该应用在该环境已经存在一个版本，暂不能进入\\\"),\\n\\n    ROLE_ERROR(\\\"032\\\", ERROR, \\\"只有该版本的应用测试人员才能切换应用状态\\\"),\\n\\n    NO_AUTHORITY(\\\"033\\\", ERROR, \\\"只有研发负责人可以编辑配置\\\"),\\n\\n    RC_USE_ERROR(\\\"034\\\", ERROR, \\\"该版本不使用RC环境测试\\\"),\\n\\n    SPRINT_NOT_EXIST(\\\"035\\\", ERROR, \\\"sprint not exist\\\"),\\n\\n    UPDATE_MIDDLEWARE_FAIL(\\\"036\\\", INFO, \\\"更新中间件失败\\\"),\\n\\n    SPRINT_NO_IN_PROD(\\\"0037\\\", INFO, \\\"sprint no in prod\\\"),\\n\\n    CODEAPI_CREATE_BRANCH_FAIL(\\\"0038\\\", INFO, \\\"codeapi create branch fail\\\"),\\n\\n    CODEAPI_LOCK_BRANCH_FAIL(\\\"0039\\\", INFO, \\\"codeapi lock branch fail\\\"),\\n\\n    CODEAPI_MERGE_REQUEST_FAIL(\\\"0040\\\", INFO, \\\"codeapi merge request fail\\\"),\\n\\n    CODEAPI_PROTECT_BRANCH_FAIL(\\\"0041\\\", INFO, \\\"codeapi protect branch fail\\\"),\\n\\n    EDIT_ONLY_BY_CREATOR(\\\"0042\\\", INFO, \\\"只有版本创建人有权限编辑修改\\\"),\\n\\n    REPLICA_COUNT_BIG_ONE(\\\"0043\\\", INFO, \\\"生产环境副本数量不能低于2\\\"),\\n\\n    ILLEGAL_RELEASE_ENV(\\\"0044\\\", INFO, \\\"应用发布环境不合法\\\"),\\n\\n    BRANCH_EXISTED(\\\"0045\\\", INFO, \\\"分支已存在\\\"),\\n\\n    APPID_NO_EXISTED(\\\"0046\\\", INFO, \\\"应用id不存在\\\"),\\n\\n    CODE_API_SURPASS_LIMIT(\\\"0047\\\", INFO, \\\"code api surpass limit\\\"),\\n\\n    NOT_FUND_STORY(\\\"0048\\\", INFO, \\\"not found story\\\"),\\n\\n    CODE_TYPE_NOT_EXIT(\\\"0049\\\", ERROR, \\\"字典类型不存在\\\"),\\n\\n    RELEASE_DATE_SAVE_FAILED(\\\"0049\\\", ERROR, \\\"发版日保存失败\\\"),\\n    \\n    UED_NOT_PASS(\\\"0050\\\", ERROR, \\\"UED验收未通过\\\"),\\n\\n    UED_CONFIRM_ERROR(\\\"0051\\\", ERROR, \\\"UED确认信息更新失败\\\"),\\n\\n    FLOW_API_ERROR(\\\"0052\\\", ERROR, \\\"流程引擎接口调用失败\\\"),\\n\\n    BUSINESS_CHECK_EXCEPTION(\\\"0053\\\", ERROR, \\\"业务检查异常\\\"),\\n\\n    INEFFECTIVE_APPROVE(\\\"0054\\\", ERROR, \\\"无有效签报\\\"),\\n\\n    RELEASE_ORDER_EXIST(\\\"0055\\\", ERROR, \\\"找不到发布单\\\"),\\n\\n    NOT_BIND_WIZARD_PLAN(\\\"0056\\\", ERROR, \\\"未绑定神兵\\\"),\\n\\n    RELEASE_ENV_ERROR(\\\"0057\\\", ERROR, \\\"发布环境管控\\\"),\\n\\n    ;\\n\\n    private final String specificCode;\\n\\n    private final String description;\\n\\n    private final String errorLevel;\\n\\n    /**\\n     * @param specificCode 错误编码\\n     * @param errorLevel   错误级别\\n     * @param description  错误描述\\n     */\\n    BusinessErrorCode(String specificCode, String errorLevel, String description) {\\n        this.specificCode = specificCode;\\n        this.errorLevel = errorLevel;\\n        this.description = description;\\n    }\\n\\n    /**\\n     * 根据错误编码获取枚举对象\\n     *\\n     * @param code 错误编码\\n     * @return 错误枚举对象\\n     */\\n    public static BusinessErrorCode getBySpecificCode(String code) {\\n        if (StringUtils.isBlank(code)) {\\n            return null;\\n        }\\n        for (BusinessErrorCode errorCode : values()) {\\n            if (StringUtils.equalsIgnoreCase(errorCode.getSpecificCode(), code)) {\\n                return errorCode;\\n            }\\n        }\\n        return null;\\n    }\\n\\n    public String getResultCode() {\\n        return null;\\n    }\\n\\n    public String getResultMsg() {\\n        return null;\\n    }\\n\\n\\n    public String getSpecificCode() {\\n        return specificCode;\\n    }\\n\\n    public String getDescription() {\\n        return description;\\n    }\\n\\n    public String getErrorLevel() {\\n        return errorLevel;\\n    }\\n\\n}\"\r\n            },\r\n            {\r\n                \"Path\": \"src/main/java/com/poype/heracles/common/listener/DeployEventListener.java\",\r\n                \"Status\": \"A\",\r\n                \"Content\": \"package com.poype.heracles.common.listener;\\n\\nimport com.alibaba.fastjson.JSON;\\nimport com.poype.heracles.common.constant.MqConstant;\\nimport com.poype.heracles.common.enums.BusinessErrorCode;\\nimport com.poype.heracles.common.util.AssertUtil;\\nimport com.poype.heracles.core.domain.model.Environment;\\nimport com.poype.heracles.core.domain.model.ReleaseItem;\\nimport com.poype.heracles.core.domain.model.ReleaseOrder;\\nimport com.poype.heracles.core.domain.model.enums.ReleaseItemStatus;\\nimport com.poype.heracles.core.domain.service.deployCheck.SprintDeployCheckUserImpl;\\nimport com.poype.heracles.core.facade.request.deploy.DeployReq;\\nimport com.poype.heracles.core.repository.EnvironmentRepository;\\nimport com.poype.heracles.core.repository.ReleaseRepository;\\nimport com.poype.heracles.core.repository.dao.ReleaseDAO;\\nimport com.poype.heracles.core.repository.dao.model.ReleaseItemDO;\\nimport com.poype.heracles.core.repository.integration.ReleaseClient;\\nimport lombok.extern.slf4j.Slf4j;\\nimport org.apache.commons.lang.StringUtils;\\nimport org.springframework.amqp.rabbit.annotation.RabbitListener;\\nimport org.springframework.beans.factory.annotation.Autowired;\\nimport org.springframework.beans.factory.annotation.Value;\\nimport org.springframework.stereotype.Component;\\n\\nimport javax.annotation.Resource;\\n\\n@Component\\n@Slf4j\\npublic class DeployEventListener {\\n\\n    @Value(\\\"${spring.application.name                }\\\")\\n    private String appName;\\n\\n    @Autowired\\n    private ReleaseRepository releaseRepository;\\n\\n    @Resource\\n    private EnvironmentRepository environmentRepository;\\n\\n    @Autowired\\n    private ReleaseClient releaseClient;\\n\\n    @Autowired\\n    private ReleaseDAO releaseDAO;\\n\\n    @Resource\\n    private SprintDeployCheckUserImpl checkServiceImpl;\\n\\n\\n    @RabbitListener(queues = MqConstant.DEPLOY_SIT_QUEUE_NAME, containerFactory = \\\"deploySITContainerFactory\\\")\\n    public void deploySITEventListener(String msg) {\\n        log.info(\\\"deploySITEventListener msg: {}\\\", msg);\\n        deploy(msg);\\n    }\\n\\n\\n    @RabbitListener(queues = MqConstant.DEPLOY_PROD_QUEUE_NAME, containerFactory = \\\"deployProdContainerFactory\\\")\\n    public void deployPRODEventListener(String msg) {\\n        log.info(\\\"deployPRODEventListener msg: {}\\\", msg);\\n        deploy(msg);\\n    }\\n\\n    private void deploy(String msg) {\\n        try {\\n            DeployReq deployReq = JSON.parseObject(msg, DeployReq.class);\\n            ReleaseOrder releaseOrder;\\n            if (deployReq != null) {\\n                boolean partition = deployReq.isPartition();\\n                releaseOrder = releaseRepository.queryByItemId(deployReq.getItemId());\\n                AssertUtil.notNull(releaseOrder, BusinessErrorCode.SYSTEM_ERROR, \\\"itemId【\\\" + deployReq.getItemId() + \\\"】数据不存在！\\\");\\n                //查询要发布的环境\\n                Environment environment = environmentRepository.queryByEnvName(releaseOrder.getEnvName());\\n                ReleaseItem releaseItem = releaseOrder.getReleaseItems().get(0);\\n                log.info(\\\"deploy appName: {}, environment {},partition: {},operator: {}\\\", releaseItem.getAppName(), environment, partition, deployReq.getOperator());\\n                // 发布\\n                if (StringUtils.isBlank(deployReq.getDc()) || StringUtils.isBlank(deployReq.getDcEnv())) {\\n                    if (StringUtils.isNotBlank(releaseItem.getTeam())) {\\n                        releaseClient.deployStrategy(releaseOrder, environment, partition);\\n\\n                        releaseDAO.updateReleaseOrderStatus(releaseOrder.getOrderId(), releaseOrder.getStatus().getCode());\\n                    } else {\\n                        releaseClient.deploy(releaseOrder, environment, partition);\\n\\n                        releaseRepository.updateReleaseOrderStatus(releaseOrder);\\n                    }\\n                } else {\\n                    //策略发布 指定环境和机房\\n                    if (StringUtils.isNotBlank(releaseItem.getTeam())) {\\n                        releaseClient.deployDirect(releaseOrder, environment, deployReq.getDc(), deployReq.getDcEnv(), partition);\\n                    } else {\\n                        releaseClient.deploy(releaseOrder, environment, partition);\\n                    }\\n                    releaseRepository.updateReleaseOrderStatus(releaseOrder);\\n                }\\n                releaseRepository.saveRegionInfo(releaseOrder, partition, environment, deployReq.getOperator());\\n\\n                //重置内存中的排名登记\\n                if (checkServiceImpl.offSetListOrReturnCount(environment.getEnvType()) != 0) {\\n                    checkServiceImpl.remove(environment.getEnvType(), releaseItem.getAppName());\\n                }\\n                if (StringUtils.equalsIgnoreCase(releaseItem.getAppName(), appName) || queryFinish(deployReq)) return;\\n                // 等待结果  以item为维度 每10s查询一次结果  查询3分钟后自动丢弃\\n                int start = 1000 * 60;// 60s 开始查询时间\\n                int stop = 1000 * 60 * 3;// 截止时间 180s\\n                int step = 1000 * 10;// 步进\\n                Thread.sleep(start);// 睡眠60s后开始查询  180s后截止\\n                do {\\n                    try {\\n                        if (queryFinish(deployReq)) break;\\n                        start += step;\\n                        Thread.sleep(step);//步进,每10s查询一次\\n                    } catch (Exception e) {\\n                        log.error(\\\"exception：\\\", e);\\n                    }\\n                } while (start \\u003c stop);\\n            }\\n        } catch (Exception e) {\\n            log.error(\\\"mq处理发布结果异常 error\\\", e);\\n        }\\n    }\\n\\n    private boolean queryFinish(DeployReq deployReq) {\\n        ReleaseItemDO releaseItemDO = releaseDAO.queryReleaseItemByItemId(deployReq.getItemId());\\n        ReleaseItemStatus releaseItemStatus = ReleaseItemStatus.getByCode(releaseItemDO.getStatus());\\n        // 终态 break\\n        return releaseItemStatus == ReleaseItemStatus.SUCCESS || releaseItemStatus == ReleaseItemStatus.FAIL;\\n    }\\n\\n\\n}\"\r\n            },\r\n            {\r\n                \"Path\": \"src/main/java/com/poype/heracles/common/listener/SSDLCReqEventListener.java\",\r\n                \"Status\": \"A\",\r\n                \"Content\": \"package com.poype.heracles.common.listener;\\n\\nimport com.alibaba.fastjson.JSON;\\nimport com.poype.heracles.auth.facade.config.mq.SsdlcReqMsg;\\nimport com.poype.heracles.common.constant.MqConstant;\\nimport com.poype.heracles.core.domain.service.EventSenderService;\\nimport com.poype.heracles.core.domain.service.SprintService;\\nimport com.poype.heracles.core.repository.integration.SsdlcApiClient;\\nimport lombok.extern.slf4j.Slf4j;\\nimport org.springframework.amqp.rabbit.annotation.RabbitListener;\\nimport org.springframework.beans.factory.annotation.Autowired;\\nimport org.springframework.stereotype.Component;\\n\\nimport java.util.Calendar;\\nimport java.util.Date;\\n\\n\\n@Component\\n@Slf4j\\npublic class SSDLCReqEventListener {\\n\\n\\n    @Autowired\\n    private EventSenderService senderService;\\n\\n    @Autowired\\n    private SprintService sprintService;\\n\\n\\n    @RabbitListener(queues = MqConstant.SSDLC_DEAD_DELAY_QUEUE_NAME, containerFactory = \\\"ssdlcContainerFactory\\\")\\n    public void ssdlcRequestListener(String msg) {\\n        log.info(\\\"ssdlcRequestListener msg: {}\\\", msg);\\n        SsdlcReqMsg ssdlcReqMsg = JSON.parseObject(msg, SsdlcReqMsg.class);\\n        if (ssdlcReqMsg != null) {\\n            Date nextScanTime = ssdlcReqMsg.getNextScanTime();\\n            int compare = Calendar.getInstance().getTime().compareTo(nextScanTime);\\n            if (compare \\u003e= 0) {\\n                synchronized (SsdlcApiClient.class) {\\n                    sprintService.startSsdlc(ssdlcReqMsg);\\n                }\\n            } else {\\n                //重新入队\\n                senderService.sendSSDLCScanMessage(ssdlcReqMsg);\\n            }\\n        }\\n    }\\n\\n}\"\r\n            },\r\n            {\r\n                \"Path\": \"src/main/java/com/poype/heracles/core/domain/model/ReleaseItem.java\",\r\n                \"Status\": \"M\",\r\n                \"Content\": \"package com.poype.heracles.core.domain.model;\\n\\nimport com.poype.heracles.common.util.IdUtil;\\nimport com.poype.heracles.core.domain.model.enums.JenkinsEnvType;\\nimport com.poype.heracles.core.domain.model.enums.ReleaseItemStatus;\\nimport lombok.Data;\\nimport lombok.ToString;\\n\\nimport java.util.Date;\\nimport java.util.List;\\n\\n/**\\n * 发布项\\n */\\n@ToString\\n@Data\\npublic class ReleaseItem {\\n\\n    /**\\n     * 发布单Id\\n     */\\n    private String orderId;\\n\\n    /**\\n     * 发布项Id\\n     */\\n    private String itemId;\\n\\n    /**\\n     * 发布项状态\\n     */\\n    private ReleaseItemStatus status;\\n\\n    /**\\n     * 应用名字\\n     */\\n    private String appName;\\n\\n    /**\\n     * 团队\\n     */\\n    private String team;\\n\\n    /**\\n     * project项目组\\n     */\\n    private String project;\\n\\n    /**\\n     * 代码仓库url\\n     */\\n    private String codeRepos;\\n\\n    /**\\n     * 代码分支\\n     */\\n    private String codeBranch;\\n\\n    /**\\n     * Jenkins日志链接\\n     */\\n    private String logLink;\\n\\n    /**\\n     * 部署编号\\n     */\\n    private int buildNo;\\n\\n    private JenkinsEnvType jenkinsEnvType;\\n\\n    private String belongSystem;\\n\\n    private List\\u003cReleaseItemDc\\u003e itemDcList;\\n\\n    private Date updateTime;\\n\\n\\n    public ReleaseItem(String orderId, String appName, String codeRepos, String codeBranch, String team, String project, String belongSystem) {\\n        this.itemId = IdUtil.generateBizId();\\n        this.status = ReleaseItemStatus.INIT;\\n        this.orderId = orderId;\\n        this.appName = appName;\\n        this.codeRepos = codeRepos;\\n        this.codeBranch = codeBranch;\\n        this.team = team;\\n        this.project = project;\\n        this.belongSystem = belongSystem;\\n    }\\n\\n    public ReleaseItem(String orderId, String itemId, ReleaseItemStatus status, String appName, String team, String project,\\n                       String codeRepos, String codeBranch, String logLink, int buildNo,\\n                       JenkinsEnvType jenkinsEnvType, String belongSystem) {\\n        this.orderId = orderId;\\n        this.itemId = itemId;\\n        this.status = status;\\n        this.appName = appName;\\n        this.team = team;\\n        this.project = project;\\n        this.codeRepos = codeRepos;\\n        this.codeBranch = codeBranch;\\n        this.logLink = logLink;\\n        this.buildNo = buildNo;\\n        this.jenkinsEnvType = jenkinsEnvType;\\n        this.belongSystem = belongSystem;\\n    }\\n    public ReleaseItem(String orderId, String itemId, ReleaseItemStatus status, String appName, String team, String project,\\n                       String codeRepos, String codeBranch, String logLink, int buildNo,\\n                       JenkinsEnvType jenkinsEnvType, String belongSystem, Date updateTime) {\\n        this.orderId = orderId;\\n        this.itemId = itemId;\\n        this.status = status;\\n        this.appName = appName;\\n        this.team = team;\\n        this.project = project;\\n        this.codeRepos = codeRepos;\\n        this.codeBranch = codeBranch;\\n        this.logLink = logLink;\\n        this.buildNo = buildNo;\\n        this.jenkinsEnvType = jenkinsEnvType;\\n        this.belongSystem = belongSystem;\\n        this.updateTime = updateTime;\\n    }\\n\\n}\"\r\n            },\r\n            {\r\n                \"Path\": \"src/main/java/com/poype/heracles/core/domain/model/auth/DeployResp.java\",\r\n                \"Status\": \"D\",\r\n                \"Content\": \"fatal: Path 'src/main/java/com/poype/heracles/core/domain/model/auth/DeployResp.java' does not exist in '94b07be93611b3076f3a56b77a43d6fa05982c11'\"\r\n            },\r\n            {\r\n                \"Path\": \"src/main/java/com/poype/heracles/core/domain/model/enums/EntranceGuardEnum.java\",\r\n                \"Status\": \"A\",\r\n                \"Content\": \"package com.poype.heracles.core.domain.model.enums;\\n\\nimport org.apache.commons.lang.StringUtils;\\n\\npublic enum EntranceGuardEnum {\\n    apiNotEoa(0, \\\"apiNotEoa\\\", \\\"敏感接口未绑定签报\\\"),\\n    apiNotPenetration(1, \\\"apiNotPenetration\\\", \\\"接口未渗透测试,或该版本未渗透豁免\\\"),\\n    apiNotVersion(2, \\\"apiNotVersion\\\", \\\"接口绑定版本错误\\\"),\\n    ssdlcNotPass(3, \\\"ssdlcNotPass\\\", \\\"ssdlc校验不通过\\\"),\\n    sdmpNotPass(4, \\\"sdmpNotPass\\\", \\\"数据库存在敏感字段未加密\\\")\\n    ;\\n\\n\\n    private int code;\\n\\n    private String name;\\n\\n    private String description;\\n\\n    EntranceGuardEnum(int code, String name, String description) {\\n        this.code = code;\\n        this.name = name;\\n        this.description = description;\\n    }\\n\\n\\n    public static String getDescByName(String typeName) {\\n        if (StringUtils.isBlank(typeName)) {\\n            return null;\\n        }\\n        for (EntranceGuardEnum status : values()) {\\n            if (StringUtils.equalsIgnoreCase(status.getName(), typeName)) {\\n                return status.getDescription();\\n            }\\n        }\\n        return typeName;\\n    }\\n\\n    public static EntranceGuardEnum getByCode(int code) {\\n        for (EntranceGuardEnum status : values()) {\\n            if (status.code == code) {\\n                return status;\\n            }\\n        }\\n        return null;\\n    }\\n\\n    public int getCode() {\\n        return code;\\n    }\\n\\n    public void setCode(int code) {\\n        this.code = code;\\n    }\\n\\n    public String getName() {\\n        return name;\\n    }\\n\\n    public void setName(String name) {\\n        this.name = name;\\n    }\\n\\n    public String getDescription() {\\n        return description;\\n    }\\n\\n    public void setDescription(String description) {\\n        this.description = description;\\n    }\\n}\"\r\n            },\r\n            {\r\n                \"Path\": \"src/main/java/com/poype/heracles/core/domain/model/enums/ReleaseItemStatus.java\",\r\n                \"Status\": \"M\",\r\n                \"Content\": \"package com.poype.heracles.core.domain.model.enums;\\n\\npublic enum ReleaseItemStatus {\\n    INIT(0, \\\"INIT\\\",\\\"初始化\\\"),\\n\\n    PREPARE(1, \\\"PREPARE\\\",\\\"准备\\\"),//准备\\n\\n    PROCESSING(2, \\\"PROCESSING\\\",\\\"处理中\\\"),//处理\\n\\n    SUCCESS(3, \\\"SUCCESS\\\",\\\"成功\\\"),\\n\\n    FAIL(4, \\\"FAIL\\\",\\\"失败\\\"),\\n\\n    RANKING(5, \\\"RANKING\\\",\\\"排队中\\\");\\n\\n    private int code;\\n\\n    private String name;\\n\\n    private String desc;\\n\\n    public static ReleaseItemStatus getByCode(int code) {\\n        for (ReleaseItemStatus status : values()) {\\n            if (status.getCode() == code) {\\n                return status;\\n            }\\n        }\\n        return null;\\n    }\\n\\n    ReleaseItemStatus(int code, String name) {\\n        this.code = code;\\n        this.name = name;\\n    }\\n\\n    ReleaseItemStatus(int code, String name, String desc) {\\n        this.code = code;\\n        this.name = name;\\n        this.desc = desc;\\n    }\\n\\n    public int getCode() {\\n        return code;\\n    }\\n\\n    public void setCode(int code) {\\n        this.code = code;\\n    }\\n\\n    public String getName() {\\n        return name;\\n    }\\n\\n    public void setName(String name) {\\n        this.name = name;\\n    }\\n\\n    public String getDesc() {\\n        return desc;\\n    }\\n\\n    public void setDesc(String desc) {\\n        this.desc = desc;\\n    }\\n}\"\r\n            },\r\n            {\r\n                \"Path\": \"src/main/java/com/poype/heracles/core/domain/service/EventSenderService.java\",\r\n                \"Status\": \"A\",\r\n                \"Content\": \"package com.poype.heracles.core.domain.service;\\n\\n\\nimport com.poype.heracles.auth.facade.config.mq.SsdlcReqMsg;\\nimport com.poype.heracles.core.domain.model.ReleaseOrder;\\nimport com.poype.heracles.core.facade.request.deploy.DeployReq;\\n\\npublic interface EventSenderService {\\n\\n    void sendHeraclesDeployMessage(ReleaseOrder releaseOrder, DeployReq deployReq);\\n\\n    void sendSSDLCScanMessage(SsdlcReqMsg reqMsg);\\n\\n    void sendMsgAndConfirmCallback(ReleaseOrder releaseOrder, DeployReq deployReq);\\n}\"\r\n            },\r\n            {\r\n                \"Path\": \"src/main/java/com/poype/heracles/core/domain/service/KafkaConsumerService.java\",\r\n                \"Status\": \"M\",\r\n                \"Content\": \"package com.poype.heracles.core.domain.service;\\n\\nimport com.alibaba.fastjson.JSONObject;\\nimport com.poype.heracles.common.enums.BusinessErrorCode;\\nimport com.poype.heracles.common.enums.SSDLCStatusEnum;\\nimport com.poype.heracles.common.util.AssertUtil;\\nimport com.poype.heracles.core.repository.dao.AppSsdlcDetailDao;\\nimport com.poype.heracles.core.repository.dao.ApplicationDAO;\\nimport com.poype.heracles.core.repository.dao.SprintDAO;\\nimport com.poype.heracles.core.repository.dao.model.AppOfSprintDO;\\nimport com.poype.heracles.core.repository.dao.model.AppSsdlcDetailDO;\\nimport com.poype.heracles.core.repository.dao.model.ApplicationDO;\\nimport com.poype.heracles.core.repository.dao.model.SprintDO;\\nimport com.poype.heracles.core.repository.integration.model.ssdlc.Data;\\nimport com.poype.heracles.core.repository.integration.model.ssdlc.IssueData;\\nimport com.poype.heracles.core.repository.integration.model.ssdlc.SsdlcKafkaData;\\nimport lombok.extern.slf4j.Slf4j;\\nimport org.apache.commons.lang.StringUtils;\\nimport org.apache.kafka.clients.consumer.ConsumerRecord;\\nimport org.springframework.beans.factory.annotation.Autowired;\\nimport org.springframework.kafka.annotation.KafkaListener;\\nimport org.springframework.stereotype.Service;\\nimport org.springframework.transaction.annotation.Transactional;\\n\\nimport java.util.List;\\n\\n@Service\\n@Slf4j\\npublic class KafkaConsumerService {\\n    public static final String RESULT_CODE_TEXT = \\\"完成\\\";\\n\\n    @Autowired\\n    private AppSsdlcDetailDao appSsdlcDetailDao;\\n\\n    @Autowired\\n    private SprintDAO sprintDAO;\\n\\n    @Autowired\\n    private ApplicationDAO applicationDAO;\\n\\n    @Autowired\\n    private MessageCenterService messageCenterService;\\n\\n    @Transactional\\n    @KafkaListener(topics = \\\"${kafka.topic.ssdlc-event}\\\", errorHandler = \\\"consumerAwareListenerErrorHandler\\\")\\n    public void ssdlcConsumer(ConsumerRecord\\u003cString, String\\u003e record) {\\n        log.info(\\\"ssdlcConsumer topic: {}, partition: {}, key: {}, value: {}\\\", record.topic(), record.partition(), record.key(), record.value());\\n        // 获取kafka中的value信息\\n        String objectValue = record.value();\\n        SsdlcKafkaData result = JSONObject.parseObject(objectValue, SsdlcKafkaData.class);\\n        try {\\n            if (result == null) {\\n                AssertUtil.isTrue(false, BusinessErrorCode.PARAM_ILLEGAL, \\\"kafka数据不存在\\\");\\n            }\\n            Data data = result.getData();\\n\\n            IssueData issueData = data.getIssueData() != null ? data.getIssueData() : new IssueData();\\n            //lock\\n            ApplicationDO applicationDO = applicationDAO.selectForUpdateByAppName(data.getModuleName().toLowerCase());\\n\\n            List\\u003cAppSsdlcDetailDO\\u003e appSsdlcDetails = appSsdlcDetailDao.queryByScanJobCode(data.getScanJobCode());\\n            if (appSsdlcDetails == null || appSsdlcDetails.isEmpty()) {\\n                AssertUtil.isFalse(false, BusinessErrorCode.PARAM_ILLEGAL, \\\"kafka接收的数据不存在\\\");\\n            }\\n            for (AppSsdlcDetailDO appSsdlcDetailDO : appSsdlcDetails) {\\n                // 更新detail表\\n                boolean isSuccess = false;\\n                AppSsdlcDetailDO appSsdlcDetailDOOther = null;\\n                if (RESULT_CODE_TEXT.equals(data.getResultCodeText())) {// 成功处理\\n                    isSuccess = true;\\n                    appSsdlcDetailDOOther = AppSsdlcDetailDO.builder()\\n                            .id(appSsdlcDetailDO.getId())\\n                            .ssdlcStatus(SSDLCStatusEnum.success)\\n                            .systemCode(data.getSubSystemCode())\\n                            .moduleName(data.getModuleName())\\n                            .versionName(data.getVersionName())\\n                            .scanStartTime(data.getScanStartTime())\\n                            .expectEndTime(data.getExpectEndTime())\\n                            .issueDataUrl(data.getIssueDataUrl())\\n                            .criticalCount(issueData.getCriticalCount())\\n                            .highCount(issueData.getHighCount())\\n                            .mediumCount(issueData.getMediumCount())\\n                            .lowCount(issueData.getLowCount())\\n                            .kafkaResponse(objectValue)\\n                            .updatedBy(\\\"kafka\\\")\\n                            .build();\\n                } else {// 失败处理\\n                    appSsdlcDetailDOOther = AppSsdlcDetailDO.builder()\\n                            .id(appSsdlcDetailDO.getId())\\n                            .ssdlcStatus(SSDLCStatusEnum.failed)\\n                            .kafkaResponse(objectValue)\\n                            .updatedBy(\\\"kafka\\\")\\n                            .build();\\n\\n                }\\n                appSsdlcDetailDao.updateByPrimaryKeySelective(appSsdlcDetailDOOther);\\n\\n                // 更新appOfSprint\\n                AppOfSprintDO appOfSprintDO = sprintDAO.queryAppOfSprintByNameAndId(appSsdlcDetailDO.getSprintId(), appSsdlcDetailDO.getApp());\\n                if (SSDLCStatusEnum.scanning != appOfSprintDO.getSsdlcStatus()) { // 只有扫描中状态可切换成失败或成功\\n                    log.info(\\\"{} 回调无需更新appOfSprint状态{}\\\", appSsdlcDetailDO.getScanJobCode(), appOfSprintDO.getSsdlcStatus());\\n                } else {\\n                    if (!isSuccess) {//本次失败，app_of_sprint更新成失败\\n                        sprintDAO.updateSsdlcStatusKafka(appSsdlcDetailDO.getSprintId(), appSsdlcDetailDO.getApp(), SSDLCStatusEnum.failed.getCode());\\n                    } else {//本次成功，需判断是否更新app\\n                        //update\\n                        List\\u003cAppSsdlcDetailDO\\u003e details = appSsdlcDetailDao.selectBySprintIdAndAppNameAndSsdlcTime(appOfSprintDO.getSprintId(),\\n                                appSsdlcDetailDO.getApp(), appSsdlcDetailDO.getSsdlcTime());\\n                        boolean canUpdate = false;\\n                        Integer currentCriticalCount = 0;\\n                        Integer currentHighCount = 0;\\n                        for (AppSsdlcDetailDO detail : details) {\\n                            //非数据本身，且状态\\n                            if (!detail.getScanJobCode().equals(appSsdlcDetailDO.getScanJobCode())) {\\n                                canUpdate = detail.getSsdlcStatus() == SSDLCStatusEnum.success;\\n                            }\\n                            currentCriticalCount += detail.getCriticalCount() != null ? detail.getCriticalCount() : 0;\\n                            currentHighCount += detail.getHighCount() != null ? detail.getHighCount() : 0;\\n                        }\\n                        if (canUpdate) {\\n                            sprintDAO.updateSsdlcStatusKafka(appSsdlcDetailDO.getSprintId(), appSsdlcDetailDO.getApp(), SSDLCStatusEnum.success.getCode());\\n                            applicationDAO.updateLastSsdlcResult(appSsdlcDetailDO.getApp(), currentCriticalCount, currentHighCount, appSsdlcDetailDO.getSsdlcTime());\\n\\n\\n                            //发送快乐平安通知给版本创建人\\n                            SprintDO sprintDO = sprintDAO.querySprintById(appOfSprintDO.getSprintId());\\n                            String subject = \\\"SSDLC扫描结果通知\\\";\\n                            String sprintName = sprintDO.getSprintName();\\n                            String app = appOfSprintDO.getApp();\\n                            String sprintCreator = sprintDO.getSprintCreator();\\n                            if (StringUtils.isNotBlank(sprintCreator)) {\\n                                StringBuilder contentBuffer = new StringBuilder()\\n                                        .append(sprintName)\\n                                        .append(\\\"中的\\\")\\n                                        .append(app)\\n                                        .append(\\\"，已经完成SSDLC扫描，请及时登录Heracles查看扫描结果！\\\");\\n                                messageCenterService.publicAttendance(subject, contentBuffer.toString(), sprintCreator);\\n                            }\\n\\n                        }\\n                    }\\n                }\\n            }\\n        } catch (Exception e) {\\n            log.error(\\\"ssdlc解析kafka保存或更新数据失败---\\\", e);\\n        }\\n    }\\n}\"\r\n            },\r\n            {\r\n                \"Path\": \"src/main/java/com/poype/heracles/core/domain/service/MessageCenterService.java\",\r\n                \"Status\": \"M\",\r\n                \"Content\": \"package com.poype.heracles.core.domain.service;\\n\\n\\nimport com.poype.heracles.core.domain.model.sprint.Sprint;\\n\\nimport java.util.List;\\n\\npublic interface MessageCenterService {\\n\\n\\n    /**\\n     * 人员去重\\n     * @param subject 标题\\n     * @param content 内容\\n     * @param userList 人员\\n     */\\n    void publicAttendance(String subject, String content, List\\u003cString\\u003e userList);\\n\\n    /**\\n     * 发送通知\\n     * @param subject\\n     * @param content\\n     * @param toUserStr\\n     */\\n    void publicAttendance(String subject, String content, String toUserStr);\\n\\n    void publicAttendance(Sprint sprint);\\n}\"\r\n            },\r\n            {\r\n                \"Path\": \"src/main/java/com/poype/heracles/core/domain/service/SprintService.java\",\r\n                \"Status\": \"M\",\r\n                \"Content\": \"package com.poype.heracles.core.domain.service;\\n\\nimport com.poype.heracles.common.enums.ReleaseOrderCfg;\\nimport com.poype.heracles.common.enums.SprintClassify;\\nimport com.poype.heracles.core.domain.model.dto.AppOfSprintDto;\\nimport com.poype.heracles.core.domain.model.dto.ApprovePersonConf;\\nimport com.poype.heracles.core.domain.model.dto.SprintUedRecordDto;\\nimport com.poype.heracles.core.domain.model.eoa.ReleaseOrderList;\\nimport com.poype.heracles.core.domain.model.sprint.AppOfSprint;\\nimport com.poype.heracles.core.domain.model.sprint.Sprint;\\nimport com.poype.heracles.core.facade.request.SprintFeatureRequest;\\nimport com.poype.heracles.core.facade.result.*;\\nimport com.poype.heracles.core.repository.integration.model.ssdlc.SsdlcRequest;\\nimport reactor.util.function.Tuple2;\\n\\nimport java.util.List;\\n\\npublic interface SprintService {\\n\\n    /**\\n     * 根据版本Id查询版本信息\\n     * @param sprintId 版本Id\\n     * @return 版本模型对象\\n     */\\n    Sprint queryBySprintId(String sprintId);\\n\\n    /**\\n     * 创建一个新的版本\\n     * @param name 版本名称\\n     * @param description 版本描述\\n     * @param releaseDate 发版日期\\n     * @param sprintDtoList 版本应用列表\\n     * @param createUser 创建者\\n     * @param classifyStr 版本分类\\n     * @return 版本Id\\n     */\\n    String createNewSprint(String name, String description, String releaseDate,\\n                           List\\u003cAppOfSprintDto\\u003e sprintDtoList, String createUser,\\n                           int printType, String signId, int useRc, List\\u003cSprintClassify\\u003e sprintClassify);\\n\\n    /**\\n     * 为一个版本中的所有应用创建分支\\n     * @param sprintId 版本Id\\n     */\\n    void createCodeBranch(String sprintId);\\n\\n    /**某个指定的应用创建分支\\n     * 为\\n     * @param sprintId 版本id\\n     * @param appName 应用名称\\n     */\\n    void createSingleCodeBranch(String sprintId, String appName);\\n\\n    /**\\n     * 更新一个版本中的应用信息\\n     * @param sprint 版本模型\\n     * @param appOfSprintDtoList 新的应用列表\\n     */\\n    void updateAppListOfSprint(Sprint sprint, List\\u003cAppOfSprintDto\\u003e appOfSprintDtoList);\\n\\n    /**\\n     * 扭转版本中一个应用的状态\\n     * @param sprint 版本\\n     * @param app 应用名称\\n     * @param status 目标状态\\n     * @return\\n     */\\n    TransferAppStatusResult transferAppOfSprintStatus(Sprint sprint, String app, String status, String userName);\\n\\n    /**\\n     * 扭转整个版本的状态\\n     * @param sprintId 版本Id\\n     * @param status 目标状态\\n     */\\n    void transferWholeSprintStatus(String sprintId, String status);\\n\\n    /**\\n     * 版本失效\\n     * @param sprintId 版本Id\\n     */\\n    void updateSprintInvalid(String sprintId);\\n\\n    /**\\n     *删除版本\\n     *\\n     * @param sprintId\\n     */\\n    void deleteSprint(String sprintId, String user);\\n\\n    List\\u003cSprintUedRecordDto\\u003e querySprintUedRecord(String sprintId);\\n\\n    List\\u003cReleaseOrderList\\u003e querySimpleReleaseOrderList(String sprintId, ReleaseOrderCfg releaseOrderConf);\\n\\n    SubmitApplyView queryApplyInfo(String sprintId, String releaseApplyId);\\n\\n    /**\\n     * 获取默认配置\\n     * @param sprintId\\n     * @param sprintType 版本类型：1常规版本,2紧急版本\\n     * @param notFirst 非首次，NULL代表不详\\n     * @param isBusiness 版本分类是否为业务需求true 其他false\\n     * @return\\n     */\\n    List\\u003cApprovePersonConf\\u003e getApprovePersonDefault(String sprintId, int sprintType, Boolean notFirst, boolean isBusiness);\\n\\n    List\\u003cApprovePersonConf\\u003e queryApprovePersonConfFilter(String sprintId);\\n\\n    List\\u003cApprovePersonConf\\u003e queryApprovePersonConf(String sprintId);\\n\\n    /**\\n     * 判断sprintId发布申请是否为非首次\\n     * @param sprintId\\n     * @return 返回true为非首次，false为首次\\n     */\\n    Boolean isNotFirst(String sprintId);\\n\\n    void querySsdlcRecord(String springId, String appName, AppOfSprintView appOfSprintView);\\n\\n    /**\\n     * 请求ssdlc扫描\\n     * @param request\\n     */\\n    void startSsdlc(SsdlcRequest request);\\n\\n    /**\\n     * 接收ssdlc扫描请求并入队\\n     * @param request\\n     */\\n    void sendSsdlcMsg(SsdlcRequest request);\\n\\n    Tuple2\\u003cSprintView, List\\u003cSprintFeatureView\\u003e\\u003e querySprintAndFeature(String sprintId);\\n\\n    List\\u003cSprintFeatureView\\u003e queryFeatureForRemote(String releaseName);\\n\\n    void saveFeatureStory(SprintFeatureRequest request);\\n\\n    void featureRelationRelieves(String featureId, String sprintId);\\n\\n    Boolean featureCheckAccess(String sprintId);\\n\\n    int querySprintFeatureCount(String sprintId);\\n\\n    List\\u003cSprintFeatureView\\u003e wizardPlanBind(String sprintId, String wizardPlan);\\n\\n    void wizardPlanUnBind(String sprintId);\\n\\n    List\\u003cEntranceGuardDataView\\u003e queryEntranceGuardSimpleInfoOfApp(Sprint sprint, AppOfSprint appOfSprint);\\n}\"\r\n            },\r\n            {\r\n                \"Path\": \"src/main/java/com/poype/heracles/core/domain/service/deployCheck/AbstractCheckService.java\",\r\n                \"Status\": \"A\",\r\n                \"Content\": \"package com.poype.heracles.core.domain.service.deployCheck;\\n\\nimport com.poype.heracles.common.constant.MqConstant;\\nimport com.poype.heracles.common.enums.BusinessErrorCode;\\nimport com.poype.heracles.common.exception.BusinessException;\\nimport com.poype.heracles.core.domain.model.ReleaseItem;\\nimport com.poype.heracles.core.domain.model.ReleaseOrder;\\nimport com.poype.heracles.core.domain.model.enums.EnvironmentType;\\nimport com.rabbitmq.client.AMQP;\\nimport com.rabbitmq.client.Channel;\\nimport lombok.extern.slf4j.Slf4j;\\nimport org.apache.commons.lang.StringUtils;\\nimport org.springframework.amqp.rabbit.core.ChannelCallback;\\nimport org.springframework.amqp.rabbit.core.RabbitAdmin;\\nimport org.springframework.stereotype.Service;\\n\\nimport javax.annotation.Resource;\\nimport java.util.concurrent.CopyOnWriteArrayList;\\n\\n@Service\\n@Slf4j\\npublic abstract class AbstractCheckService implements CheckService {\\n\\n    public static CopyOnWriteArrayList waitAppSimpleInfoForSit;\\n\\n    public static CopyOnWriteArrayList waitAppSimpleInfoForProd;\\n\\n    static  {\\n        waitAppSimpleInfoForSit = new CopyOnWriteArrayList();\\n        waitAppSimpleInfoForProd = new CopyOnWriteArrayList();\\n    }\\n\\n\\n    @Resource\\n    private RabbitAdmin rabbitAdmin;\\n\\n\\n    @Override\\n    public String doService(ReleaseOrder releaseOrder, String dc, String dcEnv){\\n        try {\\n            this.commonDeployCheck(releaseOrder, dc, dcEnv);\\n            return null;\\n        }catch (Exception e){\\n            ReleaseItem releaseItem = releaseOrder.getReleaseItems().get(0);\\n            if (e instanceof RuntimeException \\u0026\\u0026 StringUtils.isNotBlank(e.getMessage())) {\\n                return releaseItem.getAppName()+ \\\":\\\" + e.getMessage();\\n            } else if (e instanceof BusinessException) {\\n                BusinessErrorCode businessError = ((BusinessException) e).getBusinessError();\\n                String description = businessError.getDescription();\\n                return releaseItem.getAppName() + \\\":\\\" + description;\\n            } else {\\n                return releaseItem.getAppName() + \\\":\\\" + this.getClass().getSimpleName() + \\\"检查失败:\\\" + e.getClass();\\n            }\\n        }\\n    }\\n\\n    public int getMessageCount(String queueName){\\n        return rabbitAdmin.getRabbitTemplate().execute(new ChannelCallback\\u003cAMQP.Queue.DeclareOk\\u003e() {\\n            @Override\\n            public AMQP.Queue.DeclareOk doInRabbit(Channel channel) throws Exception {\\n                return channel.queueDeclarePassive(queueName);\\n            }\\n        }).getMessageCount();\\n    }\\n\\n\\n    /**\\n     * 返回mq消息数量\\n     * 为0时清空list\\n     * @return\\n     */\\n    public int offSetListOrReturnCount(String queue,EnvironmentType type) {\\n        synchronized (AbstractCheckService.class) {\\n            int messageCount = getMessageCount(queue);\\n            if (messageCount == 0) {\\n                if (type == EnvironmentType.SIT || type == EnvironmentType.UAT) {\\n                    waitAppSimpleInfoForSit.clear();\\n                }\\n                if (type == EnvironmentType.RC || type == EnvironmentType.PROD) {\\n                    waitAppSimpleInfoForProd.clear();\\n                }\\n            }\\n            return messageCount;\\n        }\\n    }\\n\\n    public int offSetListOrReturnCount(EnvironmentType type) {\\n        if (type == EnvironmentType.SIT || type == EnvironmentType.UAT) {\\n            return offSetListOrReturnCount(MqConstant.DEPLOY_SIT_QUEUE_NAME,type);\\n        }\\n        if (type == EnvironmentType.RC || type == EnvironmentType.PROD) {\\n            return offSetListOrReturnCount(MqConstant.DEPLOY_PROD_QUEUE_NAME, type);\\n        }\\n        return 0;\\n    }\\n\\n    public int size(EnvironmentType type) {\\n        if (type == EnvironmentType.SIT || type == EnvironmentType.UAT) {\\n            return waitAppSimpleInfoForSit.size();\\n        }\\n        if (type == EnvironmentType.RC || type == EnvironmentType.PROD) {\\n            return waitAppSimpleInfoForProd.size();\\n        }\\n        return 0;\\n    }\\n\\n    //查询位置\\n    public int indexOf(EnvironmentType type, String appName) {\\n        if (type == EnvironmentType.SIT || type == EnvironmentType.UAT) {\\n            return waitAppSimpleInfoForSit.indexOf(appName) + 1;\\n        }\\n        if (type == EnvironmentType.RC || type == EnvironmentType.PROD) {\\n            return waitAppSimpleInfoForProd.indexOf(appName) + 1;\\n        }\\n        return 0;\\n    }\\n\\n    //添加\\n    public static void add(EnvironmentType type, String appName) {\\n        if (type == EnvironmentType.SIT || type == EnvironmentType.UAT) {\\n            waitAppSimpleInfoForSit.add(appName);\\n        }\\n        if (type == EnvironmentType.RC || type == EnvironmentType.PROD) {\\n            waitAppSimpleInfoForProd.add(appName);\\n        }\\n    }\\n\\n    //删除\\n    public static boolean remove(EnvironmentType type, String appName) {\\n        if (type == EnvironmentType.SIT || type == EnvironmentType.UAT) {\\n            return waitAppSimpleInfoForSit.remove(appName);\\n        }\\n        if (type == EnvironmentType.RC || type == EnvironmentType.PROD) {\\n            return waitAppSimpleInfoForProd.remove(appName);\\n        }\\n        return false;\\n    }\\n\\n}\"\r\n            },\r\n            {\r\n                \"Path\": \"src/main/java/com/poype/heracles/core/domain/service/deployCheck/CheckService.java\",\r\n                \"Status\": \"A\",\r\n                \"Content\": \"package com.poype.heracles.core.domain.service.deployCheck;\\n\\nimport com.poype.heracles.core.domain.model.ReleaseOrder;\\n\\npublic interface CheckService {\\n\\n\\n    /**\\n     * 以string形式返回报错结果\\n     * @param releaseOrder\\n     * @param dc\\n     * @param dcEnv\\n     * @return\\n     */\\n    String doService(ReleaseOrder releaseOrder, String dc, String dcEnv);\\n\\n    /**\\n     * 报错抛出异常\\n     * @param releaseOrder\\n     * @param dc\\n     * @param dcEnv\\n     */\\n    void commonDeployCheck(ReleaseOrder releaseOrder, String dc, String dcEnv);\\n\\n\\n}\"\r\n            },\r\n            {\r\n                \"Path\": \"src/main/java/com/poype/heracles/core/domain/service/deployCheck/SprintCheckAPPStatusImpl.java\",\r\n                \"Status\": \"A\",\r\n                \"Content\": \"package com.poype.heracles.core.domain.service.deployCheck;\\n\\nimport com.poype.heracles.common.enums.BusinessErrorCode;\\nimport com.poype.heracles.common.util.AssertUtil;\\nimport com.poype.heracles.core.domain.model.ReleaseItem;\\nimport com.poype.heracles.core.domain.model.ReleaseOrder;\\nimport com.poype.heracles.core.domain.model.enums.ReleaseItemStatus;\\nimport com.poype.heracles.core.domain.model.enums.SprintStatus;\\nimport com.poype.heracles.core.repository.dao.ReleaseDAO;\\nimport com.poype.heracles.core.repository.dao.SprintDAO;\\nimport com.poype.heracles.core.repository.dao.model.ReleaseItemDO;\\nimport com.poype.heracles.core.repository.dao.model.SprintDO;\\nimport lombok.extern.slf4j.Slf4j;\\nimport org.springframework.beans.factory.annotation.Autowired;\\nimport org.springframework.core.Ordered;\\nimport org.springframework.stereotype.Service;\\n\\nimport java.util.List;\\n\\nimport static com.poype.heracles.common.enums.BusinessErrorCode.ILLEGAL_RELEASE_ENV;\\n\\n@Service\\n@Slf4j\\npublic class SprintCheckAPPStatusImpl extends AbstractCheckService  implements Ordered {\\n\\n    @Autowired\\n    private SprintDAO sprintDAO;\\n\\n    @Autowired\\n    private ReleaseDAO releaseDAO;\\n\\n\\n    @Override\\n    public void commonDeployCheck(ReleaseOrder releaseOrder, String dc, String dcEnv) {\\n        String envName = releaseOrder.getEnvName();\\n        ReleaseItem releaseItem = releaseOrder.getReleaseItems().get(0);\\n        log.info(\\\"deploy check app status, params:itemId={}, envName={},dc={},dcEnv={}\\\", releaseItem.getItemId(), envName, dc, dcEnv);\\n        String sprintId = releaseOrder.getSprintId();\\n        if (envName.equals(\\\"RC\\\") || envName.equals(\\\"PROD\\\")) {\\n            if (sprintId != null) {\\n                SprintDO sprintDO = sprintDAO.querySprintById(sprintId);\\n                //创建发布单后如果回切版本状态，则不允许发布\\n                AssertUtil.isFalse(SprintStatus.UAT.getCode() == sprintDO.getStatus() || SprintStatus.SIT.getCode() == sprintDO.getStatus()\\n                                || SprintStatus.START.getCode() == sprintDO.getStatus() || SprintStatus.INIT.getCode() == sprintDO.getStatus()\\n                        , ILLEGAL_RELEASE_ENV, \\\"版本有应用为非测试完成状态，不允许发布!\\\");\\n            }\\n        }\\n        ReleaseItemStatus status = releaseItem.getStatus();\\n        log.info(\\\" ReleaseItem id: {}, status: {}\\\", releaseItem.getItemId(), status);\\n\\n        AssertUtil.isFalse(status == ReleaseItemStatus.PREPARE || status == ReleaseItemStatus.RANKING\\n                , BusinessErrorCode.APP_DEPLOYING, \\\"应用发布处理中,请稍等\\\");\\n\\n        List\\u003cReleaseItemDO\\u003e releaseItemDOS = releaseDAO.queryReleaseItemByAppNameAndStatus(releaseItem.getAppName(), ReleaseItemStatus.RANKING.getCode());\\n        AssertUtil.isTrue(releaseItemDOS == null || releaseItemDOS.size() == 0, BusinessErrorCode.APP_DEPLOYING, \\\"当前应用有分支正在发布排队!\\\");\\n    }\\n\\n    @Override\\n    public int getOrder() {\\n        return 20;\\n    }\\n}\"\r\n            },\r\n            {\r\n                \"Path\": \"src/main/java/com/poype/heracles/core/domain/service/deployCheck/SprintCheckBranchCompareImpl.java\",\r\n                \"Status\": \"A\",\r\n                \"Content\": \"package com.poype.heracles.core.domain.service.deployCheck;\\n\\nimport com.poype.heracles.auth.facade.config.CenterConfig;\\nimport com.poype.heracles.common.constant.Constants;\\nimport com.poype.heracles.common.enums.BusinessErrorCode;\\nimport com.poype.heracles.common.util.AssertUtil;\\nimport com.poype.heracles.core.domain.model.ReleaseItem;\\nimport com.poype.heracles.core.domain.model.ReleaseOrder;\\nimport com.poype.heracles.core.domain.model.application.Application;\\nimport com.poype.heracles.core.domain.model.application.config.BranchCompareConf;\\nimport com.poype.heracles.core.domain.model.enums.ApplicationType;\\nimport com.poype.heracles.core.repository.ApplicationRepository;\\nimport com.poype.heracles.core.repository.HeraclesGitRepository;\\nimport lombok.extern.slf4j.Slf4j;\\nimport org.apache.commons.lang.StringUtils;\\nimport org.springframework.beans.factory.annotation.Autowired;\\nimport org.springframework.core.Ordered;\\nimport org.springframework.stereotype.Service;\\n\\n/**\\n * 分支合并master检查\\n */\\n@Service\\n@Slf4j\\npublic class SprintCheckBranchCompareImpl extends AbstractCheckService  implements Ordered {\\n\\n    @Autowired\\n    private CenterConfig centerConfig;\\n\\n    @Autowired\\n    private ApplicationRepository applicationRepository;\\n\\n    @Autowired\\n    private HeraclesGitRepository heraclesGitRepository;\\n\\n\\n    @Override\\n    public void commonDeployCheck(ReleaseOrder releaseOrder, String dc, String dcEnv) {\\n        ReleaseItem releaseItem = releaseOrder.getReleaseItems().get(0);\\n        BranchCompareConf branchCompareConf = centerConfig.getObject(Constants.BRANCH_COMPARE, BranchCompareConf.class);\\n        if (branchCompareConf == null || StringUtils.isBlank(branchCompareConf.getDeploy()) || \\\"no\\\".equalsIgnoreCase(branchCompareConf.getDeploy())) {\\n            return;\\n        }\\n        Application application = applicationRepository.queryByAppName(releaseItem.getAppName());\\n        ApplicationType applicationType = application.getApplicationType();\\n        //过滤前端应用\\n        if (StringUtils.equalsIgnoreCase(application.getTeam(), \\\"front-end\\\") || ApplicationType.H5 == applicationType || ApplicationType.APOLLO_H5 == applicationType) {\\n            return;\\n        }\\n        Boolean compare = heraclesGitRepository.branchCompare(releaseItem.getAppName(), releaseItem.getCodeRepos(), \\\"master\\\", releaseItem.getCodeBranch(), false);\\n        AssertUtil.isTrue(compare, BusinessErrorCode.ILLEGAL_RELEASE_ENV, releaseItem.getAppName() + \\\"的\\\" + releaseItem.getCodeBranch() + \\\"分支不包含master最新代码;\\\");\\n    }\\n\\n    @Override\\n    public int getOrder() {\\n        return 40;\\n    }\\n\\n}\"\r\n            },\r\n            {\r\n                \"Path\": \"src/main/java/com/poype/heracles/core/domain/service/deployCheck/SprintCheckDeployIneffectiveApproveImpl.java\",\r\n                \"Status\": \"A\",\r\n                \"Content\": \"package com.poype.heracles.core.domain.service.deployCheck;\\n\\nimport com.poype.heracles.common.util.AssertUtil;\\nimport com.poype.heracles.core.domain.model.ReleaseItem;\\nimport com.poype.heracles.core.domain.model.ReleaseOrder;\\nimport com.poype.heracles.core.domain.model.enums.ReleaseItemStatus;\\nimport com.poype.heracles.core.domain.model.enums.ReleaseOrderStatus;\\nimport com.poype.heracles.core.repository.dao.ReleaseDAO;\\nimport com.poype.heracles.core.repository.dao.model.ReleaseItemDcDO;\\nimport lombok.extern.slf4j.Slf4j;\\nimport org.apache.commons.lang.StringUtils;\\nimport org.springframework.beans.factory.annotation.Autowired;\\nimport org.springframework.core.Ordered;\\nimport org.springframework.stereotype.Service;\\nimport org.springframework.util.CollectionUtils;\\n\\nimport java.util.Calendar;\\nimport java.util.Date;\\nimport java.util.List;\\n\\nimport static com.poype.heracles.common.enums.BusinessErrorCode.ILLEGAL_RELEASE_ENV;\\nimport static com.poype.heracles.common.enums.BusinessErrorCode.INEFFECTIVE_APPROVE;\\n\\n\\n/**\\n * 检查签报\\n */\\n@Service\\n@Slf4j\\npublic class SprintCheckDeployIneffectiveApproveImpl extends AbstractCheckService implements Ordered {\\n\\n    @Autowired\\n    private ReleaseDAO releaseDAO;\\n\\n    @Override\\n    public void commonDeployCheck(ReleaseOrder releaseOrder, String dc, String dcEnv) {\\n        String envName = releaseOrder.getEnvName();\\n        ReleaseItem releaseItem = releaseOrder.getReleaseItems().get(0);\\n        log.info(\\\"check deploy approve, params: itemId={},envName={},dc={},dcEnv={}\\\", releaseItem.getItemId(), envName, dc, dcEnv);\\n        if (envName.equals(\\\"RC\\\") || envName.equals(\\\"PROD\\\")) {\\n            AssertUtil.isTrue(ReleaseOrderStatus.INVALID != releaseOrder.getStatus(), ILLEGAL_RELEASE_ENV, \\\"该发布单已失效，不允许发布！\\\");\\n            if (releaseOrder.getSprintId() != null) {\\n                //如果有版本,但未关联签报只允许成功发布一次\\n                if (releaseOrder.getReleaseApplyId() == null) {\\n                    List\\u003cReleaseItem\\u003e releaseItems = releaseOrder.getReleaseItems();\\n                    //如果发布过\\n                    if (!CollectionUtils.isEmpty(releaseItems) \\u0026\\u0026 releaseItems.size() \\u003e 0 \\u0026\\u0026 StringUtils.isNotBlank(dc) \\u0026\\u0026 StringUtils.isNotBlank(dcEnv)) {\\n                        ReleaseItemDcDO releaseItemDcDO = releaseDAO.queryOneByItemIdAndEnvAndDc(releaseItem.getItemId(), dcEnv, dc);\\n                        if (releaseItemDcDO != null) {\\n                            AssertUtil.isTrue(ReleaseItemStatus.SUCCESS != ReleaseItemStatus.getByCode(releaseItemDcDO.getStatus()), INEFFECTIVE_APPROVE, \\\"无有效签报，不允许重复发布！\\\");\\n                        }\\n                    }\\n                } else {\\n                    String releaseApplyId = releaseOrder.getReleaseApplyId();\\n                    Date releaseEndTime = releaseOrder.getReleaseEndTime();\\n                    Date releaseExpTime = releaseOrder.getReleaseExpTime();\\n                    Date currentDate = Calendar.getInstance().getTime();\\n                    AssertUtil.isTrue(releaseApplyId != null \\u0026\\u0026 (currentDate.compareTo(releaseExpTime) \\u003e 0 \\u0026\\u0026 currentDate.compareTo(releaseEndTime) \\u003c 0), INEFFECTIVE_APPROVE, \\\"签报通过不在预设时间内!\\\");\\n                }\\n            } else {\\n                //一次性发布单,重复发布检查\\n                if (StringUtils.isNotBlank(dc) \\u0026\\u0026 StringUtils.isNotBlank(dcEnv)) {\\n                    ReleaseItemDcDO releaseItemDcDO = releaseDAO.queryOneByItemIdAndEnvAndDc(releaseItem.getItemId(), dcEnv, dc);\\n                    if (releaseItemDcDO != null) {\\n                        AssertUtil.isTrue(ReleaseItemStatus.SUCCESS != ReleaseItemStatus.getByCode(releaseItemDcDO.getStatus()), INEFFECTIVE_APPROVE, \\\"无有效签报，不允许重复发布！\\\");\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    @Override\\n    public int getOrder() {\\n        return 30;\\n    }\\n}\"\r\n            },\r\n            {\r\n                \"Path\": \"src/main/java/com/poype/heracles/core/domain/service/deployCheck/SprintDeployCheckUserImpl.java\",\r\n                \"Status\": \"A\",\r\n                \"Content\": \"package com.poype.heracles.core.domain.service.deployCheck;\\n\\nimport com.poype.heracles.auth.facade.config.CenterConfig;\\nimport com.poype.heracles.common.constant.Constants;\\nimport com.poype.heracles.common.util.AssertUtil;\\nimport com.poype.heracles.common.util.ThreadLocalHolder;\\nimport com.poype.heracles.core.domain.model.Environment;\\nimport com.poype.heracles.core.domain.model.ReleaseOrder;\\nimport com.poype.heracles.core.domain.model.enums.EnvironmentType;\\nimport com.poype.heracles.core.repository.EnvironmentRepository;\\nimport com.poype.heracles.core.repository.SprintRepository;\\nimport com.poype.heracles.core.repository.integration.ReleaseClient;\\nimport lombok.extern.slf4j.Slf4j;\\nimport org.apache.commons.lang.StringUtils;\\nimport org.springframework.beans.factory.annotation.Autowired;\\nimport org.springframework.core.Ordered;\\nimport org.springframework.stereotype.Service;\\n\\nimport java.util.ArrayList;\\nimport java.util.List;\\n\\nimport static com.poype.heracles.common.enums.BusinessErrorCode.PARAM_ILLEGAL;\\nimport static com.poype.heracles.common.enums.BusinessErrorCode.SYSTEM_ERROR;\\n\\n/**\\n * 概要信息:\\n * 版本发布人员检查\\n *\\n * @author SunBo007\\n * @version 1.0\\n * @date 2022-11-17 11:04\\n */\\n@Service\\n@Slf4j\\npublic class SprintDeployCheckUserImpl extends AbstractCheckService implements Ordered {\\n\\n    @Autowired\\n    private ReleaseClient releaseClient;\\n\\n    @Autowired\\n    private SprintRepository sprintRepository;\\n\\n    @Autowired\\n    private EnvironmentRepository environmentRepository;\\n\\n    @Autowired\\n    private CenterConfig centerConfig;\\n\\n    //设置优先级,越小级别越高,跨度为10\\n    @Override\\n    public int getOrder() {\\n        return 10;\\n    }\\n\\n    @Override\\n    public void commonDeployCheck(ReleaseOrder releaseOrder, String dc, String dcEnv) {\\n        String userName = ThreadLocalHolder.getUserName();\\n        String envName = releaseOrder.getEnvName();\\n        List\\u003cString\\u003e releaseOperators = releaseClient.getReleaseOperator();\\n        boolean isIt = StringUtils.containsIgnoreCase(releaseOperators.toString(), userName);\\n        log.info(\\\"deploy check user: {}, isIt: {}\\\", userName, isIt);\\n        Environment environment = environmentRepository.queryByEnvName(releaseOrder.getEnvName());\\n\\n        List\\u003cString\\u003e deployEnvSwitch = centerConfig.getObject(Constants.DEPLOY_ENV_SWITCH, ArrayList.class);\\n        if (!isIt \\u0026\\u0026 deployEnvSwitch != null \\u0026\\u0026 deployEnvSwitch.size() \\u003e 0) {\\n            //非运维受发布管控\\n            EnvironmentType envType = environment.getEnvType();\\n            Boolean envSwitch = deployEnvSwitch.stream().filter(item -\\u003e StringUtils.endsWithIgnoreCase(item, envType.getName())).count() == 0;\\n            AssertUtil.isTrue(envSwitch, SYSTEM_ERROR, \\\"当前时段只有运维人员可以发布，请联系对应运维处理！\\\");\\n        }\\n\\n        if (envName.equals(\\\"RC\\\") || envName.equals(\\\"PROD\\\")) {\\n            AssertUtil.isTrue(isIt\\n                            || sprintRepository.hasJoinDevSprint(releaseOrder.getSprintId(), userName),\\n                    PARAM_ILLEGAL, \\\"目前只有运维和版本开发才能创建生产\\\");\\n        }\\n    }\\n}\"\r\n            },\r\n            {\r\n                \"Path\": \"src/main/java/com/poype/heracles/core/domain/service/impl/EventSenderServiceImpl.java\",\r\n                \"Status\": \"A\",\r\n                \"Content\": \"package com.poype.heracles.core.domain.service.impl;\\n\\nimport com.alibaba.fastjson.JSON;\\nimport com.poype.heracles.auth.facade.config.mq.SsdlcReqMsg;\\nimport com.poype.heracles.common.constant.MqConstant;\\nimport com.poype.heracles.core.domain.model.Environment;\\nimport com.poype.heracles.core.domain.model.ReleaseOrder;\\nimport com.poype.heracles.core.domain.model.enums.EnvironmentType;\\nimport com.poype.heracles.core.domain.service.EventSenderService;\\nimport com.poype.heracles.core.facade.request.deploy.DeployReq;\\nimport com.poype.heracles.core.repository.EnvironmentRepository;\\nimport com.poype.heracles.core.repository.ReleaseRepository;\\nimport lombok.extern.slf4j.Slf4j;\\nimport org.springframework.amqp.AmqpException;\\nimport org.springframework.amqp.core.AmqpTemplate;\\nimport org.springframework.amqp.core.DirectExchange;\\nimport org.springframework.beans.factory.annotation.Autowired;\\nimport org.springframework.stereotype.Service;\\n\\nimport javax.annotation.Resource;\\n\\n@Service\\n@Slf4j\\npublic class EventSenderServiceImpl implements EventSenderService {\\n\\n    @Autowired\\n    AmqpTemplate amqpTemplate;\\n\\n    @Resource\\n    private DirectExchange deploySitEx;\\n\\n    @Resource\\n    private DirectExchange deployProdEx;\\n\\n    @Autowired\\n    private EnvironmentRepository environmentRepository;\\n\\n    @Autowired\\n    private ReleaseRepository releaseRepository;\\n\\n\\n    @Override\\n    public void sendHeraclesDeployMessage(ReleaseOrder releaseOrder, DeployReq deployReq) {\\n        Environment environment = environmentRepository.queryByEnvName(releaseOrder.getEnvName());\\n        String queue, ex;\\n        EnvironmentType envType = environment.getEnvType();\\n        if (envType == EnvironmentType.SIT || envType == EnvironmentType.UAT) {\\n            queue = MqConstant.DEPLOY_SIT_QUEUE_NAME;\\n            ex = deploySitEx.getName();\\n        } else {\\n            queue = MqConstant.DEPLOY_PROD_QUEUE_NAME;\\n            ex = deployProdEx.getName();\\n        }\\n        String content = JSON.toJSONString(deployReq);\\n        log.info(\\\"sendHeraclesDeployMessage itemId: {}, Queue: {} - {}\\\", deployReq.getItemId(), queue, content);\\n        amqpTemplate.convertAndSend(ex, queue, content.trim());\\n    }\\n\\n\\n    @Override\\n    public void sendSSDLCScanMessage(SsdlcReqMsg reqMsg) {\\n        String content = JSON.toJSONString(reqMsg);\\n        log.info(\\\"sendSSDLCScanMessage message,app: {} - content: {}\\\", reqMsg.getModuleName(), content);\\n        try {\\n            amqpTemplate.convertAndSend(MqConstant.SSDLC_DELAY_QUEUE_NAME, content.trim());\\n        } catch (AmqpException e) {\\n            log.error(\\\"sendSSDLCScanMessage fail!\\\");\\n        }\\n        log.info(\\\"sendSSDLCScanMessage success!\\\");\\n    }\\n\\n    @Override\\n    public void sendMsgAndConfirmCallback(ReleaseOrder releaseOrder, DeployReq deployReq) {\\n        try {\\n            sendHeraclesDeployMessage(releaseOrder, deployReq);\\n            releaseRepository.changeItemRanking(releaseOrder);\\n            log.info(\\\"itemId: {},sendHeraclesDeployMessage success!\\\", deployReq.getItemId());\\n        } catch (Exception e) {\\n            releaseRepository.changeItemFailed(releaseOrder);\\n            log.error(\\\"send deploy msg error,\\\", e);\\n        }\\n    }\\n}\"\r\n            },\r\n            {\r\n                \"Path\": \"src/main/java/com/poype/heracles/core/domain/service/impl/MessageCenterServiceImpl.java\",\r\n                \"Status\": \"M\",\r\n                \"Content\": \"package com.poype.heracles.core.domain.service.impl;\\n\\n\\nimport com.alibaba.fastjson.JSONArray;\\nimport com.google.common.base.Joiner;\\nimport com.poype.heracles.auth.facade.config.CenterConfig;\\nimport com.poype.heracles.common.constant.Constants;\\nimport com.poype.heracles.common.enums.BusinessErrorCode;\\nimport com.poype.heracles.common.enums.PrimaryLabelEnum;\\nimport com.poype.heracles.common.util.AssertUtil;\\nimport com.poype.heracles.common.util.DateUtils;\\nimport com.poype.heracles.core.domain.model.AttendanceRequest;\\nimport com.poype.heracles.core.domain.model.application.Application;\\nimport com.poype.heracles.core.domain.model.enums.SprintStatus;\\nimport com.poype.heracles.core.domain.model.sprint.AppOfSprint;\\nimport com.poype.heracles.core.domain.model.sprint.Sprint;\\nimport com.poype.heracles.core.domain.service.MessageCenterService;\\nimport com.poype.heracles.core.repository.ApplicationRepository;\\nimport com.poype.heracles.core.repository.dao.EoaApprovePersonDAO;\\nimport com.poype.heracles.core.repository.dao.ReleaseDAO;\\nimport com.poype.heracles.core.repository.dao.model.EoaApprovePersonDO;\\nimport com.poype.heracles.core.repository.dao.model.ReleaseOrderDO;\\nimport com.poype.heracles.core.repository.feign.MessageCenterFeign;\\nimport lombok.extern.slf4j.Slf4j;\\nimport org.apache.commons.lang.StringUtils;\\nimport org.springframework.beans.factory.annotation.Value;\\nimport org.springframework.stereotype.Service;\\n\\nimport javax.annotation.Resource;\\nimport java.util.*;\\nimport java.util.stream.Collectors;\\n\\n\\n@Service\\n@Slf4j\\npublic class MessageCenterServiceImpl implements MessageCenterService {\\n\\n    @Resource\\n    private MessageCenterFeign messageCenterFeign;\\n\\n    @Resource\\n    private CenterConfig centerConfig;\\n\\n    @Resource\\n    private ApplicationRepository applicationRepository;\\n\\n    @Resource\\n    private EoaApprovePersonDAO eoaApprovePersonDAO;\\n\\n    @Resource\\n    private ReleaseDAO releaseDAO;\\n\\n    @Value(\\\"${spring.application.name                }\\\")\\n    private String applicationName;\\n\\n\\n    @Override\\n    public void publicAttendance(String subject, String content, String toUserStr) {\\n        if (StringUtils.isBlank(content)) {\\n            log.warn(\\\"publicAttendance content is blank\\\");\\n            return;\\n        }\\n        if (StringUtils.isBlank(toUserStr)) {\\n            log.warn(\\\"publicAttendance userStr is blank\\\");\\n            return;\\n        }\\n        log.info(\\\"publicAttendance subject: {} - toUser: {} - content: {}\\\", subject, toUserStr, content);\\n        AttendanceRequest request = new AttendanceRequest();\\n        request.setServiceId(applicationName);\\n        request.setToUser(toUserStr);\\n        request.setContent(content);\\n        request.setSource(applicationName);\\n        request.setSubject(subject);\\n\\n        String response = messageCenterFeign.publicAttendance(request);\\n        log.info(\\\"publicAttendance response: {}\\\", response);\\n    }\\n\\n    @Override\\n    public void publicAttendance(Sprint sprint) {\\n        String sprintName = sprint.getSprintName();\\n        String subject = \\\"Heracles版本发布通知\\\";\\n        List\\u003cAppOfSprint\\u003e appOfSprintList = sprint.getApplications();\\n        //所有的应用\\n        List\\u003cString\\u003e appList = appOfSprintList.stream().map(AppOfSprint::getApp).distinct().collect(Collectors.toList());\\n        //应用对应所有的团队\\n        List\\u003cString\\u003e teams = appList.stream().map(app -\\u003e applicationRepository.queryByAppName(app)).map(Application::getTeam).distinct().collect(Collectors.toList());\\n        List\\u003cString\\u003e userList = new ArrayList\\u003c\\u003e();\\n        //团队负责人(暂时维护到配置中心)\\n        HashMap\\u003cString, String\\u003e msgCenterConf = centerConfig.getHashMapDefault(Constants.HERACLES_MSG_CENTER_CONFIG, null);\\n        if (msgCenterConf != null \\u0026\\u0026 msgCenterConf.size() \\u003e 0) {\\n            List\\u003cString\\u003e confUser = appList.stream().map(app -\\u003e applicationRepository.queryByAppName(app)).map(Application::getTeam).\\n                    filter(StringUtils::isNotBlank).distinct().map(team -\\u003e msgCenterConf.get(team)).distinct().filter(StringUtils::isNotBlank)\\n                    .collect(Collectors.toList());\\n            if (confUser.size() \\u003e 0) {\\n                userList.addAll(confUser);\\n            }\\n        }\\n        //版本参与人员\\n        for (AppOfSprint appOfSprint : appOfSprintList) {\\n            List\\u003cString\\u003e devList = appOfSprint.getDevList();\\n            if (devList != null \\u0026\\u0026 devList.size() \\u003e 0) {\\n                userList.addAll(devList);\\n            }\\n            List\\u003cString\\u003e qaList = appOfSprint.getQaList();\\n            if (qaList != null \\u0026\\u0026 qaList.size() \\u003e 0) {\\n                userList.addAll(qaList);\\n            }\\n            List\\u003cString\\u003e uedList = appOfSprint.getUedList();\\n            if (uedList != null \\u0026\\u0026 uedList.size() \\u003e 0) {\\n                userList.addAll(uedList);\\n            }\\n        }\\n        //项目负责人\\n        List\\u003cEoaApprovePersonDO\\u003e teamPersonList = eoaApprovePersonDAO.selectByLabel(PrimaryLabelEnum.team);\\n        teamPersonList.stream().filter(EoaApprovePersonDO::getPersonStatus).forEach(eoaApprovePersonDO -\\u003e {\\n            List\\u003cString\\u003e teamsNew = JSONArray.parseArray(eoaApprovePersonDO.getSecondaryLabel(), String.class);\\n            if (teamsNew.stream().anyMatch(teams::contains)) {\\n                userList.add(StringUtils.substringAfterLast(eoaApprovePersonDO.getApproveUm(), \\\"PAICDOM\\\\\\\\\\\\\\\\\\\"));\\n            }\\n        });\\n\\n        //科技负责人\\n        List\\u003cEoaApprovePersonDO\\u003e ctoPersonList = eoaApprovePersonDAO.selectByLabel(PrimaryLabelEnum.cto);\\n        //add userList\\n        ctoPersonList.stream().map(eoaApprovePersonDO -\\u003e StringUtils.substringAfterLast(eoaApprovePersonDO.getApproveUm(), \\\"PAICDOM\\\\\\\\\\\\\\\\\\\")).forEach(userList::add);\\n\\n        List\\u003cReleaseOrderDO\\u003e releaseOrderDOList = releaseDAO.queryAllReleaseOrderForProdBySprintIdAndEnv(sprint.getSprintId(), SprintStatus.PROD.getName());\\n\\n        AssertUtil.isTrue(releaseOrderDOList != null \\u0026\\u0026 releaseOrderDOList.size() \\u003e 0, BusinessErrorCode.RELEASE_ORDER_EXIST, \\\"无生产发布记录！\\\");\\n\\n        ReleaseOrderDO firstProdReleaseOrder = releaseOrderDOList.get(releaseOrderDOList.size() - 1);\\n        // 样例：产品模块20220922版本与2022-09-08 20:10开始部署，并于2022-09-08 22:30生产验证通过！发布应用清单如下：aflm-common-auth、fls-aflm-authorization-management、middle-stage-organization-web、fls-aflm-structure。\\n        StringBuilder content = new StringBuilder();\\n        //首次部署时间，首个生产发布单的创建时间\\n        content.append(sprintName + \\\"于\\\" + DateUtils.getTimeV2(firstProdReleaseOrder.getCreateTime()) + \\\"开始部署，并于\\\" + DateUtils.getCurTimeV2() + \\\"生产验证通过。发布应用清单如下：\\\");\\n        content.append(Joiner.on('、').skipNulls().join(appList) + \\\"。\\\");\\n        publicAttendance(subject, content.toString(), userList);\\n    }\\n\\n\\n    @Override\\n    public void publicAttendance(String subject, String content, List\\u003cString\\u003e userS) {\\n        List distinctUserList = userS.stream().distinct().collect(Collectors.toList());\\n        String userStr = Joiner.on(',').skipNulls().join(distinctUserList);\\n        publicAttendance(subject, content, userStr);\\n    }\\n}\"\r\n            },\r\n            {\r\n                \"Path\": \"src/main/java/com/poype/heracles/core/domain/service/impl/ReleaseServiceImpl.java\",\r\n                \"Status\": \"M\",\r\n                \"Content\": \"package com.poype.heracles.core.domain.service.impl;\\n\\nimport com.alibaba.fastjson.JSON;\\nimport com.poype.heracles.common.enums.BusinessErrorCode;\\nimport com.poype.heracles.common.enums.RegionStatusEnum;\\nimport com.poype.heracles.common.enums.ReleaseApplyStatus;\\nimport com.poype.heracles.common.enums.SprintOwner;\\nimport com.poype.heracles.common.util.AssertUtil;\\nimport com.poype.heracles.common.util.DateUtils;\\nimport com.poype.heracles.common.util.ThreadLocalHolder;\\nimport com.poype.heracles.core.domain.model.*;\\nimport com.poype.heracles.core.domain.model.application.Application;\\nimport com.poype.heracles.core.domain.model.dto.ReleaseItemDto;\\nimport com.poype.heracles.core.domain.model.dto.SimpleSprintDto;\\nimport com.poype.heracles.core.domain.model.enums.*;\\nimport com.poype.heracles.core.domain.model.ioc.IocApplyDeploy;\\nimport com.poype.heracles.core.domain.model.ioc.IocDeployResult;\\nimport com.poype.heracles.core.domain.model.ioc.IocDeployResultReq;\\nimport com.poype.heracles.core.domain.model.sprint.AppOfSprint;\\nimport com.poype.heracles.core.domain.model.sprint.Sprint;\\nimport com.poype.heracles.core.domain.service.ReleaseService;\\nimport com.poype.heracles.core.domain.service.deployCheck.SprintDeployCheckUserImpl;\\nimport com.poype.heracles.core.facade.request.JenkinsDeployCallBack;\\nimport com.poype.heracles.core.facade.result.RegionReleaseResult;\\nimport com.poype.heracles.core.facade.result.SprintRegionPageView;\\nimport com.poype.heracles.core.repository.*;\\nimport com.poype.heracles.core.repository.dao.*;\\nimport com.poype.heracles.core.repository.dao.model.*;\\nimport com.poype.heracles.core.repository.integration.ReleaseClient;\\nimport lombok.extern.slf4j.Slf4j;\\nimport org.apache.commons.lang.StringUtils;\\nimport org.springframework.beans.BeanUtils;\\nimport org.springframework.beans.factory.annotation.Autowired;\\nimport org.springframework.stereotype.Service;\\nimport org.springframework.transaction.annotation.Propagation;\\nimport org.springframework.transaction.annotation.Transactional;\\n\\nimport javax.annotation.Resource;\\nimport java.util.*;\\nimport java.util.stream.Collectors;\\n\\n\\n@Service(\\\"releaseService\\\")\\n@Slf4j\\npublic class ReleaseServiceImpl implements ReleaseService {\\n\\n    @Resource\\n    private ReleaseRepository releaseRepository;\\n\\n    @Resource\\n    private ApplicationRepository applicationRepository;\\n\\n    @Resource\\n    private ReleaseClient releaseItemClient;\\n\\n    @Resource\\n    private SprintRepository sprintRepository;\\n    \\n    @Resource\\n    private ReleaseApplyDAO releaseApplyDAO;\\n\\n    @Resource\\n    private SprintDAO sprintDAO;\\n\\n    @Resource\\n    private IocRepository iocRepository;\\n\\n    @Resource\\n    private ReleaseDAO releaseDAO;\\n\\n    @Resource\\n    private ApplicationDAO applicationDAO;\\n\\n    @Resource\\n    private SprintRegionDao sprintRegionDao;\\n\\n    @Resource\\n    private RegionRecoveryDAO regionRecoveryDAO;\\n\\n    @Resource\\n    private SprintDeployCheckUserImpl checkServiceImpl;\\n\\n    @Autowired\\n    private EnvironmentRepository environmentRepository;\\n\\n\\n    @Override\\n    public String createReleaseOrderForSprint(Sprint sprint, String app, String operator) {\\n        AppOfSprint appOfSprint = sprint.findAppByName(app);\\n        AssertUtil.notNull(appOfSprint, BusinessErrorCode.PARAM_ILLEGAL);\\n\\n        // 根据sprint状态和其中app的状态选择发布的环境\\n        String envName = \\\"\\\";\\n        if (appOfSprint.getStatus().getCode() \\u003c= AppOfSprintStatus.SIT.getCode()) {\\n            // 在进入UAT之前，如果发布都是发在对应的Test环境\\n            envName = sprint.getSitEnvName();\\n        } else if (appOfSprint.getStatus() == AppOfSprintStatus.UAT) {\\n            envName = AppOfSprintStatus.UAT.getName();\\n        } else {\\n            // 应用的测试已完成，根据sprint的状态判断发布环境，测试sprint的状态一定是已完成测试的\\n            AssertUtil.isTrue(sprint.getStatus().getCode() \\u003e= SprintStatus.FINISH_TEST.getCode(),\\n                    BusinessErrorCode.ILLEGAL_SPRINT_STATUS);\\n            if (sprint.getStatus().getCode() \\u003c= SprintStatus.RC.getCode()) {\\n                envName = SprintStatus.RC.getName();\\n            } else if (sprint.getStatus().getCode() \\u003c SprintStatus.FINISH_PROD_VERIFY.getCode()) {\\n                envName = SprintStatus.PROD.getName();\\n            }\\n        }\\n        AssertUtil.notBlank(envName, BusinessErrorCode.ILLEGAL_ENVIRONMENT);\\n\\n        String releaseName = sprint.getSprintName() + \\\"-\\\" + app;\\n        String description = sprint.getSprintName() + \\\"-\\\" + app + \\\"-\\\" + envName + \\\"-release\\\";\\n\\n        ReleaseOrder releaseOrder = new ReleaseOrder(releaseName, description, envName, operator, sprint.getSprintId());\\n\\n        Application application = applicationRepository.queryByAppName(appOfSprint.getApp());\\n        releaseOrder.addAppToRelease(appOfSprint, application.getCodeRepository(), application.getTeam(), application.getProject(), application.getBelongSystem());\\n\\n        releaseRepository.saveReleaseOrder(releaseOrder);\\n        //更新版本中的最新发布时间\\n        sprintRepository.updateSprintReleaseTime(sprint.getSprintId());\\n        return releaseOrder.getOrderId();\\n    }\\n\\n    @Override\\n    public String createReleaseOrderForSprint(Sprint sprint, String operator, Boolean relationReleaseApply, ReleaseApply releaseApply) {\\n        String envName = \\\"\\\";\\n        if (sprint.getStatus().getCode() \\u003c SprintStatus.FINISH_RC_TEST.getCode()\\n                \\u0026\\u0026 sprint.getUseRc() == UseRcEnum.USE) {\\n            // 在完成RC验证之前，只能发布RC环境\\n            envName = \\\"RC\\\";\\n            sprint.setStatus(SprintStatus.RC);\\n        } else if (sprint.getStatus().getCode() \\u003c SprintStatus.FINISH_PROD_VERIFY.getCode()) {\\n            envName = \\\"PROD\\\";\\n            sprint.setStatus(SprintStatus.PROD);\\n        }\\n        AssertUtil.notBlank(envName, BusinessErrorCode.PARAM_ILLEGAL);\\n\\n        String releaseName = sprint.getSprintName() + \\\"-\\\" + envName;\\n        String description = sprint.getSprintName() + \\\"-\\\" + envName + \\\"-whole-release\\\";\\n        log.info(\\\"releaseName,description -{} -{}\\\", releaseName, description);\\n\\n        ReleaseOrder releaseOrder = new ReleaseOrder(releaseName, description, envName, operator, sprint.getSprintId());\\n\\n        List\\u003cSprintDO\\u003e sprintDOList = new ArrayList\\u003c\\u003e();\\n\\n        for (AppOfSprint appOfSprint : sprint.getApplications()) {\\n            Application application = applicationRepository.queryByAppName(appOfSprint.getApp());\\n            List\\u003cSprintDO\\u003e sprintDOS = sprintDAO.queryAllProdSprintByAppName(appOfSprint.getApp(), sprint.getSprintId());\\n            sprintDOList.addAll(sprintDOS);\\n            releaseOrder.addAppToRelease(appOfSprint, application.getCodeRepository(), application.getTeam(), application.getProject(), application.getBelongSystem());\\n        }\\n        AssertUtil.isTrue(sprintDOList.size() == 0,\\n                BusinessErrorCode.ILLEGAL_RELEASE_ENV, \\\"该版本下有应用在其他版本【\\\" + sprintDOList.stream().findFirst().orElse(new SprintDO()).getSprintName() + \\\"】中未通过验收或版本未关闭，请验收并关闭版本之后再操作此版本发布！\\\");\\n        releaseRepository.saveReleaseOrder(releaseOrder);\\n        // 更新sprint状态\\n        sprintRepository.updateSprintStatus(sprint.getSprintId(), sprint.getStatus());\\n        if(sprint.getReleaseApplyStatus() == ReleaseApplyStatus.pass) {//如果是通过状态则更新成失效状态\\n            sprintRepository.updateReleaseApplyStatus(sprint.getSprintId(), ReleaseApplyStatus.expired);\\n            //更新releaseApply状态\\n        \\treleaseApply.setReleaseApplyStatus(ReleaseApplyStatus.expired);\\n        \\treleaseApply.setUpdateTime(new Date());\\n        \\treleaseApply.setUpdateUser(operator);\\n        \\treleaseApplyDAO.updateByPrimaryKeySelective(releaseApply);\\n        }\\n        //更新版本中的最新发布时间\\n        sprintRepository.updateSprintReleaseTime(sprint.getSprintId());\\n        if (relationReleaseApply) {\\n            String releaseApplyId = releaseApply.getId();\\n            Date releaseExpTime = releaseApply.getReleaseExpTime();//期望时间始\\n            Date releaseEndTime = releaseApply.getReleaseEndTime();//期望时间止\\n            // update release_order\\n            releaseRepository.updateReleaseOrder(releaseOrder.getOrderId(), releaseApplyId, releaseExpTime, releaseEndTime);\\n        }\\n        log.info(\\\"更改版本状态；保存发布单；更新最新时间\\\");\\n        return releaseOrder.getOrderId();\\n    }\\n\\n    @Override\\n    public String createReleaseOrderAtSpecEnv(String releaseName, String envName, String description,\\n                                              String operator, List\\u003cReleaseItemDto\\u003e releaseItemDtoList) {\\n        ReleaseOrder releaseOrder = new ReleaseOrder(releaseName, description, envName, operator);\\n        for (ReleaseItemDto itemDto : releaseItemDtoList) {\\n            Application application = applicationRepository.queryByAppName(itemDto.getAppName());\\n            releaseOrder.addAppToRelease(application.getApplicationName(), itemDto.getBranchName(),\\n                    application.getCodeRepository(), application.getTeam(), application.getProject(), application.getBelongSystem());\\n        }\\n        log.info(\\\"获取发布单releaseOrder：{}\\\", releaseOrder);\\n        releaseRepository.saveReleaseOrder(releaseOrder);\\n        return releaseOrder.getOrderId();\\n    }\\n\\n    @Override\\n    public String sprintCreateReleaseOrderAtSpecEnv(Sprint sprint, String envName, List\\u003cReleaseItemDto\\u003e releaseItemList, String operator, String sprintId) {\\n\\n        if (AppOfSprintStatus.getByName(envName) == AppOfSprintStatus.SIT) {\\n            // 在进入UAT之前，如果发布都是发在对应的Test环境\\n            envName = sprint.getSitEnvName();\\n        } else if (AppOfSprintStatus.getByName(envName) == AppOfSprintStatus.UAT) {\\n            envName = AppOfSprintStatus.UAT.getName();\\n        }\\n\\n        String releaseName = sprint.getSprintName() + \\\"-\\\" + envName;\\n        String description = sprint.getSprintName() + \\\"-\\\" + envName + \\\"-batch-release\\\";\\n        log.info(\\\"releaseName,description -{} -{}\\\", releaseName, description);\\n        ReleaseOrder releaseOrder = new ReleaseOrder(releaseName, description, envName, operator, sprint.getSprintId());\\n\\n        for (ReleaseItemDto itemDto : releaseItemList) {\\n            Application application = applicationRepository.queryByAppName(itemDto.getAppName());\\n            log.info(\\\"添加应用到发布单\\\");\\n            releaseOrder.addAppToRelease(application.getApplicationName(), itemDto.getBranchName(),\\n                    application.getCodeRepository(), application.getTeam(), application.getProject(), application.getBelongSystem());\\n        }\\n\\n        releaseRepository.saveReleaseOrder(releaseOrder);\\n        //更新版本中的最新发布时间\\n        sprintRepository.updateSprintReleaseTime(sprint.getSprintId());\\n        return releaseOrder.getOrderId();\\n    }\\n\\n    @Override\\n    public ReleaseOrder queryReleaseOrder(String releaseOrderId) {\\n        ReleaseOrder releaseOrder = releaseRepository.queryByOrderId(releaseOrderId);\\n        if (releaseOrder.getStatus() == ReleaseOrderStatus.PROCESSING) {\\n            List\\u003cReleaseItem\\u003e releaseItems = releaseOrder.getReleaseItems();\\n            log.info(\\\"releaseItems {}\\\", releaseItems);\\n            boolean changeFlag = false;\\n            for (ReleaseItem releaseItem : releaseItems) {\\n                if (releaseItem.getStatus() == ReleaseItemStatus.PROCESSING) {\\n                    // 远端查询最新状态\\n                    ReleaseItemStatus status = releaseItemClient.queryStatus(releaseItem);\\n\\n                    if (status == ReleaseItemStatus.SUCCESS || status == ReleaseItemStatus.FAIL) {\\n                        releaseOrder.updateItemStatus(releaseItem.getItemId(), status);\\n                        changeFlag = true;\\n                    }\\n                } else {\\n                    releaseOrder.updateItemStatus(releaseItem.getItemId(), releaseItem.getStatus());\\n                    changeFlag = true;\\n                }\\n            }\\n            if (changeFlag) {\\n                releaseRepository.updateReleaseOrderStatus(releaseOrder);\\n            }\\n        }\\n        return releaseOrder;\\n    }\\n\\n    @Override\\n    public List\\u003cString\\u003e queryReleaseyItemList(String appName) {\\n        Set\\u003cString\\u003e strings = releaseRepository.queryReleaseItemByAppName(appName);\\n        return strings.stream().collect(Collectors.toList());\\n    }\\n\\n    @Override\\n    public ReleaseOrder queryDeployResult(String releaseOrderId) {\\n        ReleaseOrder releaseOrder = releaseRepository.queryByOrderId(releaseOrderId);\\n        Environment environment = environmentRepository.queryByEnvName(releaseOrder.getEnvName());\\n        List\\u003cReleaseItem\\u003e releaseItemList = releaseOrder.getReleaseItems();\\n        for (ReleaseItem releaseItem : releaseItemList) {\\n            if (StringUtils.isNotBlank(releaseItem.getTeam())) {\\n                List\\u003cReleaseItemDc\\u003e itemDcList = releaseRepository.queryAllReleaseItemDc(releaseItem.getItemId());\\n                log.info(\\\"query all itemDcList {}\\\", itemDcList);\\n                releaseItem.setItemDcList(itemDcList);\\n            }\\n            if (releaseItem.getStatus() == ReleaseItemStatus.RANKING \\u0026\\u0026 checkServiceImpl.indexOf(environment.getEnvType(), releaseItem.getAppName()) == 0) {\\n                releaseItem.setStatus(ReleaseItemStatus.FAIL);\\n            } else if (releaseItem.getStatus() == ReleaseItemStatus.PROCESSING) {\\n                //TODO  按item_dc状态发起ioc接口调用\\n                if (StringUtils.isNotBlank(releaseItem.getTeam())) {\\n                    List\\u003cReleaseItemDc\\u003e itemDcList = releaseItem.getItemDcList();\\n\\n                    List\\u003cIocDeployResultReq\\u003e request = itemDcList.stream().map(item -\\u003e {\\n                        IocDeployResultReq req = new IocDeployResultReq();\\n                        req.setTaskindex(item.getTaskIndex());\\n                        req.setDc(item.getDc());\\n                        req.setEnv(item.getDcEnv());\\n                        return req;\\n                    }).collect(Collectors.toList());\\n                    List\\u003cIocDeployResult\\u003e deployResultList = new ArrayList\\u003c\\u003e();\\n                    try {\\n                        deployResultList = iocRepository.deployResult(itemDcList.get(0).getJobName(), request);\\n                    } catch (Exception e) {\\n                        log.error(\\\"调用arch-spells服务查询发布结果失败：\\\", e);\\n                    }\\n                    for (ReleaseItemDc itemDc : itemDcList) {\\n                        for (IocDeployResult deployResult : deployResultList) {\\n                            if (itemDc.getTaskIndex().equals(deployResult.getTaskIndex())) {\\n                                itemDc.setStatus(deployResult.deployResult());\\n                            }\\n                        }\\n                    }\\n                    long count = itemDcList.stream().filter(item -\\u003e item.getStatus() == ReleaseItemStatus.PROCESSING).count();\\n                    if (count == 0) {\\n                        long fCount = itemDcList.stream().filter(item -\\u003e item.getStatus() == ReleaseItemStatus.FAIL).count();\\n                        if (fCount \\u003e 0) {\\n                            releaseItem.setStatus(ReleaseItemStatus.FAIL);\\n                        } else {\\n                            releaseItem.setStatus(ReleaseItemStatus.SUCCESS);\\n                        }\\n                    }\\n                } else {\\n                    ReleaseItemStatus status = releaseItemClient.queryStatus(releaseItem);\\n                    log.info(\\\"releaseItemStatus {}\\\", status);\\n                    if (status == ReleaseItemStatus.SUCCESS || status == ReleaseItemStatus.FAIL) {\\n                        releaseItem.setStatus(status);\\n                    }\\n                }\\n            }\\n        }\\n        long count = releaseItemList.stream().filter(item\\n                -\\u003e item.getStatus() == ReleaseItemStatus.PROCESSING\\n                || item.getStatus() == ReleaseItemStatus.INIT\\n                || item.getStatus() == ReleaseItemStatus.PREPARE).count();\\n        log.info(\\\"The releaseItemStatus is the amount of PROCESSING {}\\\", count);\\n        if (count == 0) {\\n            releaseOrder.setStatus(ReleaseOrderStatus.FINISH);\\n        }\\n        //TODO 独立事务更新，保证事务不包含外调接口动作\\n        releaseRepository.updateReleaseOrderStatus(releaseOrder);\\n\\n        return releaseOrder;\\n    }\\n\\n\\n    @Transactional(rollbackFor = Exception.class, propagation = Propagation.REQUIRES_NEW)\\n    @Override\\n    public void deployResultCallback(JenkinsDeployCallBack jenkinsDeployCallBack) {\\n        log.info(\\\"deployResultCallback params:\\\" + JSON.toJSONString(jenkinsDeployCallBack));\\n        //判断发布结果\\n        ReleaseItemStatus releaseItemStatus = jenkinsDeployCallBack.getDeployStatus() ? ReleaseItemStatus.SUCCESS : ReleaseItemStatus.FAIL;\\n        String jobName = jenkinsDeployCallBack.getJobName();\\n        String serviceName = StringUtils.startsWithIgnoreCase(jobName, \\\"iac-\\\") ? StringUtils.substringAfterLast(jobName, \\\"iac-\\\") : jobName;\\n        //lock\\n        ApplicationDO applicationDO = applicationDAO.selectForUpdateByAppName(serviceName.toLowerCase());\\n        //查询当前dc\\n        ReleaseItemDcDO releaseItemDcDO = releaseDAO.queryByNameAndIndexAndEnvAndDc(jenkinsDeployCallBack.getJobName(), jenkinsDeployCallBack.getTaskIndex(), jenkinsDeployCallBack.getDcEnv(), jenkinsDeployCallBack.getDc());\\n        AssertUtil.notNull(releaseItemDcDO, BusinessErrorCode.PARAM_ILLEGAL, \\\"数据不存在，请校验参数是否存在！\\\");\\n        //修改当前dc的状态\\n        releaseDAO.updateReleaseItemDcStatusAndKeyword(releaseItemDcDO.getItemDcId(), jenkinsDeployCallBack.getKeyword(), releaseItemStatus.getCode());\\n        String itemId = releaseItemDcDO.getItemId();\\n        //检查所有的dc\\n        List\\u003cReleaseItemDcDO\\u003e releaseItemDcDOS = releaseDAO.queryAllReleaseItemDc(releaseItemDcDO.getItemId());\\n        long itemdcCount = releaseItemDcDOS.stream().filter(item -\\u003e\\n                ReleaseItemStatus.PROCESSING.getCode() == item.getStatus()).count();\\n        if (itemdcCount == 0) {\\n            long fCount = releaseItemDcDOS.stream().filter(item -\\u003e item.getStatus() == ReleaseItemStatus.FAIL.getCode()).count();\\n            ReleaseItemStatus itemStatus = fCount \\u003e 0 ? ReleaseItemStatus.FAIL : ReleaseItemStatus.SUCCESS;\\n            //所有dc都处理完毕 处理item\\n            releaseDAO.updReleaseItemStatus(releaseItemDcDO.getItemId(), itemStatus.getCode());\\n            log.info(\\\"all item dc execute finish! item id :\\\" + releaseItemDcDO.getItemId() + \\\",status :\\\" + releaseItemStatus);\\n            //查询item\\n            ReleaseItemDO releaseItemDO = releaseDAO.queryReleaseItemByItemId(itemId);\\n            //查询到order下的所有item\\n            long itemCount = releaseDAO.queryReleaseItemListByOrderId(releaseItemDO.getOrderId()).stream().filter(item -\\u003e\\n                    ReleaseItemStatus.PREPARE.getCode() == item.getStatus()\\n                            || ReleaseItemStatus.PROCESSING.getCode() == item.getStatus()\\n                            || ReleaseItemStatus.INIT.getCode() == item.getStatus()).count();\\n            if (itemCount == 0) {\\n                //如果所有的item都处理完了，则order置为finish\\n                releaseDAO.updateReleaseOrderStatus(releaseItemDO.getOrderId(), ReleaseOrderStatus.FINISH.getCode());\\n                log.info(\\\"all item execute finish! order id :\\\" + releaseItemDO.getOrderId());\\n            }\\n        }\\n    }\\n\\n    @Override\\n    public List\\u003cRegionReleaseResult\\u003e regionRelease(String app, String regionName) {\\n        log.info(\\\"region release request param, app: {}, regionName: {}\\\", app, regionName);\\n        List\\u003cSprintRegionDO\\u003e sprintRegionDOList = sprintRegionDao.selectByAppAndRegionName(app, regionName);\\n        //operator\\n        String userName = ThreadLocalHolder.getUserName();\\n\\n        return Optional.ofNullable(sprintRegionDOList).orElse(new ArrayList\\u003c\\u003e()).stream()\\n                .filter(item -\\u003e RegionStatusEnum.c_released != RegionStatusEnum.getByCode(item.getRegionStatus()))\\n                .map(item -\\u003e {\\n                    sprintRegionDao.updateStatus(item.getSprintRegionId(), RegionStatusEnum.releasing.getCode(), userName);\\n                    //组装参数调用回收  如果有异常自己吃掉，先把结果放在内存中最后统一处理\\n                    ReleaseItemDO itemDO = releaseDAO.queryReleaseItemByItemId(item.getItemId());\\n                    try {\\n                        List\\u003cIocApplyDeploy\\u003e iocApplyDeploys = iocRepository.regionRelease(app, itemDO.getBelongSystem(), \\\"test\\\", regionName, itemDO.getTeam(), itemDO.getProject());\\n                        if (iocApplyDeploys == null || iocApplyDeploys.isEmpty()) {\\n                            //回收失败\\n                            log.info(\\\"region release result is null!!\\\");\\n                            RegionReleaseResult result = new RegionReleaseResult(true, \\\"分区不存在！\\\");\\n                            BeanUtils.copyProperties(item, result);\\n                            return result;\\n                        }else {\\n                            for (IocApplyDeploy iocApplyDeploy : iocApplyDeploys) {\\n                                if (!iocApplyDeploy.getStatus()) {\\n                                    log.error(\\\"region release error,itemdc region release is failed!!\\\");\\n                                    RegionReleaseResult result = new RegionReleaseResult(false, \\\"item下有dc回收失败！\\\");\\n                                    BeanUtils.copyProperties(item, result);\\n                                    return result;\\n                                }\\n                            }\\n                        }\\n                    } catch (Exception e) {\\n                        log.error(\\\"region release error: {}\\\", e);\\n                        RegionReleaseResult result = new RegionReleaseResult(false, \\\"接口调用异常\\\");\\n                        BeanUtils.copyProperties(item, result);\\n                        return result;\\n                    }\\n                    RegionReleaseResult result = new RegionReleaseResult(true, \\\"回收成功\\\");\\n                    BeanUtils.copyProperties(item, result);\\n                    return result;\\n                }).filter(Objects::nonNull).map(regionReleaseResult -\\u003e {\\n                    //解析回收结果  以下可以放在同一个事物中，并且封装repository\\n                    if (regionReleaseResult.getSuccess()) {\\n                        //成功\\n                        sprintRegionDao.updateStatus(regionReleaseResult.getSprintRegionId(), RegionStatusEnum.c_released.getCode(), userName);\\n                        RegionRecoveryDO regionRecoveryDO = RegionRecoveryDO.builder()\\n                                .sprintRegionId(regionReleaseResult.getSprintRegionId())\\n                                .operator(userName)\\n                                .createdBy(regionReleaseResult.getCreatedBy())\\n                                .updatedBy(regionReleaseResult.getUpdatedBy())\\n                                .createdDate(regionReleaseResult.getCreatedDate())\\n                                .updatedDate(regionReleaseResult.getUpdatedDate())\\n                                .recoveryTime(new Date())\\n                                .build();\\n                        regionRecoveryDAO.insert(regionRecoveryDO);\\n                    } else {\\n                        //失败\\n                        sprintRegionDao.updateStatus(regionReleaseResult.getSprintRegionId(), RegionStatusEnum.a_failed.getCode(), userName);\\n                    }\\n                    return regionReleaseResult;\\n                }).collect(Collectors.toList());\\n    }\\n\\n    @Override\\n    public Map\\u003cString, Object\\u003e getRegionListPage(String sprintName, String regionName, SprintStatus sprintStatus, RegionStatusEnum regionStatus, SprintOwner sprintOwner, String app, int pageNum) {\\n        String user = ThreadLocalHolder.getUserName();\\n        String joinUser = null;\\n        String ownerUser = null;\\n        if (SprintOwner.join == sprintOwner) {\\n            joinUser = \\\"%\\\" + user + \\\"%\\\";//参与人字段多值凭借，所有用like\\n        } else if (SprintOwner.owner == sprintOwner) {\\n            ownerUser = user;\\n        }\\n        //应用名和参与人转换为版本ID,用于后续查询\\n        List\\u003cString\\u003e sprintIds = null;\\n        if (StringUtils.isNotEmpty(app) || StringUtils.isNotEmpty(joinUser)) {\\n            sprintIds = sprintRepository.querySprintIdFromAppofsprint(app, joinUser);\\n        }\\n\\n\\n        Map\\u003cString, Object\\u003e map = new HashMap\\u003c\\u003e();\\n        if (SprintOwner.join == sprintOwner \\u0026\\u0026 sprintIds.isEmpty()) {//我参与的，但是无版本，直接返回\\n            map.put(\\\"sprintList\\\", new ArrayList\\u003cSimpleSprintDto\\u003e());\\n            map.put(\\\"total\\\", 0);\\n        } else {\\n            //版本名称支持模糊查询\\n            sprintName = StringUtils.isEmpty(sprintName) ? null : \\\"%\\\" + sprintName + \\\"%\\\";\\n            //查询总数\\n            int total = sprintRegionDao.queryTotal(sprintName, regionName, sprintIds, regionStatus == null ? null : regionStatus.getCode(),\\n                    sprintStatus == null ? null : sprintStatus.getCode(), ownerUser, app);\\n            //查询结果集\\n            List\\u003cSprintRegionPageDo\\u003e sprintRegionPageDoList = new ArrayList\\u003c\\u003e();\\n            if (total \\u003e 0) {\\n                sprintRegionPageDoList = sprintRegionDao.queryPage((pageNum - 1) * 10, sprintName, regionName, sprintIds, regionStatus == null ? null : regionStatus.getCode(),\\n                        sprintStatus == null ? null : sprintStatus.getCode(), ownerUser, app);\\n            }\\n            List\\u003cSprintRegionPageView\\u003e sprintRegionPageViews = new ArrayList\\u003c\\u003e();\\n            if (sprintRegionPageDoList != null) {\\n                sprintRegionPageDoList.forEach(sprintRegionPageDo -\\u003e {\\n                    SprintRegionPageView sprintRegionPageView = new SprintRegionPageView();\\n                    BeanUtils.copyProperties(sprintRegionPageDo, sprintRegionPageView, \\\"createdDate\\\", \\\"updatedDate\\\", \\\"sprintStatus\\\");\\n                    SprintStatus status = SprintStatus.getByCode(new Integer(sprintRegionPageDo.getSprintStatus()));\\n                    sprintRegionPageView.setSprintStatus(status.getName());\\n                    sprintRegionPageView.setCreatedDate(DateUtils.getTime(sprintRegionPageDo.getCreatedDate()));\\n                    sprintRegionPageView.setUpdatedDate(DateUtils.getTime(sprintRegionPageDo.getUpdatedDate()));\\n                    sprintRegionPageViews.add(sprintRegionPageView);\\n                });\\n            }\\n            //组装响应体\\n            map.put(\\\"sprintRegionPageDoList\\\", sprintRegionPageViews);\\n            map.put(\\\"total\\\", total);\\n        }\\n        return map;\\n    }\\n}\"\r\n            },\r\n            {\r\n                \"Path\": \"src/main/java/com/poype/heracles/core/domain/service/impl/SprintServiceImpl.java\",\r\n                \"Status\": \"M\",\r\n                \"Content\": \"package com.poype.heracles.core.domain.service.impl;\\n\\nimport com.alibaba.fastjson.JSON;\\nimport com.alibaba.fastjson.JSONArray;\\nimport com.alibaba.fastjson.JSONObject;\\nimport com.poype.heracles.auth.facade.config.CenterConfig;\\nimport com.poype.heracles.auth.facade.config.mq.SsdlcReqMsg;\\nimport com.poype.heracles.common.constant.Constants;\\nimport com.poype.heracles.common.enums.*;\\nimport com.poype.heracles.common.util.AssertUtil;\\nimport com.poype.heracles.common.util.DateUtils;\\nimport com.poype.heracles.common.util.LogUtil;\\nimport com.poype.heracles.common.util.ThreadLocalHolder;\\nimport com.poype.heracles.core.domain.model.Environment;\\nimport com.poype.heracles.core.domain.model.EoaMessage;\\nimport com.poype.heracles.core.domain.model.EoaRecord;\\nimport com.poype.heracles.core.domain.model.ReleaseApply;\\nimport com.poype.heracles.core.domain.model.application.Application;\\nimport com.poype.heracles.core.domain.model.application.config.SsdlcConf;\\nimport com.poype.heracles.core.domain.model.dto.AppOfSprintDto;\\nimport com.poype.heracles.core.domain.model.dto.ApprovePersonConf;\\nimport com.poype.heracles.core.domain.model.dto.SprintUedRecordDto;\\nimport com.poype.heracles.core.domain.model.enums.*;\\nimport com.poype.heracles.core.domain.model.eoa.*;\\nimport com.poype.heracles.core.domain.model.sprint.AppOfSprint;\\nimport com.poype.heracles.core.domain.model.sprint.Sprint;\\nimport com.poype.heracles.core.domain.service.EventSenderService;\\nimport com.poype.heracles.core.domain.service.KafkaProducerService;\\nimport com.poype.heracles.core.domain.service.SprintService;\\nimport com.poype.heracles.core.facade.request.SprintFeatureRequest;\\nimport com.poype.heracles.core.facade.result.*;\\nimport com.poype.heracles.core.repository.ApplicationRepository;\\nimport com.poype.heracles.core.repository.EnvironmentRepository;\\nimport com.poype.heracles.core.repository.SprintRepository;\\nimport com.poype.heracles.core.repository.dao.*;\\nimport com.poype.heracles.core.repository.dao.model.*;\\nimport com.poype.heracles.core.repository.integration.CodeApiClient;\\nimport com.poype.heracles.core.repository.integration.ReleaseClient;\\nimport com.poype.heracles.core.repository.integration.SsdlcApiClient;\\nimport com.poype.heracles.core.repository.integration.model.feature.Children;\\nimport com.poype.heracles.core.repository.integration.model.feature.Data;\\nimport com.poype.heracles.core.repository.integration.model.feature.FeatureResponse;\\nimport com.poype.heracles.core.repository.integration.model.ssdlc.SsdlcRequest;\\nimport com.poype.heracles.core.repository.integration.model.ssdlc.SsdlcResponse;\\nimport lombok.extern.slf4j.Slf4j;\\nimport org.apache.commons.collections.CollectionUtils;\\nimport org.apache.commons.collections.map.HashedMap;\\nimport org.apache.commons.lang.StringUtils;\\nimport org.springframework.beans.BeanUtils;\\nimport org.springframework.beans.factory.annotation.Autowired;\\nimport org.springframework.stereotype.Service;\\nimport org.springframework.transaction.annotation.Transactional;\\nimport reactor.util.function.Tuple2;\\nimport reactor.util.function.Tuples;\\n\\nimport javax.annotation.Resource;\\nimport java.text.SimpleDateFormat;\\nimport java.util.*;\\nimport java.util.concurrent.ConcurrentHashMap;\\nimport java.util.function.Function;\\nimport java.util.function.Predicate;\\nimport java.util.stream.Collectors;\\n\\nimport static com.poype.heracles.common.enums.BusinessErrorCode.*;\\n\\n@Slf4j\\n@Service(\\\"sprintService\\\")\\npublic class SprintServiceImpl implements SprintService {\\n\\n    public static final String BIND = \\\"bind\\\";\\n    public static final String UN_BIND = \\\"unBind\\\";\\n\\n    @Resource\\n    private SprintRepository sprintRepository;\\n\\n    @Resource\\n    private ApplicationRepository applicationRepository;\\n\\n    @Resource\\n    private CodeApiClient codeApiClient;\\n\\n    @Resource\\n    private EnvironmentRepository environmentRepository;\\n\\n    @Resource\\n    private ReleaseClient releaseClient;\\n\\n    @Resource\\n    private SprintDAO sprintDAO;\\n\\n    @Resource\\n    private SprintUedResultRecordDAO sprintUedResultRecordDAO;\\n\\n    @Resource\\n    private ReleaseAppSeqDAO releaseAppSeqDAO;\\n\\n    @Resource\\n    private DefaultAppSeqDAO defaultAppSeqDAO;\\n\\n    @Resource\\n    private ReleaseApplyDAO releaseApplyDAO;\\n\\n    @Resource\\n    private EoaRecordDAO eoaRecordDAO;\\n\\n    @Resource\\n    private EoaMessageDAO eoaMessageDAO;\\n\\n    @Resource\\n    private EoaAttachmentsDAO eoaAttachmentsDAO;\\n\\n    @Resource\\n    private ApplicationDAO applicationDAO;\\n\\n    @Autowired\\n    private CenterConfig centerConfig;\\n\\n    @Autowired\\n    private EoaApprovePersonDAO eoaApprovePersonDAO;\\n\\n    @Autowired\\n    private AppSsdlcDetailDao appSsdlcDetailDao;\\n\\n    @Autowired\\n    private SsdlcApiClient ssdlcApiClient;\\n\\n    @Autowired\\n    private SprintFeatureDao sprintFeatureDao;\\n\\n    @Autowired\\n    private SprintFeatureStoryDao sprintFeatureStoryDao;\\n\\n    @Autowired\\n    private KafkaProducerService kafkaProducerService;\\n\\n    @Autowired\\n    private ReleaseDAO releaseDAO;\\n\\n    @Autowired\\n    private EntranceGuardRecordDao entranceGuardRecordDao;\\n\\n    @Autowired\\n    private EntranceGuardDetailDao entranceGuardDetailDao;\\n\\n    @Autowired\\n    private EventSenderService eventSenderService;\\n\\n\\n    @Override\\n    public Sprint queryBySprintId(String sprintId) {\\n        return sprintRepository.queryBySprintId(sprintId);\\n    }\\n\\n    @Transactional\\n    @Override\\n    public String createNewSprint(String name, String description, String releaseDate,\\n                                  List\\u003cAppOfSprintDto\\u003e sprintDtoList, String createUser,\\n                                  int printType, String signId, int useRc, List\\u003cSprintClassify\\u003e sprintClassify) {\\n        //通过releaseDate先查询是否存在可用的环境，如果没有就新增\\n        Environment environment = environmentRepository.queryByEnvName(releaseDate);\\n        if (environment == null) {\\n            environment = environmentRepository.createOneFreeSitEnv(releaseDate);\\n        }\\n\\n        List\\u003cAppOfSprint\\u003e appList = new ArrayList\\u003c\\u003e();\\n        UedResult result = UedResult.none_a;//系统判断无需ued\\n        for (AppOfSprintDto appOfSprintDto : sprintDtoList) {\\n            Application application = applicationRepository.queryByAppName(appOfSprintDto.getAppName());\\n            if( result==UedResult.none_a \\u0026\\u0026 application.getUedSet()!=null \\u0026\\u0026 !application.getUedSet().isEmpty()) {\\n            \\tresult = UedResult.uncheck;//版本下任一应用存在ued人员，就需要ued验证\\n            }\\n            AppOfSprint app = new AppOfSprint(appOfSprintDto.getAppName(), appOfSprintDto.getDevList(),\\n                    appOfSprintDto.getQaList(), \\\"release\\\" + releaseDate,\\n                    application.getCodeRepository(), application.getApplicationType());\\n            if(application.getUedSet() != null) {//设置ued字段\\n            \\tapp.setUedList(application.getUedSet().stream().collect(Collectors.toList()));\\n            }else {\\n            \\tapp.setUedList(new ArrayList\\u003c\\u003e());\\n            }\\n            appList.add(app);\\n        }\\n\\n        Sprint sprint = new Sprint(name, description, releaseDate, appList, environment.getEnvName(),\\n                printType, signId, UseRcEnum.getByCode(useRc), createUser, ReleaseApplyStatus.unapply,\\n                sprintClassify,result);\\n        sprint.setPartitionRecovery(PartitionRecovery.auto);//默认自动回收\\n        environment.setStatus(EnvironmentStatus.BUSY);\\n\\n        sprintRepository.addNewSprint(sprint);\\n        environmentRepository.updateEnvironmentStatus(environment);\\n        return sprint.getSprintId();\\n    }\\n\\n    @Override\\n    public void createCodeBranch(String sprintId) {\\n        Sprint sprint = sprintRepository.queryBySprintId(sprintId);\\n        List\\u003cAppOfSprint\\u003e appOfSprints = sprint.getApplications().stream().filter(distinctByKey(e-\\u003ee.getCodeRepository())).collect(Collectors.toList());\\n        for (AppOfSprint appOfSprint : appOfSprints) {\\n            toCreateBranch(appOfSprint);\\n        }\\n        sprintRepository.updateWholeSprintToStartStatus(sprint.getSprintId());\\n    }\\n\\n    @Override\\n    public void createSingleCodeBranch(String sprintId, String appName) {\\n        AppOfSprint appOfSprint = sprintRepository.queryAppOfSprintByNameAndSprintId(appName, sprintId);\\n        toCreateSingleBranch(appOfSprint, sprintId, appName);\\n    }\\n\\n\\n    @Override\\n    public void updateAppListOfSprint(Sprint sprint, List\\u003cAppOfSprintDto\\u003e appOfSprintDtoList) {\\n        List\\u003cString\\u003e addAppList = new ArrayList\\u003c\\u003e();\\n        List\\u003cString\\u003e updateAppList = new ArrayList\\u003c\\u003e();\\n        List\\u003cMap\\u003cString,String\\u003e\\u003e removeAppList = new ArrayList\\u003c\\u003e();\\n\\n        int originalAppCount = sprint.getApplications().size();\\n        int newAppCount = appOfSprintDtoList.size();\\n        for (int i = 0; i \\u003c newAppCount; i++) {\\n            int j = 0;\\n            for (; j \\u003c originalAppCount; j++) {\\n                AppOfSprint originalApp = sprint.getApplications().get(j);\\n                AppOfSprintDto newApp = appOfSprintDtoList.get(i);\\n                if (newApp.getAppName().equals(originalApp.getApp())) {\\n                    // 版本中已经存在这个应用，需要更新\\n                    updateAppList.add(newApp.getAppName());\\n                    break;\\n                }\\n            }\\n            if (j == originalAppCount) {\\n                // 版本中不包含这个应用，需要增加\\n                addAppList.add(appOfSprintDtoList.get(i).getAppName());\\n            }\\n        }\\n        for (int i = 0; i \\u003c originalAppCount; i++) {\\n            int j = 0;\\n            for (; j \\u003c newAppCount; j++) {\\n                AppOfSprint originalApp = sprint.getApplications().get(i);\\n                AppOfSprintDto newApp = appOfSprintDtoList.get(j);\\n                if (newApp.getAppName().equals(originalApp.getApp())) {\\n                    break;\\n                }\\n            }\\n            if (j == newAppCount) {\\n                // 新的应用列表中没有，是要删除的应用\\n                Map\\u003cString,String\\u003e map = new HashedMap();\\n                map.put(\\\"appName\\\",sprint.getApplications().get(i).getApp());\\n                map.put(\\\"codeUrl\\\", sprint.getApplications().get(i).getCodeRepository());\\n                map.put(\\\"codeBranch\\\", sprint.getApplications().get(i).getCodeBranch());\\n                removeAppList.add(map);\\n            }\\n        }\\n        //删除远程分支\\n//        for (Map\\u003cString,String\\u003e map : removeAppList) {\\n//            String repositoryId = codeApiClient.getRepositoryId(map.get(\\\"codeUrl\\\"));\\n//            AssertUtil.notBlank(repositoryId, BusinessErrorCode.GIT_ADDR_ILLEGAL);\\n//            codeApiClient.deleteBranch(Integer.valueOf(repositoryId), map.get(\\\"codeBranch\\\"));\\n//        }\\n        //删除应用版本信息\\n        for (Map\\u003cString,String\\u003e map : removeAppList) {\\n            sprintRepository.deleteApp(map.get(\\\"appName\\\"), sprint.getSprintId());\\n        }\\n        //更新应用版本信息\\n        for (String app : updateAppList) {\\n            for (AppOfSprintDto appOfSprintDto : appOfSprintDtoList) {\\n                if (app.equals(appOfSprintDto.getAppName())) {\\n                    sprintRepository.updateDevAndQaOfApp(app, appOfSprintDto.getDevList(),\\n                            appOfSprintDto.getQaList(), sprint.getSprintId());\\n                    break;\\n                }\\n            }\\n        }\\n        //添加版本应用\\n        for (String app : addAppList) {\\n            for (AppOfSprintDto appOfSprintDto : appOfSprintDtoList) {\\n                if (app.equals(appOfSprintDto.getAppName())) {\\n                    Application application = applicationRepository.queryByAppName(app);\\n                    AppOfSprint appOfSprint = new AppOfSprint(appOfSprintDto.getAppName(), appOfSprintDto.getDevList(),\\n                            appOfSprintDto.getQaList(), \\\"release\\\" + sprint.getReleaseDate(),\\n                            application.getCodeRepository(), application.getApplicationType());\\n                    if(application.getUedSet() != null) {\\n                    \\tappOfSprint.setUedList(application.getUedSet().stream().collect(Collectors.toList()));\\n                    }else {\\n                    \\tappOfSprint.setUedList(new ArrayList\\u003c\\u003e());\\n                    }\\n                    sprintRepository.addNewAppForSprint(sprint.getSprintId(), appOfSprint);\\n                    break;\\n                }\\n            }\\n        }\\n        //如果新增了应用则处理签报状态\\n        if (!addAppList.isEmpty()) {\\n            String sprintId = sprint.getSprintId();\\n            if (ReleaseApplyStatus.approval == sprint.getReleaseApplyStatus()) {\\n                //如果是审批中\\n                releaseApplyDAO.changeApplyStatusDeferredBySprintId(sprintId, ThreadLocalHolder.getUserName(), true);\\n            } else if (ReleaseApplyStatus.pass == sprint.getReleaseApplyStatus()) {\\n                //如果是审批通过则直接置为失效\\n                sprintDAO.updateReleaseApplyStatus(sprintId, ReleaseApplyStatus.expired);\\n                ReleaseApply releaseApply = sprintRepository.queryLastReleaseApply(sprint.getSprintId());\\n                releaseApply.setReleaseApplyStatus(ReleaseApplyStatus.expired);\\n                releaseApply.setUpdateTime(new Date());\\n                releaseApply.setUpdateUser(ThreadLocalHolder.getUserName());\\n                releaseApplyDAO.updateByPrimaryKeySelective(releaseApply);\\n            }\\n        }\\n\\n        if(!removeAppList.isEmpty() || !addAppList.isEmpty()) {//删除或者添加新应用重新计算ued状态\\n            List\\u003cString\\u003e sprintApps = new ArrayList\\u003c\\u003e();\\n            sprintApps.addAll(addAppList);\\n            sprintApps.addAll(updateAppList);\\n            UedResult reslt = UedResult.none_a;\\n            for (String app : sprintApps) {\\n            \\tApplication application = applicationRepository.queryByAppName(app);\\n            \\tif(reslt == UedResult.none_a \\u0026\\u0026 application.getUedSet() != null \\u0026\\u0026 !application.getUedSet().isEmpty()) {\\n            \\t\\treslt = UedResult.uncheck;\\n            \\t\\tbreak;\\n            \\t}\\n            }\\n            if(reslt != sprint.getUedResult()) {\\n            \\tsprintRepository.updateSprintUedResult(sprint.getSprintId(), reslt);\\n            }\\n        }\\n\\n    }\\n\\n    @Override\\n    public TransferAppStatusResult transferAppOfSprintStatus(Sprint sprint, String app, String status, String userName) {\\n        ReleaseApplyStatus releaseApplyStatus = sprint.getReleaseApplyStatus();\\n        AppOfSprint appOfSprint = sprint.findAppByName(app);\\n        AssertUtil.notNull(appOfSprint, BusinessErrorCode.APP_NOT_FOUND);\\n\\n        AppOfSprintStatus appOfSprintStatus = AppOfSprintStatus.getByName(status);\\n        if (appOfSprintStatus == AppOfSprintStatus.SIT || appOfSprintStatus == AppOfSprintStatus.UAT\\n                || appOfSprintStatus == AppOfSprintStatus.FINISH || appOfSprintStatus == AppOfSprintStatus.START) {\\n            List\\u003cString\\u003e qaList = appOfSprint.getQaList();\\n            // 只有该应用版本测试人员才能切换应用状态\\n            List\\u003cString\\u003e qaListCopy = new ArrayList\\u003c\\u003e();\\n            for (String qa : qaList) {\\n                qaListCopy.add(qa.toUpperCase());\\n            }\\n            List\\u003cString\\u003e releaseOperators = releaseClient.getReleaseOperator();\\n            if (!qaListCopy.contains(userName.toUpperCase()) \\u0026\\u0026 !StringUtils.containsIgnoreCase(releaseOperators.toString(), userName)) {\\n                AssertUtil.isTrue(false, BusinessErrorCode.ROLE_ERROR);\\n            }\\n        }\\n        if (appOfSprintStatus == AppOfSprintStatus.UAT) {\\n            // 业务方向受管控 \\u0026\\u0026 普通版本 \\u0026 sit -\\u003e uat 需要检查绑定神兵\\n            String appTeams = applicationRepository.queryByAppName(app).getTeam();\\n            Boolean check = centerConfig.getEntranceGuardConf(Constants.ENTRANCE_GUARD_TEAMS_KEY).contains(appTeams);;\\n            if (check \\u0026\\u0026 sprint.getSprintType() == 1 \\u0026\\u0026 AppOfSprintStatus.SIT == appOfSprint.getStatus()) {\\n                int count = querySprintFeatureCount(sprint.getSprintId());\\n                AssertUtil.isTrue(count \\u003e 0, NOT_BIND_WIZARD_PLAN, \\\"当前版本未关联神兵版本，请先完成关联！\\\");\\n            }\\n            //如果是完成状态且正在审批中的数据回退到UAT  签报和发布单置为失效\\n            if (AppOfSprintStatus.FINISH == appOfSprint.getStatus()) {\\n                if (ReleaseApplyStatus.approval == sprint.getReleaseApplyStatus()) {\\n                    //如果是审批中\\n                    releaseApplyDAO.changeApplyStatusDeferredBySprintId(sprint.getSprintId(), ThreadLocalHolder.getUserName(), true);\\n                }else if (ReleaseApplyStatus.pass == sprint.getReleaseApplyStatus()) {\\n                    //如果是审批通过则直接置为失效\\n                    releaseApplyStatus = ReleaseApplyStatus.expired;\\n                    sprintDAO.updateReleaseApplyStatus(sprint.getSprintId(), releaseApplyStatus);\\n                    ReleaseApply releaseApply = sprintRepository.queryLastReleaseApply(sprint.getSprintId());\\n                    releaseApply.setReleaseApplyStatus(releaseApplyStatus);\\n                    releaseApply.setUpdateTime(new Date());\\n                    releaseApply.setUpdateUser(ThreadLocalHolder.getUserName());\\n                    releaseApplyDAO.updateByPrimaryKeySelective(releaseApply);\\n                }\\n                // 环境为RC/PROD的所有非Finish的发布单，都置为失效\\n                releaseDAO.updateReleaseOrderInvalid(sprint.getSprintId());\\n            }\\n            List\\u003cAppOfSprint\\u003e appOfSprints = sprintRepository.queryAppOfSprintByNameAndStatus(app, appOfSprintStatus);\\n            AssertUtil.isTrue(appOfSprints.size() \\u003c= 0, BusinessErrorCode.APP_EXIST,\\n                    \\\"该应用在\\\" + status + \\\"环境已经存在一个版本，暂不能进入\\\");\\n        }\\n        if (appOfSprintStatus == AppOfSprintStatus.FINISH) {\\n            UedResult result = sprint.getUedResult();\\n            AssertUtil.isTrue(result == UedResult.none_a || result == UedResult.pass || result == UedResult.none_p,\\n                    BusinessErrorCode.UED_NOT_PASS);\\n        }\\n        appOfSprint.setStatus(AppOfSprintStatus.getByName(status));\\n        sprintRepository.updateAppOfSprintStatus(appOfSprint);\\n\\n        // 检查整个sprint的status是否需要扭转\\n        if (sprint.checkSprintStatusAfterAppStatusTransfer(AppOfSprintStatus.getByName(status))) {\\n            sprintRepository.updateSprintStatus(sprint.getSprintId(), sprint.getStatus());\\n        }\\n\\n        //对已完成的分支锁定为不可修改\\n//        if (appOfSprintStatus == AppOfSprintStatus.FINISH) {\\n//            AppOfSprint appOfSprints = sprintRepository.queryAppOfSprintByNameAndSprintId(app, sprintId);\\n//            AssertUtil.notNull(appOfSprints, BusinessErrorCode.SPRINT_NOT_EXIST);\\n//            String repositoryId = codeApiClient.getRepositoryId(appOfSprints.getCodeRepository());\\n//            JSONObject js = codeApiClient.setLockBranch(repositoryId, appOfSprints.getCodeBranch(), true);\\n//            AssertUtil.isTrue(0 == js.getJSONObject(\\\"header\\\").getInteger(\\\"ret\\\"), BusinessErrorCode.CODEAPI_LOCK_BRANCH_FAIL);\\n//        }\\n        return new TransferAppStatusResult(sprint.getStatus().getName(), releaseApplyStatus);\\n    }\\n\\n    @Override\\n    public void transferWholeSprintStatus(String sprintId, String status) {\\n        Sprint sprint = sprintRepository.queryBySprintId(sprintId);\\n        AssertUtil.isTrue(sprint.getStatus().getCode() \\u003e SprintStatus.FINISH_TEST.getCode(),\\n                BusinessErrorCode.ILLEGAL_SPRINT_STATUS);\\n\\n        SprintStatus sprintStatus = SprintStatus.getByName(status);\\n        if (sprint.getUseRc() == UseRcEnum.NOT_USE) {\\n            AssertUtil.isTrue(sprintStatus != SprintStatus.FINISH_RC_TEST, BusinessErrorCode.RC_USE_ERROR);\\n        }\\n\\n        sprint.setStatus(sprintStatus);\\n        sprintRepository.updateSprintStatus(sprint.getSprintId(), sprint.getStatus());\\n\\n//        //对完成生产验证的项目合并master\\n//        if (SprintStatus.FINISH_PROD_VERIFY == SprintStatus.getByName(status)) {\\n//            AssertUtil.isTrue(SprintStatus.PROD.getCode() == sprint.getStatus().getCode(), BusinessErrorCode.SPRINT_NO_IN_PROD);\\n//            sprint.getApplications().forEach(e -\\u003e {\\n//                String repositoryId = codeApiClient.getRepositoryId(e.getCodeRepository());\\n//                String serviceName = e.getApp();\\n//                Application application = applicationRepository.queryByAppName(serviceName);\\n//                JSONObject js = codeApiClient.createMergeRequest(Integer.valueOf(repositoryId), e.getCodeBranch(), \\\"master\\\", serviceName, \\\"合并代码到master分支\\\", application.getDevOwner());\\n//                AssertUtil.isTrue(0 == js.getJSONObject(\\\"header\\\").getInteger(\\\"ret\\\"), BusinessErrorCode.CODEAPI_MERGE_REQUEST_FAIL);\\n//            });\\n//        }\\n    }\\n\\n    @Override\\n    @Transactional\\n    public void updateSprintInvalid(String sprintId) {\\n        Sprint sprint = sprintRepository.queryBySprintId(sprintId);\\n        AssertUtil.notNull(sprint, BusinessErrorCode.SPRINT_NOT_EXIST);\\n\\n        sprintRepository.updateSprintStatus(sprintId, SprintStatus.INVALID);\\n        for (AppOfSprint appOfSprint : sprint.getApplications()) {\\n            appOfSprint.setStatus(AppOfSprintStatus.INVALID);\\n            sprintRepository.updateAppOfSprintStatus(appOfSprint);\\n        }\\n    }\\n\\n    @Override\\n    @Transactional\\n    public void deleteSprint(String sprintId, String user){\\n        Sprint sprint = sprintRepository.queryBySprintId(sprintId);\\n        AssertUtil.notNull(sprint, BusinessErrorCode.SPRINT_NOT_EXIST);\\n        AssertUtil.isTrue(user.equalsIgnoreCase(sprint.getSprintCreator()), BusinessErrorCode.EDIT_ONLY_BY_CREATOR);\\n//        for (AppOfSprint appOfSprint : sprint.getApplications()){\\n//            String repositoryId = codeApiClient.getRepositoryId(appOfSprint.getCodeRepository());\\n//            AssertUtil.notBlank(repositoryId, BusinessErrorCode.GIT_ADDR_ILLEGAL);\\n//            codeApiClient.deleteBranch(Integer.valueOf(repositoryId), appOfSprint.getCodeBranch());\\n//        }\\n        sprintRepository.deleteApp(null, sprintId);\\n        sprintRepository.deleteSprint(sprintId);\\n\\n    }\\n\\n    @Override\\n    public List\\u003cSprintUedRecordDto\\u003e querySprintUedRecord(String sprintId) {\\n        List\\u003cSprintUedRecordDto\\u003e list = new ArrayList\\u003c\\u003e();\\n        SprintDO sprintDO = sprintDAO.querySprintById(sprintId);\\n        if (sprintDO != null) {\\n            String sprintName = sprintDO.getSprintName();\\n            list = sprintUedResultRecordDAO.queryBySprintId(sprintId).stream().map(item -\\u003e SprintUedRecordDto.builder()\\n                    .id(item.getId())\\n                    .sprintName(sprintName)\\n                    .sprintId(sprintId)\\n                    .uedResult(item.getUedResult())\\n                    .uedDesc(item.getUedDesc())\\n                    .uedTime(item.getUedTime() != null ? DateUtils.getTime(item.getUedTime()) : null)\\n                    .uedUser(item.getUedUser())\\n                    .build()).collect(Collectors.toList());\\n        }\\n        return list;\\n    }\\n\\n    @Override\\n    public List\\u003cReleaseOrderList\\u003e querySimpleReleaseOrderList(String sprintId, ReleaseOrderCfg releaseOrderConf) {\\n        List\\u003cReleaseOrderList\\u003e list = new ArrayList\\u003c\\u003e();\\n        switch (releaseOrderConf) {\\n            case none:\\n                sprintDAO.queryAppOfSprintListById(sprintId).forEach(a -\\u003e list.add(new ReleaseOrderList(a.getApp(), 0)));\\n                break;\\n            case sprint:\\n                releaseAppSeqDAO.selectReleaseAppSeqBySprintId(sprintId).forEach(a -\\u003e list.add(new ReleaseOrderList(a.getApp(), a.getReleaseOrder())));\\n                defaultAppSeqDAO.selectDefaultAppSeqBySprintId(sprintId).forEach(a -\\u003e list.add(new ReleaseOrderList(a.getApp(), a.getReleaseOrder())));\\n                break;\\n            case release:\\n                List\\u003cString\\u003e sprintIdList = sprintDAO.selectSprintId(sprintId);\\n                if (!CollectionUtils.isEmpty(sprintIdList) \\u0026\\u0026 sprintIdList.size() \\u003e 0) {\\n                    releaseAppSeqDAO.selectReleaseAppSeqBySprintIdList(sprintIdList).forEach(a -\\u003e list.add(new ReleaseOrderList(a.getApp(), a.getReleaseOrder())));\\n                    defaultAppSeqDAO.selectDefaultAppSeqBySprintIdList(sprintIdList).forEach(a -\\u003e list.add(new ReleaseOrderList(a.getApp(), a.getReleaseOrder())));\\n                }\\n                break;\\n        }\\n        return list;\\n    }\\n\\n    @Override\\n    public SubmitApplyView queryApplyInfo(String sprintId, String releaseApplyId) {\\n        SubmitApplyView submitApplyView = new SubmitApplyView();\\n        submitApplyView.setSprintId(sprintId);\\n        SprintDO sprintDO = sprintDAO.querySprintById(sprintId);\\n\\n        if (sprintDO != null) {\\n            submitApplyView.setName(sprintDO.getSprintName());\\n            submitApplyView.setDescription(sprintDO.getDescription());\\n            submitApplyView.setSprintStatus(SprintStatus.getByCode(sprintDO.getStatus()).getName());\\n            submitApplyView.setReleaseDate(sprintDO.getReleaseDate());\\n            submitApplyView.setSprintType(sprintDO.getSprintType());\\n            submitApplyView.setSprintClassify(StringUtils.isNotBlank(sprintDO.getSprintClassify()) ? JSONObject.parseArray(sprintDO.getSprintClassify(), String.class) : null);\\n\\n            ReleaseApply releaseApply = null;\\n\\n            if (StringUtils.isNotBlank(releaseApplyId)) {\\n                 releaseApply = releaseApplyDAO.selectByPrimaryKey(releaseApplyId);\\n            }else{\\n                 releaseApply = releaseApplyDAO.selectOneBySprintId(sprintId);\\n            }\\n            String sprintClassify = sprintDO.getSprintClassify();\\n            boolean isBusiness = StringUtils.isNotBlank(sprintClassify) ? JSONArray.parseArray(sprintClassify, SprintClassify.class).contains(SprintClassify.demand) : true;\\n            Boolean notFirst = isNotFirst(sprintId);\\n\\n            if (releaseApply != null) {\\n                submitApplyView.setReleaseExpTime(releaseApply.getReleaseExpTime());\\n                submitApplyView.setReleaseEndTime(releaseApply.getReleaseEndTime());\\n                submitApplyView.setReleaseCfgDesc(StringUtils.isNotBlank(releaseApply.getReleaseCfgDesc()) ? JSONObject.parseArray(releaseApply.getReleaseCfgDesc(), String.class) : null);\\n                submitApplyView.setReleaseOrderCfg(releaseApply.getReleaseOrderCfg());\\n                submitApplyView.setReleaseByOperation(releaseApply.getReleaseByOperation());\\n                submitApplyView.setReleaseApplyDesc(releaseApply.getReleaseApplyDesc());\\n\\n                EoaRecord eoaRecord = eoaRecordDAO.selectByBusinessNo(releaseApply.getId());\\n\\n                EoaInfo eoaInfo = new EoaInfo();\\n                if (eoaRecord != null) {\\n                    Boolean proxyApply = releaseApply.getProxyApply();\\n                    eoaInfo.setTaskName(eoaRecord.getTaskName());\\n                    eoaInfo.setTaskContent(eoaRecord.getTaskContent());\\n                    if (StringUtils.isNotBlank(releaseApplyId)) {\\n                        if (proxyApply != null \\u0026\\u0026 proxyApply \\u0026\\u0026 eoaRecord.getTaskStatus() \\u003e EoaTaskStatusEnum.INIT.getCode()) {\\n                            eoaInfo.setApproveChain(StringUtils.substringAfter(eoaRecord.getApproveChain(), \\\"→\\\"));\\n                            eoaInfo.setApproveChainName(StringUtils.substringAfter(eoaRecord.getApproveChainName(), \\\"→\\\"));\\n                        } else {\\n                            eoaInfo.setApproveChain(eoaRecord.getApproveChain());\\n                            eoaInfo.setApproveChainName(eoaRecord.getApproveChainName());\\n                        }\\n                    } else if (ReleaseApplyStatus.saved == sprintDO.getReleaseApplyStatus()) {\\n                        String approveConf = releaseApply.getApproveConf();\\n                        List\\u003cApprovePersonConf\\u003e approvePersonConfs = JSONArray.parseArray(approveConf, ApprovePersonConf.class);\\n                        EoaInfo eoaInfoOther = eoaInfoFilterStatus(approvePersonConfs, eoaApprovePersonDAO);\\n                        eoaInfo.setApproveChain(eoaInfoOther.getApproveChain());\\n                        eoaInfo.setApproveChainName(eoaInfoOther.getApproveChainName());\\n                    } else if (releaseApply != null \\u0026\\u0026 StringUtils.isNotBlank(releaseApply.getApproveConf()) \\u0026\\u0026 !(ReleaseApplyType.first == releaseApply.getReleaseApplyType() \\u0026\\u0026 notFirst)) {\\n                        //拿出上次的配置\\n                        String approveConf = releaseApply.getApproveConf();\\n                        List\\u003cApprovePersonConf\\u003e approvePersonConfs = JSONArray.parseArray(approveConf, ApprovePersonConf.class);\\n                        EoaInfo eoaInfoOther = eoaInfoFilterStatus(approvePersonConfs, eoaApprovePersonDAO);\\n                        eoaInfo.setApproveChain(eoaInfoOther.getApproveChain());\\n                        eoaInfo.setApproveChainName(eoaInfoOther.getApproveChainName());\\n                    } else {\\n                        //审批人员配置快照\\n                        List\\u003cApprovePersonConf\\u003e approvePersonConfs = getApprovePersonDefault(sprintId, sprintDO.getSprintType(), notFirst, isBusiness);\\n                        EoaInfo eoaInfoOther = eoaInfoFilterStatus(approvePersonConfs, eoaApprovePersonDAO);\\n                        eoaInfo.setApproveChain(eoaInfoOther.getApproveChain());\\n                        eoaInfo.setApproveChainName(eoaInfoOther.getApproveChainName());\\n                    }\\n\\n                    List\\u003cEoaAttachments\\u003e attachments = eoaAttachmentsDAO.selectEoaAttachmentsByEoaRecordId(eoaRecord.getId());\\n                    List\\u003cAttachment\\u003e attachs = new ArrayList\\u003c\\u003e();\\n                    for(EoaAttachments item : attachments) {\\n                    \\tAttachment att = new Attachment();\\n                    \\tatt.setFileName(item.getFileName());\\n                    \\tatt.setFileSize(item.getFileSize());\\n                    \\tatt.setIobsKey(item.getIobsKey());\\n                    \\tatt.setResourceId(item.getResourceId());\\n                    \\tattachs.add(att);\\n                    }\\n                    eoaInfo.setAttachments(attachs);\\n                    submitApplyView.setEoaInfo(eoaInfo);\\n\\n                    EoaMessage eoaMessage = eoaMessageDAO.selectByRecordId(eoaRecord.getId());\\n                    if (eoaMessage != null \\u0026\\u0026 StringUtils.isNotBlank(eoaMessage.getResponse())) {\\n                        EoaOrderVo eoaOrderVo = JSONObject.parseObject(eoaMessage.getResponse(), EoaOrderVo.class);\\n                        submitApplyView.setTaskDetail(eoaOrderVo.getTaskDetail());\\n                    }\\n                    submitApplyView.setProxyApply(proxyApply);\\n                    if (proxyApply != null \\u0026\\u0026 proxyApply) {\\n                        submitApplyView.setProxyUser(eoaRecord.getSubmitUser());\\n                    }\\n                }\\n            }else{\\n                List\\u003cApprovePersonConf\\u003e approvePersonConfs = getApprovePersonDefault(sprintId, sprintDO.getSprintType(), notFirst, isBusiness);\\n                EoaInfo eoaInfo = eoaInfoFilterStatus(approvePersonConfs, eoaApprovePersonDAO);\\n                eoaInfo.setApproveChain(null);\\n                submitApplyView.setEoaInfo(eoaInfo);\\n            }\\n            ReleaseOrderCfg releaseOrderCfg = submitApplyView.getReleaseOrderCfg() != null ? submitApplyView.getReleaseOrderCfg() : ReleaseOrderCfg.none;\\n            List\\u003cReleaseOrderList\\u003e releaseOrderLists = querySimpleReleaseOrderList(sprintId, releaseOrderCfg);\\n            submitApplyView.setReleaseOrderList(releaseOrderLists);\\n        }\\n        return submitApplyView;\\n    }\\n\\n    public static EoaInfo eoaInfoFilterStatus(List\\u003cApprovePersonConf\\u003e approvePersonConfs, EoaApprovePersonDAO eoaApprovePersonDAO) {\\n        List\\u003cApprovePersonConf\\u003e approvePersonConfsFilter = new ArrayList\\u003c\\u003e();\\n        for (ApprovePersonConf approvePersonConf : approvePersonConfs) {\\n            List\\u003cString\\u003e personList = new ArrayList\\u003c\\u003e();\\n            for (String um : approvePersonConf.getApprovePersonList()) {\\n                String approveUm = \\\"PAICDOM\\\\\\\\\\\\\\\\\\\" + StringUtils.substringBetween(um, \\\"\\u003c\\\", \\\"\\u003e\\\");\\n                EoaApprovePersonDO eoaApprovePersonDO = eoaApprovePersonDAO.selectByApproveUm(approveUm);\\n                if (eoaApprovePersonDO.getPersonStatus() == true) {\\n                    personList.add(um);\\n                }\\n            }\\n            if (personList.size() == 0) {\\n                PrimaryLabelEnum approveFlow = approvePersonConf.getApproveFlow();\\n                if ((PrimaryLabelEnum.team == approveFlow\\n                        || PrimaryLabelEnum.business == approveFlow || PrimaryLabelEnum.cto == approveFlow)) {\\n                    approvePersonConf.setApprovePersonList(personList);\\n                    approvePersonConfsFilter.add(approvePersonConf);\\n                }\\n            } else {\\n                approvePersonConf.setApprovePersonList(personList);\\n                approvePersonConfsFilter.add(approvePersonConf);\\n            }\\n        }\\n        return parseEoaInfo(approvePersonConfsFilter);\\n    }\\n\\n\\n    public static EoaInfo parseEoaInfo(List\\u003cApprovePersonConf\\u003e approvePersonConfs) {\\n        StringBuffer approveChain = new StringBuffer();\\n        StringBuffer approveChainName = new StringBuffer();\\n        //优先处理非传阅\\n        List\\u003cApprovePersonConf\\u003e collect = approvePersonConfs.stream().filter(Objects::nonNull)\\n                .filter(a-\\u003e{\\n                    //如果是业务审批但没有人员，则过滤\\n                    if (PrimaryLabelEnum.business == a.getApproveFlow()) {\\n                        if (!CollectionUtils.isEmpty(a.getApprovePersonList()) \\u0026\\u0026 a.getApprovePersonList().size() \\u003e 0) {\\n                            return true;\\n                        }\\n                        return false;\\n                    }\\n                    return true;\\n                }).filter(item -\\u003e item.getApproveType() != ApproveTypeEnum.circulation).collect(Collectors.toList());\\n        for (int i = 0; i \\u003c collect.size(); i++) {\\n            ApprovePersonConf approvePersonConf = collect.get(i);\\n            ApproveTypeEnum approveType = approvePersonConf.getApproveType();\\n            String type = \\\"\\\";\\n            if (ApproveTypeEnum.collaborativeApprove == approveType) {\\n                type = \\\"/\\\";\\n            } else if (ApproveTypeEnum.parallelApproval == approveType) {\\n                type = \\\"|\\\";\\n            } else if (ApproveTypeEnum.singleApprove == approveType \\u0026\\u0026 approvePersonConf.getApprovePersonList().size() \\u003e 1) {\\n                AssertUtil.isTrue(false,PARAM_ILLEGAL,\\\"审批配置错误,单人审批不能配置多个人员！\\\");\\n            }\\n            List\\u003cString\\u003e approvePersonList = approvePersonConf.getApprovePersonList();\\n            for (int i1 = 0; i1 \\u003c approvePersonList.size(); i1++) {\\n                String s = approvePersonList.get(i1);\\n                String name = StringUtils.substringBefore(s, \\\"\\u003c\\\");\\n                String um = StringUtils.substringBetween(s, \\\"\\u003c\\\", \\\"\\u003e\\\");\\n                if (i1 == 0) {\\n                    //如果是第一个\\n                    approveChain.append(\\\"PAICDOM\\\\\\\\\\\" + um);\\n                    approveChainName.append(name);\\n                } else {\\n                    approveChain.append(type).append(\\\"PAICDOM\\\\\\\\\\\" + um);\\n                    approveChainName.append(type).append(name);\\n                }\\n            }\\n            //最后一个不拼接步骤符号\\n            if (i != collect.size() - 1 \\u0026\\u0026 !CollectionUtils.isEmpty(approvePersonList) \\u0026\\u0026 approvePersonList.size() \\u003e 0) {\\n                approveChain.append(\\\"→\\\");\\n                approveChainName.append(\\\"→\\\");\\n            }\\n        }\\n        //拼接传阅\\n        approvePersonConfs.stream().filter(item -\\u003e item.getApproveType() == ApproveTypeEnum.circulation).forEach(item-\\u003e{\\n            item.getApprovePersonList().forEach(i-\\u003e{\\n                String name = StringUtils.substringBefore(i, \\\"\\u003c\\\");\\n                String um = StringUtils.substringBetween(i, \\\"\\u003c\\\", \\\"\\u003e\\\");\\n                approveChain.append(\\\"§\\\").append(\\\"PAICDOM\\\\\\\\\\\" + um);\\n                approveChainName.append(\\\"§\\\").append(name);\\n            });\\n        });\\n        EoaInfo eoaInfo = new EoaInfo();\\n        eoaInfo.setApproveChain(approveChain.toString());\\n        eoaInfo.setApproveChainName(approveChainName.toString());\\n        return eoaInfo;\\n    }\\n\\n\\n    @Override\\n    public List\\u003cApprovePersonConf\\u003e getApprovePersonDefault(String sprintId, int sprintType, Boolean notFirst, boolean isBusiness) {\\n        List\\u003cApprovePersonConf\\u003e approvePersonConfs = new ArrayList\\u003c\\u003e();\\n        //得到所有和此半分相关的team\\n        List\\u003cAppOfSprintDO\\u003e appOfSprintDOS = sprintDAO.queryAppOfSprintListById(sprintId);\\n        List\\u003cString\\u003e teams = appOfSprintDOS.stream().map(AppOfSprintDO::getApp).map(applicationDAO::queryApplicationByName).map(ApplicationDO::getTeam).filter(StringUtils::isNotBlank).distinct().collect(Collectors.toList());\\n        List\\u003cEoaApprovePersonDO\\u003e eoaApprovePersonDOS = eoaApprovePersonDAO.selectByLabel(PrimaryLabelEnum.team);\\n        //筛选符合要求的项目负责人\\n        List\\u003cString\\u003e teamFilter = eoaApprovePersonDOS.stream().map(item -\\u003e {\\n            List\\u003cString\\u003e nodeTeamList = JSONArray.parseArray(item.getSecondaryLabel(), String.class);\\n            for (String nodeTeam : nodeTeamList) {\\n                if (teams.contains(nodeTeam)) {\\n                    return item;\\n                }\\n            }\\n            return null;\\n        }).filter(Objects::nonNull).distinct().map(i -\\u003e {\\n            String approveUm = i.getApproveUm();\\n            String um = StringUtils.substringAfter(approveUm, \\\"\\\\\\\\\\\\\\\\\\\");\\n            String approveName = i.getApproveName();\\n            return approveName + \\\"\\u003c\\\" + um + \\\"\\u003e\\\";\\n        }).collect(Collectors.toList());\\n        AssertUtil.isTrue(teamFilter != null \\u0026\\u0026 teamFilter.size() \\u003e 0, BusinessErrorCode.PARAM_ILLEGAL, \\\"无法匹配到项目负责人！\\\");\\n        ApproveTypeEnum teamApproveType = teamFilter.size() == 1 ? ApproveTypeEnum.singleApprove : ApproveTypeEnum.parallelApproval;\\n        ApprovePersonConf teamApprovePersonConf = new ApprovePersonConf(0, PrimaryLabelEnum.team, teamApproveType, teamFilter);\\n        approvePersonConfs.add(teamApprovePersonConf);\\n        //非首次固定\\n        if (notFirst != null \\u0026\\u0026 notFirst) {\\n            //抄送运维人员\\n            List\\u003cEoaApprovePersonDO\\u003e eoaApprovePersonDOList = eoaApprovePersonDAO.selectByLabel(PrimaryLabelEnum.or);\\n            List\\u003cString\\u003e itNames = eoaApprovePersonDOList.stream().map(i -\\u003e {\\n                String approveName1 = i.getApproveUm();\\n                String um = StringUtils.substringAfter(approveName1, \\\"\\\\\\\\\\\\\\\\\\\");\\n                String approveName = i.getApproveName();\\n                return approveName + \\\"\\u003c\\\" + um + \\\"\\u003e\\\";\\n            }).collect(Collectors.toList());\\n            ApprovePersonConf itApprovePersonConf = new ApprovePersonConf(0, PrimaryLabelEnum.or, ApproveTypeEnum.circulation, itNames);\\n            approvePersonConfs.add(itApprovePersonConf);\\n            //抄送cto\\n            EoaApprovePersonDO eoaApprovePersonDO = eoaApprovePersonDAO.selectByLabel(PrimaryLabelEnum.cto).get(0);\\n            String approveUm = eoaApprovePersonDO.getApproveUm();\\n            String ctoName = eoaApprovePersonDO.getApproveName() + \\\"\\u003c\\\" + StringUtils.substringAfter(approveUm, \\\"\\\\\\\\\\\\\\\\\\\") + \\\"\\u003e\\\";\\n            ApprovePersonConf ctoApprovePersonConf = new ApprovePersonConf(0, PrimaryLabelEnum.or, ApproveTypeEnum.circulation, Arrays.asList(ctoName));\\n            approvePersonConfs.add(ctoApprovePersonConf);\\n        }else{\\n            //首次\\n            //常规版本\\n            if (sprintType == 1 || isBusiness) {\\n                //业务人员默认为空，等待选择后填充\\n                ApprovePersonConf businessApprovePersonConf = new ApprovePersonConf(0, PrimaryLabelEnum.business, ApproveTypeEnum.singleApprove, new ArrayList\\u003c\\u003e());\\n                approvePersonConfs.add(businessApprovePersonConf);\\n            }\\n            //cto审批\\n            EoaApprovePersonDO eoaApprovePersonDO = eoaApprovePersonDAO.selectByLabel(PrimaryLabelEnum.cto).get(0);\\n            String approveUm = eoaApprovePersonDO.getApproveUm();\\n            String ctoName = eoaApprovePersonDO.getApproveName() + \\\"\\u003c\\\" + StringUtils.substringAfter(approveUm, \\\"\\\\\\\\\\\\\\\\\\\") + \\\"\\u003e\\\";\\n            ApprovePersonConf ctoApprovePersonConf = new ApprovePersonConf(0, PrimaryLabelEnum.cto, ApproveTypeEnum.singleApprove, Arrays.asList(ctoName));\\n            approvePersonConfs.add(ctoApprovePersonConf);\\n            //抄送运维人员\\n            List\\u003cEoaApprovePersonDO\\u003e eoaApprovePersonDOList = eoaApprovePersonDAO.selectByLabel(PrimaryLabelEnum.or);\\n            List\\u003cString\\u003e itNames = eoaApprovePersonDOList.stream().map(i -\\u003e {\\n                String approveName1 = i.getApproveUm();\\n                String um = StringUtils.substringAfter(approveName1, \\\"\\\\\\\\\\\\\\\\\\\");\\n                String approveName = i.getApproveName();\\n                return approveName + \\\"\\u003c\\\" + um + \\\"\\u003e\\\";\\n            }).collect(Collectors.toList());\\n            ApprovePersonConf itApprovePersonConf = new ApprovePersonConf(0, PrimaryLabelEnum.or, ApproveTypeEnum.circulation, itNames);\\n            approvePersonConfs.add(itApprovePersonConf);\\n        }\\n\\n        int order = 0;\\n        for (ApprovePersonConf approvePersonConf : approvePersonConfs) {\\n            approvePersonConf.setOrder(++order);\\n        }\\n        return approvePersonConfs;\\n    }\\n\\n    @Override\\n    public List\\u003cApprovePersonConf\\u003e queryApprovePersonConfFilter(String sprintId) {\\n        List\\u003cApprovePersonConf\\u003e approvePersonConfsFilter = new ArrayList\\u003c\\u003e();\\n        List\\u003cApprovePersonConf\\u003e approvePersonConfs = queryApprovePersonConf(sprintId);\\n        log.info(\\\"queryApprovePersonConf: {} \\\", approvePersonConfs);\\n        for (ApprovePersonConf approvePersonConf : approvePersonConfs) {\\n            List\\u003cString\\u003e personList = new ArrayList\\u003c\\u003e();\\n            for (String um : approvePersonConf.getApprovePersonList()) {\\n                String approveUm = \\\"PAICDOM\\\\\\\\\\\\\\\\\\\" + StringUtils.substringBetween(um, \\\"\\u003c\\\", \\\"\\u003e\\\");\\n                EoaApprovePersonDO eoaApprovePersonDO = eoaApprovePersonDAO.selectByApproveUm(approveUm);\\n                if (eoaApprovePersonDO.getPersonStatus() == true) {\\n                    personList.add(um);\\n                }\\n            }\\n            if (personList.size() == 0) {\\n                PrimaryLabelEnum approveFlow = approvePersonConf.getApproveFlow();\\n                if ((PrimaryLabelEnum.team == approveFlow\\n                        || PrimaryLabelEnum.business == approveFlow || PrimaryLabelEnum.cto == approveFlow)) {\\n                    approvePersonConf.setApprovePersonList(personList);\\n                    approvePersonConfsFilter.add(approvePersonConf);\\n                }\\n            } else {\\n                approvePersonConf.setApprovePersonList(personList);\\n                approvePersonConfsFilter.add(approvePersonConf);\\n            }\\n        }\\n        return approvePersonConfsFilter;\\n    }\\n\\n    @Override\\n    public List\\u003cApprovePersonConf\\u003e queryApprovePersonConf(String sprintId) {\\n        ReleaseApply releaseApply = releaseApplyDAO.selectOneBySprintId(sprintId);\\n        Boolean notFirst = isNotFirst(sprintId);\\n\\n        //审批人员配置快照\\n        List\\u003cApprovePersonConf\\u003e approvePersonConfs = new ArrayList\\u003c\\u003e();\\n        if (releaseApply != null \\u0026\\u0026 ReleaseApplyStatus.saved == releaseApply.getReleaseApplyStatus()) {\\n            approvePersonConfs = JSONObject.parseArray(releaseApply.getApproveConf(), ApprovePersonConf.class);\\n            return approvePersonConfs;\\n        }\\n\\n        if (releaseApply != null \\u0026\\u0026 StringUtils.isNotBlank(releaseApply.getApproveConf()) \\u0026\\u0026 ReleaseApplyType.first == releaseApply.getReleaseApplyType() \\u0026\\u0026 notFirst) {\\n            SprintDO sprintDO = sprintDAO.querySprintById(sprintId);\\n            String sprintClassify = sprintDO.getSprintClassify();\\n            boolean isBusiness = StringUtils.isNotBlank(sprintClassify) ? JSONArray.parseArray(sprintClassify, SprintClassify.class).contains(SprintClassify.demand) : true;\\n            approvePersonConfs = getApprovePersonDefault(sprintId, sprintDO.getSprintType(), notFirst, isBusiness);\\n            return approvePersonConfs;\\n        }\\n\\n        if (releaseApply != null \\u0026\\u0026 StringUtils.isNotBlank(releaseApply.getApproveConf()) \\u0026\\u0026 !(ReleaseApplyType.first == releaseApply.getReleaseApplyType() \\u0026\\u0026 notFirst)) {\\n            approvePersonConfs = JSONObject.parseArray(releaseApply.getApproveConf(), ApprovePersonConf.class);\\n            return approvePersonConfs;\\n        }\\n        //非首次或未配置给默认审批配置\\n        if (releaseApply == null || StringUtils.isBlank(releaseApply.getApproveConf())) {\\n            SprintDO sprintDO = sprintDAO.querySprintById(sprintId);\\n            String sprintClassify = sprintDO.getSprintClassify();\\n            boolean isBusiness = StringUtils.isNotBlank(sprintClassify) ? JSONArray.parseArray(sprintClassify, SprintClassify.class).contains(SprintClassify.demand) : true;\\n            approvePersonConfs = getApprovePersonDefault(sprintId, sprintDO.getSprintType(), notFirst, isBusiness);\\n        } else {\\n            approvePersonConfs = JSONObject.parseArray(releaseApply.getApproveConf(), ApprovePersonConf.class);\\n        }\\n        return approvePersonConfs;\\n    }\\n\\n    @Override\\n    public Boolean isNotFirst(String sprintId) {\\n        List\\u003cReleaseApply\\u003e releaseApplies = releaseApplyDAO.selectBySprintIdAndPass(sprintId);\\n        return releaseApplies != null \\u0026\\u0026 releaseApplies.size() \\u003e 0;\\n    }\\n\\n    private Boolean checkOutTime(String ssdlcTime) {\\n        if (StringUtils.isNotBlank(ssdlcTime)) {\\n            SsdlcConf ssdlcConf = centerConfig.getObject(Constants.SSDLC_CONFIG, SsdlcConf.class);\\n            AssertUtil.isTrue(ssdlcConf.getNum() \\u003e 0, PARAM_ILLEGAL, \\\"ssdlcConf中配置的num必须大于0\\\");\\n            Date ssdlcTimeDate = DateUtils.parseTime(ssdlcTime);\\n            Date date = DateUtils.add(ssdlcConf.getCalendar(), ~(ssdlcConf.getNum() - 1));\\n            //超过*时间未收到结果\\n            return date.compareTo(ssdlcTimeDate) \\u003e 0;\\n        }\\n        return true;\\n    }\\n\\n    @Override\\n    public void startSsdlc(SsdlcRequest request) {\\n        log.info(\\\"start ssdlc request params: {}\\\", request);\\n        String branch = StringUtils.substringAfterLast(request.getGitUrl(), \\\"?branch=\\\");\\n        AssertUtil.notBlank(branch, PARAM_ILLEGAL, \\\"gitUrl格式不合法\\\");\\n        String curTime = DateUtils.getCurTime();\\n        List\\u003cAppOfSprintDO\\u003e appOfSprintDOList = sprintDAO.queryAppOfSprintByAppAndBranch(request.getModuleName(), branch);\\n        AssertUtil.isTrue(!CollectionUtils.isEmpty(appOfSprintDOList) \\u0026\\u0026 appOfSprintDOList.size() \\u003e 0, PARAM_ILLEGAL, \\\"无AppOfSprintDO数据！\\\");\\n        try {\\n            //检查\\n            AppOfSprintDO appOfSprintDO = appOfSprintDOList.get(0);\\n            Boolean checkResult = true;\\n            if (SSDLCStatusEnum.non == appOfSprintDO.getSsdlcStatus() || SSDLCStatusEnum.failed == appOfSprintDO.getSsdlcStatus()) {\\n                //失败 或 未扫描\\n                checkResult = false;\\n            } else if (checkOutTime(appOfSprintDO.getSsdlcTime())) {\\n                //当日成功/扫描中 但超时\\n                checkResult = false;\\n            }\\n            log.info(\\\"ssdlc check result,appName: {},branch: {},result: {}\\\", request.getModuleName(), branch, checkResult);\\n            if (!checkResult) {\\n                //init\\n                List\\u003cTuple2\\u003cInteger, Integer\\u003e\\u003e initResult = new ArrayList\\u003c\\u003e();\\n                for (AppOfSprintDO aos : appOfSprintDOList) {\\n                    Tuple2\\u003cInteger, Integer\\u003e tup = sprintRepository.InitAppSsdlcDetailDO(aos.getSprintId(), request.getModuleName(), curTime);\\n                    initResult.add(tup);\\n                }\\n                SsdlcResponse ssdlcResponse = ssdlcApiClient.acceptMergeRequest(request);\\n                log.info(\\\"ssdlc扫描请求状态码 :\\\" + ssdlcResponse.getCode() + \\\",服务为 :\\\" + request.getModuleName());\\n                AssertUtil.isTrue(ssdlcResponse.getCode() == 200, PARAM_ILLEGAL, \\\"请求ssdlc扫描，接口返回状态码不是200！\\\");\\n                sprintRepository.updateAppSsdlcDetailDO(initResult, ssdlcResponse.getData());\\n                sprintDAO.changeSsdlcStatusOther(request.getModuleName(), branch, SSDLCStatusEnum.scanning);\\n            }\\n        } catch (Exception e) {\\n            appSsdlcDetailDao.changeStatus(curTime, SSDLCStatusEnum.failed);\\n            sprintDAO.changeSsdlcStatusOther(request.getModuleName(), branch, SSDLCStatusEnum.failed);\\n            log.error(\\\"发起ssdlc扫描异常,\\\", e);\\n//            AssertUtil.isTrue(false, PARAM_ILLEGAL, \\\"发起ssdlc扫描异常\\\");\\n        }\\n    }\\n\\n    @Override\\n    public void sendSsdlcMsg(SsdlcRequest request) {\\n        log.info(\\\"send ssdlc request params: {}\\\", request);\\n        String branch = StringUtils.substringAfterLast(request.getGitUrl(), \\\"?branch=\\\");\\n        AssertUtil.notBlank(branch, PARAM_ILLEGAL, \\\"gitUrl格式不合法\\\");\\n        List\\u003cAppOfSprintDO\\u003e appOfSprintDOList = sprintDAO.queryAppOfSprintByAppAndBranch(request.getModuleName(), branch);\\n        AssertUtil.isTrue(!CollectionUtils.isEmpty(appOfSprintDOList) \\u0026\\u0026 appOfSprintDOList.size() \\u003e 0, PARAM_ILLEGAL, \\\"无AppOfSprintDO数据！\\\");\\n\\n        AppOfSprintDO appOfSprintDO = appOfSprintDOList.get(0);\\n\\n        SsdlcReqMsg ssdlcReqMsg = new SsdlcReqMsg();\\n        BeanUtils.copyProperties(request, ssdlcReqMsg);\\n        // 本次扫描时间+ 4小时 = 下次扫描时间\\n        SsdlcConf ssdlcConf = centerConfig.getObject(Constants.SSDLC_CONFIG, SsdlcConf.class);\\n\\n        if (SSDLCStatusEnum.non == appOfSprintDO.getSsdlcStatus() || SSDLCStatusEnum.failed == appOfSprintDO.getSsdlcStatus()) {\\n            //失败 或 未扫描\\n            ssdlcReqMsg.setNextScanTime(new Date());\\n        } else if (StringUtils.isNotBlank(appOfSprintDO.getSsdlcTime())) {\\n            //下次扫描时间\\n            Date ssdlcTimeDate = DateUtils.parseTime(appOfSprintDO.getSsdlcTime());\\n            Calendar calendar = Calendar.getInstance();\\n            calendar.setTime(ssdlcTimeDate);\\n            calendar.add(ssdlcConf.getCalendar(), ssdlcConf.getNum());\\n            Date nextScanTime = calendar.getTime();\\n            ssdlcReqMsg.setNextScanTime(nextScanTime);\\n        } else {\\n            ssdlcReqMsg.setNextScanTime(new Date());\\n        }\\n        log.info(\\\"send ssdlc request , appName: {}, branch: {}, nextScanTime: {}\\\", request.getModuleName(), branch, ssdlcReqMsg.getNextScanTime());\\n        eventSenderService.sendSSDLCScanMessage(ssdlcReqMsg);\\n\\n    }\\n\\n    @Override\\n    public Tuple2\\u003cSprintView, List\\u003cSprintFeatureView\\u003e\\u003e querySprintAndFeature(String sprintId) {\\n        //sprint\\n        SprintDO sprintDO = sprintDAO.querySprintById(sprintId);\\n        AssertUtil.notNull(sprintDO, PARAM_ILLEGAL, \\\"版本不存在\\\");\\n        SprintView sprintView = new SprintView();\\n        sprintView.setName(sprintDO.getSprintName());\\n        sprintView.setDescription(sprintDO.getDescription());\\n        sprintView.setReleaseDate(sprintDO.getReleaseDate());\\n        sprintView.setSprintType(sprintDO.getSprintType());\\n        sprintView.setWizardPlanId(sprintDO.getWizardPlanId());\\n        sprintView.setSprintClassify(sprintDO.getSprintClassify() == null ? null :\\n                (List\\u003cSprintClassify\\u003e) JSON.parseObject(sprintDO.getSprintClassify(), List.class).stream()\\n                        .map(item -\\u003e SprintClassify.valueOf(item.toString())).collect(Collectors.toList()));\\n        //feature\\n        List\\u003cSprintFeatureView\\u003e sprintFeatureViews = new ArrayList\\u003c\\u003e();\\n        List\\u003cSprintFeatureDO\\u003e sprintFeatureDOS = sprintFeatureDao.selectBySprintId(sprintId);\\n        for (SprintFeatureDO sprintFeatureDO : sprintFeatureDOS) {\\n            SprintFeatureView sprintFeatureView = new SprintFeatureView();\\n            sprintFeatureView.setId(sprintFeatureDO.getId());\\n            sprintFeatureView.setSprintId(sprintFeatureDO.getSprintId());\\n            sprintFeatureView.setFeatureName(sprintFeatureDO.getFeatureName());\\n            sprintFeatureView.setFeatureId(sprintFeatureDO.getFeatureId());\\n            sprintFeatureView.setIdeaName(sprintFeatureDO.getIdeaName());\\n            sprintFeatureView.setIdeaId(sprintFeatureDO.getIdeaId());\\n            sprintFeatureView.setOwnerName(sprintFeatureDO.getOwnerName());\\n            sprintFeatureView.setOwnerUm(sprintFeatureDO.getOwnerUm());\\n            Date featureCreatedTime = sprintFeatureDO.getFeatureCreatedTime();\\n            sprintFeatureView.setFeatureCreatedTime(featureCreatedTime != null ? DateUtils.getTime(featureCreatedTime) : null);\\n            sprintFeatureView.setCreatedDate(DateUtils.getTime(sprintFeatureDO.getCreatedDate()));\\n\\n            //story\\n            List\\u003cSprintFeatureStoryView\\u003e storyList = new ArrayList\\u003c\\u003e();\\n            List\\u003cSprintFeatureStoryDO\\u003e sprintFeatureStoryDOS = sprintFeatureStoryDao.selectBySprintIdAndFeatureId(sprintId, sprintFeatureDO.getFeatureId());\\n            for (SprintFeatureStoryDO sprintFeatureStoryDO : sprintFeatureStoryDOS) {\\n                SprintFeatureStoryView sprintFeatureStoryView = new SprintFeatureStoryView();\\n                sprintFeatureStoryView.setFeatureId(sprintFeatureStoryDO.getFeatureId());\\n                sprintFeatureStoryView.setStoryName(sprintFeatureStoryDO.getStoryName());\\n                sprintFeatureStoryView.setStoryId(sprintFeatureStoryDO.getStoryId());\\n                sprintFeatureStoryView.setReleaseName(sprintFeatureStoryDO.getReleaseName());\\n                sprintFeatureStoryView.setOwnerUm(sprintFeatureStoryDO.getOwnerUm());\\n                Date storyCreatedTime = sprintFeatureStoryDO.getStoryCreatedTime();\\n                sprintFeatureStoryView.setStoryCreatedTime(storyCreatedTime != null ? DateUtils.getTime(storyCreatedTime) : null);\\n                storyList.add(sprintFeatureStoryView);\\n            }\\n            sprintFeatureView.setStoryList(storyList);\\n\\n            sprintFeatureViews.add(sprintFeatureView);\\n        }\\n        return Tuples.of(sprintView, sprintFeatureViews);\\n    }\\n\\n    @Override\\n    public List\\u003cSprintFeatureView\\u003e queryFeatureForRemote(String releaseName) {\\n        List\\u003cSprintFeatureView\\u003e list = new ArrayList\\u003c\\u003e();\\n        JSONObject response = null;\\n        FeatureResponse featureResponse = null;\\n        try {\\n            //remote\\n            response = codeApiClient.getFeatureList(null, releaseName, null);\\n            featureResponse = JSON.parseObject(response.toJSONString(), FeatureResponse.class);\\n            AssertUtil.isTrue(featureResponse.getHeader().getRet() == 0,SYSTEM_ERROR);\\n        } catch (Exception e) {\\n            if (featureResponse != null \\u0026\\u0026 featureResponse.getHeader() != null) {\\n                AssertUtil.isTrue(false, SYSTEM_ERROR, featureResponse.getHeader().getErrorMsg());\\n            }\\n            log.info(\\\"查询特性异常:\\\", e);\\n            AssertUtil.isTrue(false, SYSTEM_ERROR, \\\"调用神兵查询特性失败\\\");\\n        }\\n        for (Data data : featureResponse.getData()) {\\n            //feature\\n            SprintFeatureView sprintFeatureView = new SprintFeatureView();\\n            sprintFeatureView.setFeatureId(data.getId());\\n            sprintFeatureView.setFeatureName(data.getName());\\n            sprintFeatureView.setIdeaId(data.getParentId());\\n            sprintFeatureView.setIdeaName(data.getParentName());\\n            sprintFeatureView.setOwnerUm(data.getOwner());\\n            sprintFeatureView.setOwnerName(data.getOwnerFullName());\\n            Long createdDate = data.getCreatedDate();\\n            sprintFeatureView.setFeatureCreatedTime(createdDate != null ? DateUtils.getTime(new Date(createdDate)) : null);\\n\\n            //story\\n            List\\u003cSprintFeatureStoryView\\u003e storyViews = new ArrayList\\u003c\\u003e();\\n            for (Children child : data.getChildren()) {\\n                SprintFeatureStoryView sprintFeatureStoryView = new SprintFeatureStoryView();\\n                sprintFeatureStoryView.setFeatureId(child.getParentId());\\n                sprintFeatureStoryView.setStoryId(child.getGlobalId());\\n                sprintFeatureStoryView.setStoryName(child.getName());\\n                sprintFeatureStoryView.setReleaseName(releaseName);\\n                sprintFeatureStoryView.setOwnerUm(child.getOwner());\\n                Long date = child.getcreatedDate();\\n                sprintFeatureStoryView.setStoryCreatedTime(date != null ? DateUtils.getTime(new Date(date)) : null);\\n                storyViews.add(sprintFeatureStoryView);\\n            }\\n            sprintFeatureView.setStoryList(storyViews);\\n            list.add(sprintFeatureView);\\n        }\\n        return list;\\n    }\\n\\n    @Override\\n    public void saveFeatureStory(SprintFeatureRequest request) {\\n        String userName = ThreadLocalHolder.getUserName();\\n        List\\u003cSprintFeatureDO\\u003e addSprintFeatureDOS = new ArrayList\\u003c\\u003e();\\n        List\\u003cSprintFeatureDO\\u003e updateSprintFeatureDOS = new ArrayList\\u003c\\u003e();\\n        List\\u003cSprintFeatureStoryDO\\u003e sprintFeatureStoryDOS = new ArrayList\\u003c\\u003e();\\n\\n        List\\u003cSprintFeatureView\\u003e sprintFeatureViewList = request.getSprintFeatureViewList();\\n        Boolean checkAccess = featureCheckAccess(request.getSprintId());\\n        AssertUtil.isTrue(checkAccess, BUSINESS_CHECK_EXCEPTION, \\\"只有版本创建人、应用参与人和项目负责人有权限编辑修改\\\");\\n\\n        for (SprintFeatureView sprintFeatureView : Optional.ofNullable(sprintFeatureViewList).orElse(new ArrayList\\u003c\\u003e())) {\\n            SprintFeatureDO sprintFeatureDO = new SprintFeatureDO();\\n            sprintFeatureDO.setSprintId(request.getSprintId());\\n            sprintFeatureDO.setFeatureId(sprintFeatureView.getFeatureId());\\n            sprintFeatureDO.setFeatureName(sprintFeatureView.getFeatureName());\\n            sprintFeatureDO.setIdeaId(sprintFeatureView.getIdeaId());\\n            sprintFeatureDO.setIdeaName(sprintFeatureView.getIdeaName());\\n            sprintFeatureDO.setOwnerUm(sprintFeatureView.getOwnerUm());\\n            sprintFeatureDO.setOwnerName(sprintFeatureView.getOwnerName());\\n            String featureCreatedTime = sprintFeatureView.getFeatureCreatedTime();\\n            sprintFeatureDO.setFeatureCreatedTime(StringUtils.isNotBlank(featureCreatedTime) ? DateUtils.parseTimeV2(featureCreatedTime) : null);\\n            sprintFeatureDO.setCreatedBy(userName);\\n            sprintFeatureDO.setUpdatedBy(userName);\\n            if (sprintFeatureView.getId() == null) {\\n                //需要插入的\\n                addSprintFeatureDOS.add(sprintFeatureDO);\\n            } else {\\n                //需要更新的\\n                updateSprintFeatureDOS.add(sprintFeatureDO);\\n\\n            }\\n            List\\u003cSprintFeatureStoryView\\u003e storyList = sprintFeatureView.getStoryList();\\n            if (!CollectionUtils.isEmpty(storyList) \\u0026\\u0026 storyList.size() \\u003e 0) {\\n                storyList.stream().distinct().forEach(sprintFeatureStoryView -\\u003e {\\n                    SprintFeatureStoryDO sprintFeatureStoryDO = new SprintFeatureStoryDO();\\n                    sprintFeatureStoryDO.setSprintId(request.getSprintId());\\n                    sprintFeatureStoryDO.setFeatureId(sprintFeatureView.getFeatureId());\\n                    sprintFeatureStoryDO.setStoryId(sprintFeatureStoryView.getStoryId());\\n                    sprintFeatureStoryDO.setStoryName(sprintFeatureStoryView.getStoryName());\\n                    sprintFeatureStoryDO.setReleaseName(sprintFeatureStoryView.getReleaseName());\\n                    sprintFeatureStoryDO.setOwnerUm(sprintFeatureStoryView.getOwnerUm());\\n                    String storyCreatedTime = sprintFeatureStoryView.getStoryCreatedTime();\\n                    sprintFeatureStoryDO.setStoryCreatedTime(StringUtils.isNotBlank(storyCreatedTime) ? DateUtils.parseTimeV2(storyCreatedTime) : null);\\n                    sprintFeatureStoryDO.setCreatedBy(userName);\\n                    sprintFeatureStoryDO.setUpdatedBy(userName);\\n                    sprintFeatureStoryDOS.add(sprintFeatureStoryDO);\\n                });\\n            }\\n\\n        }\\n        List\\u003cSprintFeatureDO\\u003e featureDOList = sprintFeatureDao.selectBySprintId(request.getSprintId());\\n        List\\u003cString\\u003e featureList = featureDOList.stream().map(SprintFeatureDO::getFeatureId).collect(Collectors.toList());\\n        List\\u003cString\\u003e requestFeatureList = Optional.ofNullable(sprintFeatureViewList).orElse(new ArrayList\\u003c\\u003e()).stream().map(SprintFeatureView::getFeatureId).collect(Collectors.toList());\\n        //交集\\n        List\\u003cString\\u003e intersectionList = (List\\u003cString\\u003e) CollectionUtils.intersection(featureList, requestFeatureList);\\n        //需要删除的数据  差集\\n        List\\u003cString\\u003e delList  = (List\\u003cString\\u003e) CollectionUtils.subtract(featureList, intersectionList);\\n        List\\u003cLong\\u003e delFeatureIdList = new ArrayList\\u003c\\u003e();\\n        for (String featureId : delList) {\\n            SprintFeatureDO sprintFeatureDO = sprintFeatureDao.selectBySprintIdAndFeatureId(request.getSprintId(), featureId);\\n            if (sprintFeatureDO != null) {\\n                delFeatureIdList.add(sprintFeatureDO.getId());\\n            }\\n        }\\n        List\\u003cLong\\u003e delFeatureStoryIdList = new ArrayList\\u003c\\u003e();\\n        for (SprintFeatureDO sprintFeatureDO : featureDOList) {\\n            List\\u003cLong\\u003e list = sprintFeatureStoryDao.selectBySprintIdAndFeatureId(request.getSprintId(), sprintFeatureDO.getFeatureId()).stream().filter(Objects::nonNull).map(SprintFeatureStoryDO::getId).collect(Collectors.toList());\\n            delFeatureStoryIdList.addAll(list);\\n        }\\n        // batch save\\n        sprintRepository.saveFeatureAndStory(delFeatureIdList, delFeatureStoryIdList, addSprintFeatureDOS, updateSprintFeatureDOS,sprintFeatureStoryDOS);\\n    }\\n\\n    @Override\\n    @Transactional(rollbackFor = Exception.class)\\n    public void featureRelationRelieves(String featureId, String sprintId) {\\n        Boolean checkAccess = featureCheckAccess(sprintId);\\n        AssertUtil.isTrue(checkAccess, BUSINESS_CHECK_EXCEPTION, \\\"只有版本创建人、应用参与人和项目负责人有权限编辑修改\\\");\\n        try {\\n            sprintFeatureDao.deleteFeature(sprintId, featureId);\\n            sprintFeatureStoryDao.deleteByFeatureId(sprintId, featureId);\\n        } catch (Exception e) {\\n            log.error(\\\"删除特性和用户故事失败：\\\" + e.getMessage());\\n            AssertUtil.isTrue(false, SYSTEM_ERROR, \\\"解除关联异常\\\");\\n        }\\n    }\\n\\n    @Override\\n    public Boolean featureCheckAccess(String sprintId) {\\n        String um = ThreadLocalHolder.getUserName().toUpperCase();\\n        //版本创建人，应用参与人或负责人\\n        Boolean flag = false;\\n        SprintDO sprintDO = sprintDAO.querySprintById(sprintId);\\n        if (sprintDO != null) {\\n            flag = StringUtils.equalsIgnoreCase(um, sprintDO.getSprintCreator());\\n        }\\n        List\\u003cAppOfSprintDO\\u003e appOfSprintDOList = new ArrayList\\u003c\\u003e();\\n        if (!flag) {\\n            appOfSprintDOList = sprintDAO.queryAppOfSprintListById(sprintId);\\n            for (AppOfSprintDO appOfSprintDO : appOfSprintDOList) {\\n                if (JSONArray.parseArray(appOfSprintDO.getDevS(), String.class).contains(um) || JSONArray.parseArray(appOfSprintDO.getQaS(), String.class).contains(um)) {\\n                    flag = true;\\n                    break;\\n                }\\n            }\\n        }\\n        if (!flag) {\\n            for (AppOfSprintDO appOfSprintDO : appOfSprintDOList) {\\n                ApplicationDO applicationDO = applicationDAO.queryApplicationByName(appOfSprintDO.getApp());\\n                if (StringUtils.equalsIgnoreCase(applicationDO.getDevOwner(), um)) {\\n                    flag = true;\\n                    break;\\n                }\\n            }\\n        }\\n        return flag;\\n    }\\n\\n    @Override\\n    public int querySprintFeatureCount(String sprintId) {\\n        return sprintFeatureDao.countBySprintId(sprintId);\\n    }\\n\\n    @Override\\n    public List\\u003cSprintFeatureView\\u003e wizardPlanBind(String sprintId, String wizardPlan) {\\n        SprintDO sprintDO = sprintDAO.querySprintById(sprintId);\\n        AssertUtil.notNull(sprintDO, PARAM_ILLEGAL, \\\"sprintId无版本,请核实数据!!\\\");\\n        AssertUtil.blank(sprintDO.getWizardPlanId(), PARAM_ILLEGAL, \\\"该版本已经绑定神兵！\\\");\\n\\n        List\\u003cSprintFeatureView\\u003e sprintFeatureViewList = queryFeatureForRemote(wizardPlan);\\n        Map\\u003cString, String\\u003e params = geneParams(BIND, wizardPlan, sprintDO);\\n        kafkaProducerService.sendMsgForSprintWizardEvent(params);\\n        sprintDAO.updateSprintWizardPlanId(sprintId, wizardPlan);\\n        return sprintFeatureViewList;\\n    }\\n\\n\\n    @Override\\n    public void wizardPlanUnBind(String sprintId) {\\n        SprintDO sprintDO = sprintDAO.querySprintById(sprintId);\\n        if (sprintDO != null \\u0026\\u0026 StringUtils.isNotBlank(sprintDO.getWizardPlanId())) {\\n            Map\\u003cString, String\\u003e params = geneParams(UN_BIND, sprintDO.getWizardPlanId(), sprintDO);\\n            kafkaProducerService.sendMsgForSprintWizardEvent(params);\\n            sprintRepository.deleteSprintOfWizardRelation(sprintId);\\n        }\\n    }\\n\\n    @Override\\n    public List\\u003cEntranceGuardDataView\\u003e queryEntranceGuardSimpleInfoOfApp(Sprint sprint, AppOfSprint appOfSprint) {\\n        List\\u003cEntranceGuardDataView\\u003e entranceGuardResultList = new ArrayList\\u003c\\u003e();\\n        Application application = applicationRepository.queryByAppName(appOfSprint.getApp());\\n        //方向管控\\n        if (centerConfig.getEntranceGuardConf(Constants.ENTRANCE_GUARD_TEAMS_KEY).contains(application.getTeam())) {\\n            EntranceGuardRecordDO entranceGuardRecordDO = entranceGuardRecordDao.selectBySprintIdAndApp(sprint.getSprintId(), appOfSprint.getApp());\\n            if (entranceGuardRecordDO != null) {\\n                List\\u003cEntranceGuardDetailDO\\u003e entranceGuardDetailDOList = entranceGuardDetailDao.selectByRecordId(entranceGuardRecordDO.getEntranceGuardRecordId());\\n                if (entranceGuardDetailDOList != null \\u0026\\u0026 entranceGuardDetailDOList.size() \\u003e 0) {\\n                    for (EntranceGuardDetailDO entranceGuardDetailDO : entranceGuardDetailDOList) {\\n                        //场景管控\\n                        if (centerConfig.getEntranceGuardConf(Constants.ENTRANCE_GUARD_SCENARIO_KEY).contains(entranceGuardDetailDO.getType())) {\\n                            String description = EntranceGuardEnum.getDescByName(entranceGuardDetailDO.getType());\\n                            EntranceGuardDataView entranceGuardDataView = new EntranceGuardDataView(description,\\n                                    entranceGuardDetailDO.getIssueDataUrl(), entranceGuardDetailDO.getIssueCount(),\\n                                    new SimpleDateFormat(\\\"yyyy-MM-dd HH:mm\\\").format(entranceGuardDetailDO.getCreatedDate()));\\n                            entranceGuardResultList.add(entranceGuardDataView);\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        return entranceGuardResultList;\\n    }\\n\\n\\n    @Override\\n    public void querySsdlcRecord(String springId, String appName, AppOfSprintView appOfSprintView) {\\n        AppOfSprintDO appOfSprintDO = sprintDAO.queryAppOfSprintByNameAndId(springId, appName);\\n        List\\u003cSsdlcSimpleRecord\\u003e list = new ArrayList\\u003c\\u003e();\\n        if (appOfSprintDO != null) {\\n            if (SSDLCStatusEnum.success == appOfSprintDO.getSsdlcStatus()) {\\n                List\\u003cAppSsdlcDetailDO\\u003e appSsdlcDetailDOS = appSsdlcDetailDao.selectBySprintIdAndAppNameAndSsdlcTime(springId, appName, appOfSprintDO.getSsdlcTime());\\n                list = appSsdlcDetailDOS.stream().map(item -\\u003e SsdlcSimpleRecord.builder()\\n                        .type(item.getScanJobType())\\n                        .issueDataUrl(item.getIssueDataUrl())\\n                        .criticalCount(item.getCriticalCount())\\n                        .highCount(item.getHighCount())\\n                        .mediumCount(item.getMediumCount())\\n                        .lowCount(item.getLowCount())\\n                        .createdDate(item.getCreatedDate())\\n                        .updatedDate(item.getUpdatedDate())\\n                        .build()).collect(Collectors.toList());\\n            }\\n            appOfSprintView.setSsdlcStatus(appOfSprintDO.getSsdlcStatus());\\n        } else {\\n            appOfSprintView.setSsdlcStatus(SSDLCStatusEnum.non);\\n        }\\n        appOfSprintView.setSsdlcRecordList(list);\\n    }\\n\\n    private void toCreateBranch(AppOfSprint appOfSprint){\\n        LogUtil.info(log,\\\"toCreateBranch appName:\\\",appOfSprint.getApp(),\\\";status:\\\",appOfSprint.getStatus().getName());\\n        if (appOfSprint.getStatus() == AppOfSprintStatus.INIT) {\\n            String repositoryId = codeApiClient.getRepositoryId(appOfSprint.getCodeRepository());\\n            AssertUtil.notBlank(repositoryId, BusinessErrorCode.GIT_ADDR_ILLEGAL);\\n            JSONObject js = codeApiClient.createBranch(Integer.valueOf(repositoryId), appOfSprint.getCodeBranch());\\n            LogUtil.info(log, \\\"create application branch:\\\",appOfSprint.getApp(), \\\",result:\\\",js);\\n            int retValue = js.getJSONObject(\\\"header\\\").getInteger(\\\"ret\\\");\\n            //创建分支：100-该分支已存在；删除分支：100-分支不存在\\n            if (100 == retValue){\\n//                codeApiClient.deleteBranch(Integer.valueOf(repositoryId), appOfSprint.getCodeBranch());\\n//                js = codeApiClient.createBranch(Integer.valueOf(repositoryId), appOfSprint.getCodeBranch());\\n//                LogUtil.info(log, \\\"seconde create application branch:\\\",appOfSprint.getApp(), \\\",result:\\\",js);\\n//                retValue = js.getJSONObject(\\\"header\\\").getInteger(\\\"ret\\\");\\n//                AssertUtil.isTrue(false, BusinessErrorCode.BRANCH_EXISTED);\\n                LogUtil.info(log, \\\"branch exist:applicationName:\\\",appOfSprint.getApp(), \\\",result:\\\",js);\\n            }\\n            AssertUtil.isTrue(0 == retValue, BusinessErrorCode.CODEAPI_CREATE_BRANCH_FAIL);\\n            JSONObject protectBranch = codeApiClient.setProtectBranch(repositoryId,appOfSprint.getCodeBranch(), Boolean.TRUE);\\n            AssertUtil.isTrue(0 == protectBranch.getJSONObject(\\\"header\\\").getInteger(\\\"ret\\\"), BusinessErrorCode.CODEAPI_PROTECT_BRANCH_FAIL);\\n        }\\n    }\\n\\n    private void toCreateSingleBranch(AppOfSprint appOfSprint, String sprintId, String appName){\\n        if (appOfSprint.getStatus() == AppOfSprintStatus.INIT) {\\n            String repositoryId = codeApiClient.getRepositoryId(appOfSprint.getCodeRepository());\\n            AssertUtil.notBlank(repositoryId, BusinessErrorCode.GIT_ADDR_ILLEGAL);\\n            JSONObject js = codeApiClient.createBranch(Integer.valueOf(repositoryId), appOfSprint.getCodeBranch());\\n            LogUtil.info(log, \\\"create application branch:\\\",appOfSprint.getApp(), \\\",result:\\\",js);\\n            int retValue = js.getJSONObject(\\\"header\\\").getInteger(\\\"ret\\\");\\n            //创建分支：100-该分支已存在；删除分支：100-分支不存在\\n            if (100 == retValue){\\n                sprintRepository.updateSingleSpringToStartStatus(sprintId, appName);\\n//                codeApiClient.deleteBranch(Integer.valueOf(repositoryId), appOfSprint.getCodeBranch());\\n//                js = codeApiClient.createBranch(Integer.valueOf(repositoryId), appOfSprint.getCodeBranch());\\n//                LogUtil.info(log, \\\"seconde create application branch:\\\",appOfSprint.getApp(), \\\",result:\\\",js);\\n//                retValue = js.getJSONObject(\\\"header\\\").getInteger(\\\"ret\\\");\\n                AssertUtil.isTrue(false, BusinessErrorCode.BRANCH_EXISTED);\\n            }else if (0 == retValue){\\n                sprintRepository.updateSingleSpringToStartStatus(sprintId, appName);\\n                JSONObject protectBranch = codeApiClient.setProtectBranch(repositoryId,appOfSprint.getCodeBranch(), Boolean.TRUE);\\n                AssertUtil.isTrue(0 == protectBranch.getJSONObject(\\\"header\\\").getInteger(\\\"ret\\\"), BusinessErrorCode.CODEAPI_PROTECT_BRANCH_FAIL);\\n            }\\n            AssertUtil.isTrue(0 == retValue, BusinessErrorCode.CODEAPI_CREATE_BRANCH_FAIL);\\n\\n\\n        }\\n    }\\n\\n    private static \\u003cT\\u003e Predicate\\u003cT\\u003e distinctByKey(Function\\u003c? super T, ?\\u003e keyExtractor){\\n        Map\\u003cObject, Boolean\\u003e seen = new ConcurrentHashMap\\u003c\\u003e();\\n        return t -\\u003e seen.putIfAbsent(keyExtractor.apply(t), Boolean.TRUE) == null;\\n    }\\n\\n    private Map\\u003cString, String\\u003e geneParams(String bind, String wizardPlan, SprintDO sprintDO) {\\n        Map\\u003cString, String\\u003e params = new HashMap\\u003c\\u003e();\\n        params.put(\\\"type\\\", bind);\\n        params.put(\\\"sprintId\\\", sprintDO.getSprintId());\\n        params.put(\\\"wizardPlan\\\", wizardPlan);\\n        params.put(\\\"sprintName\\\", sprintDO.getSprintName());\\n        params.put(\\\"description\\\", sprintDO.getDescription());\\n        params.put(\\\"releaseDate\\\", sprintDO.getReleaseDate());\\n        return params;\\n    }\\n}\"\r\n            },\r\n            {\r\n                \"Path\": \"src/main/java/com/poype/heracles/core/facade/controller/JenkinsController.java\",\r\n                \"Status\": \"M\",\r\n                \"Content\": \"package com.poype.heracles.core.facade.controller;\\n\\n\\nimport com.poype.heracles.common.dto.BaseResult;\\nimport com.poype.heracles.common.dto.error.BizScene;\\nimport com.poype.heracles.common.template.ExecuteCallback;\\nimport com.poype.heracles.common.template.ExecuteTemplate;\\nimport com.poype.heracles.common.util.AssertUtil;\\nimport com.poype.heracles.common.util.ThreadLocalHolder;\\nimport com.poype.heracles.core.domain.service.SprintService;\\nimport com.poype.heracles.core.facade.request.JenkinsDeployCallBack;\\nimport com.poype.heracles.core.manager.ReleaseManager;\\nimport com.poype.heracles.core.repository.integration.model.ssdlc.SsdlcRequest;\\nimport org.springframework.beans.factory.annotation.Autowired;\\nimport org.springframework.http.MediaType;\\nimport org.springframework.stereotype.Controller;\\nimport org.springframework.web.bind.annotation.PostMapping;\\nimport org.springframework.web.bind.annotation.RequestBody;\\nimport org.springframework.web.bind.annotation.RequestMapping;\\nimport org.springframework.web.bind.annotation.ResponseBody;\\n\\nimport javax.annotation.Resource;\\n\\nimport static com.poype.heracles.common.enums.BusinessErrorCode.PARAM_ILLEGAL;\\n\\n@Controller\\n@RequestMapping(value=\\\"/jenkins\\\")\\npublic class JenkinsController {\\n\\n    @Resource\\n    private ExecuteTemplate executeTemplate;\\n\\n    @Autowired\\n    private SprintService sprintService;\\n\\n    @Autowired\\n    private ReleaseManager releaseManager;\\n    \\n\\n    @ResponseBody\\n    @PostMapping(value = \\\"/ssdlc\\\", consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)\\n    public BaseResult saveRecord(@RequestBody SsdlcRequest request){\\n        ThreadLocalHolder.setBizScene(BizScene.JENKINS_SSDLC);\\n\\n        final BaseResult result = new BaseResult();\\n\\n        executeTemplate.execute(result, new ExecuteCallback() {\\n            @Override\\n            public void check() {\\n                AssertUtil.notBlank(request.getModuleName(), PARAM_ILLEGAL, \\\"moduleName不可以为空\\\");\\n                AssertUtil.notBlank(request.getGitUrl(), PARAM_ILLEGAL, \\\"gitUr不可以为空\\\");\\n            }\\n            @Override\\n            public void doService() {\\n                sprintService.sendSsdlcMsg(request);\\n            }\\n        });\\n        return result;\\n    }\\n\\n    @ResponseBody\\n    @PostMapping(value = \\\"/deploy/result\\\", consumes = MediaType.APPLICATION_JSON_VALUE, produces = MediaType.APPLICATION_JSON_VALUE)\\n    public BaseResult deployResult(@RequestBody JenkinsDeployCallBack jenkinsDeployCallBack){\\n        ThreadLocalHolder.setBizScene(BizScene.JENKINS_DEPLOY_CALLBACK);\\n        final BaseResult result = new BaseResult();\\n\\n        executeTemplate.execute(result, new ExecuteCallback() {\\n            @Override\\n            public void check() {\\n                AssertUtil.notNull(jenkinsDeployCallBack.getDeployStatus(), PARAM_ILLEGAL, \\\"deployStatus不可以为空\\\");\\n                AssertUtil.notBlank(jenkinsDeployCallBack.getJobName(), PARAM_ILLEGAL, \\\"jobName不可以为空\\\");\\n                AssertUtil.isTrue(jenkinsDeployCallBack.getTaskIndex() != null \\u0026\\u0026 jenkinsDeployCallBack.getTaskIndex() \\u003e= 0, PARAM_ILLEGAL, \\\"taskIndex不合法\\\");\\n                AssertUtil.notBlank(jenkinsDeployCallBack.getDcEnv(), PARAM_ILLEGAL, \\\"dcEnv不可以为空\\\");\\n                AssertUtil.notBlank(jenkinsDeployCallBack.getDc(), PARAM_ILLEGAL, \\\"dc不可以为空\\\");\\n            }\\n            @Override\\n            public void doService() {\\n                releaseManager.deployResultCallback(jenkinsDeployCallBack);\\n            }\\n        });\\n        return result;\\n    }\\n}\"\r\n            },\r\n            {\r\n                \"Path\": \"src/main/java/com/poype/heracles/core/facade/controller/ReleaseController.java\",\r\n                \"Status\": \"M\",\r\n                \"Content\": \"package com.poype.heracles.core.facade.controller;\\n\\nimport com.poype.heracles.common.dto.BaseResult;\\nimport com.poype.heracles.common.dto.error.BizScene;\\nimport com.poype.heracles.common.enums.BusinessErrorCode;\\nimport com.poype.heracles.common.enums.RegionStatusEnum;\\nimport com.poype.heracles.common.enums.SprintOwner;\\nimport com.poype.heracles.common.template.ExecuteCallback;\\nimport com.poype.heracles.common.template.ExecuteTemplate;\\nimport com.poype.heracles.common.util.AssertUtil;\\nimport com.poype.heracles.common.util.ThreadLocalHolder;\\nimport com.poype.heracles.core.domain.model.dto.SimpleReleaseOrderDto;\\nimport com.poype.heracles.core.domain.model.enums.AppOfSprintStatus;\\nimport com.poype.heracles.core.domain.model.enums.DcEnum;\\nimport com.poype.heracles.core.domain.model.enums.SprintStatus;\\nimport com.poype.heracles.core.facade.request.*;\\nimport com.poype.heracles.core.facade.result.*;\\nimport com.poype.heracles.core.manager.ReleaseManager;\\nimport com.poype.heracles.core.repository.integration.ReleaseClient;\\nimport lombok.extern.slf4j.Slf4j;\\nimport org.apache.commons.lang.StringUtils;\\nimport org.springframework.stereotype.Controller;\\nimport org.springframework.web.bind.annotation.*;\\n\\nimport javax.annotation.Resource;\\nimport java.util.List;\\nimport java.util.Map;\\nimport java.util.stream.Collectors;\\n\\nimport static com.poype.heracles.common.enums.BusinessErrorCode.PARAM_ILLEGAL;\\n\\n@Controller\\n@RequestMapping(value = \\\"/release\\\")\\n@Slf4j\\npublic class ReleaseController {\\n\\n    @Resource\\n    private ExecuteTemplate executeTemplate;\\n\\n    @Resource\\n    private ReleaseManager releaseManager;\\n\\n    @Resource\\n    private ReleaseClient releaseClient;\\n\\n    @ResponseBody\\n    @RequestMapping(value = \\\"/createAtSpecEnv\\\", method = RequestMethod.POST, produces = \\\"application/json\\\")\\n    public CreateReleaseOrderResult createReleaseOrder(@RequestBody final CreateReleaseOrderRequest request) {\\n\\n        ThreadLocalHolder.setBizScene(BizScene.RELEASE_ORDER_CREATE);\\n\\n        final CreateReleaseOrderResult result = new CreateReleaseOrderResult();\\n\\n        executeTemplate.execute(result, new ExecuteCallback() {\\n\\n            @Override\\n            public void check() {\\n                AssertUtil.notBlank(request.getReleaseName(), PARAM_ILLEGAL);\\n                AssertUtil.notBlank(request.getEnvName(), PARAM_ILLEGAL);\\n                AssertUtil.notEmpty(request.getReleaseItemList(), PARAM_ILLEGAL);\\n                AssertUtil.notBlank(request.getDescription(), PARAM_ILLEGAL);\\n            }\\n\\n            @Override\\n            public void doService() {\\n\\n                List\\u003cString\\u003e releaseOperators = releaseClient.getReleaseOperator();\\n                String operator = ThreadLocalHolder.getUserName();\\n\\n                String envName = request.getEnvName();\\n                if (envName.equals(\\\"RC\\\") || envName.equals(\\\"PROD\\\")) {\\n                    AssertUtil.isTrue(StringUtils.containsIgnoreCase(releaseOperators.toString(), operator),\\n                            PARAM_ILLEGAL, \\\"目前只有运维和Poype才能创建生产\\\");\\n                }\\n                String releaseOrderId = releaseManager.createReleaseOrderAtSpecEnv(request.getReleaseName(),\\n                        request.getEnvName(), request.getDescription(), request.getReleaseItemList(), operator);\\n                result.setReleaseOrderId(releaseOrderId);\\n            }\\n        });\\n\\n        return result;\\n    }\\n\\n    @ResponseBody\\n    @RequestMapping(value = \\\"/sprintCreateAtSpecEnv\\\", method = RequestMethod.POST, produces = \\\"application/json\\\")\\n    public CreateReleaseOrderResult createReleaseOrderBatch(@RequestBody final SprintCreateReleaseOrderRequest request) {\\n        ThreadLocalHolder.setBizScene(BizScene.RELEASE_ORDER_CREATE);\\n\\n        final CreateReleaseOrderResult result = new CreateReleaseOrderResult();\\n\\n        executeTemplate.execute(result, new ExecuteCallback() {\\n\\n            @Override\\n            public void check() {\\n                AssertUtil.notBlank(request.getSprintId(), PARAM_ILLEGAL);\\n                AssertUtil.notBlank(request.getEnvName(), PARAM_ILLEGAL);\\n                AssertUtil.notEmpty(request.getReleaseItemList(), PARAM_ILLEGAL);\\n\\n                if (!(AppOfSprintStatus.getByName(request.getEnvName()) == AppOfSprintStatus.SIT ||\\n                        AppOfSprintStatus.getByName(request.getEnvName()) == AppOfSprintStatus.UAT)) {\\n                    AssertUtil.isTrue(false, BusinessErrorCode.ILLEGAL_RELEASE_ENV);\\n                }\\n            }\\n\\n            @Override\\n            public void doService() {\\n                String operator = ThreadLocalHolder.getUserName();\\n\\n                String releaseOrderId = releaseManager.sprintCreateReleaseOrderAtSpecEnv(request.getEnvName(), request.getReleaseItemList(), operator, request.getSprintId());\\n                result.setReleaseOrderId(releaseOrderId);\\n            }\\n        });\\n\\n        return result;\\n    }\\n\\n    @ResponseBody\\n    @RequestMapping(value = \\\"/deployAtSpecEnv\\\", method = RequestMethod.GET, produces = \\\"application/json\\\")\\n    public BaseResult deployAtSpecEnv(@RequestParam(\\\"itemId\\\") String itemId,\\n                                      @RequestParam(value = \\\"partition\\\", required = false, defaultValue = \\\"false\\\") Boolean partition) {\\n        ThreadLocalHolder.setBizScene(BizScene.RELEASE_ORDER_CREATE);\\n\\n        final BaseResult result = new BaseResult();\\n\\n        executeTemplate.execute(result, new ExecuteCallback() {\\n\\n            @Override\\n            public void check() {\\n                AssertUtil.notBlank(itemId, PARAM_ILLEGAL);\\n            }\\n\\n            @Override\\n            public void doService() {\\n                String operator = ThreadLocalHolder.getUserName();\\n                releaseManager.deployAtSpecEnv(itemId, operator, partition);\\n            }\\n        });\\n\\n        return result;\\n    }\\n\\n    @ResponseBody\\n    @RequestMapping(value = \\\"/deploy/strategy\\\", method = RequestMethod.GET, produces = \\\"application/json\\\")\\n    public BaseResult deployStrategy(@RequestParam(\\\"itemId\\\") String itemId,\\n                                     @RequestParam(value = \\\"partition\\\", required = false, defaultValue = \\\"false\\\") Boolean partition) {\\n        ThreadLocalHolder.setBizScene(BizScene.RELEASE_DEPLOY_STRATEGY);\\n\\n        final BaseResult result = new BaseResult();\\n\\n        executeTemplate.execute(result, new ExecuteCallback() {\\n\\n            @Override\\n            public void check() {\\n                AssertUtil.notBlank(itemId, PARAM_ILLEGAL);\\n            }\\n\\n            @Override\\n            public void doService() {\\n                String operator = ThreadLocalHolder.getUserName();\\n                releaseManager.deployStrategy(itemId, operator, partition);\\n            }\\n        });\\n\\n        return result;\\n    }\\n\\n    @ResponseBody\\n    @RequestMapping(value = \\\"/deploy/direct\\\", method = RequestMethod.GET, produces = \\\"application/json\\\")\\n    public BaseResult deployDirect(@RequestParam(\\\"itemId\\\") String itemId,\\n                                   @RequestParam(\\\"dc\\\") String dc, @RequestParam(\\\"dcEnv\\\") String dcEnv,\\n                                   @RequestParam(value = \\\"partition\\\", required = false, defaultValue = \\\"false\\\") Boolean partition) {\\n        ThreadLocalHolder.setBizScene(BizScene.RELEASE_DEPLOY_DIRECT);\\n\\n        final BaseResult result = new BaseResult();\\n\\n        executeTemplate.execute(result, new ExecuteCallback() {\\n\\n            @Override\\n            public void check() {\\n                AssertUtil.notBlank(itemId, PARAM_ILLEGAL);\\n            }\\n\\n            @Override\\n            public void doService() {\\n                String operator = ThreadLocalHolder.getUserName();\\n                releaseManager.deployDirect(itemId, operator, dc, dcEnv, partition);\\n            }\\n        });\\n\\n        return result;\\n    }\\n\\n    /**\\n     * 仅限运维人员使用,无版本的生产发布\\n     */\\n    @ResponseBody\\n    @RequestMapping(value = \\\"/deployBatch/directAtDc\\\", method = RequestMethod.POST, produces = \\\"application/json\\\")\\n    public BaseResult deployDirectAtDc(@RequestBody List\\u003cString\\u003e itemIdList,\\n                                                   @RequestParam(value = \\\"dcEnv\\\", required = false, defaultValue = \\\"DEF\\\") DcEnum dcEnv) {\\n        ThreadLocalHolder.setBizScene(BizScene.RELEASE_DEPLOY_DIRECT);\\n\\n        final BaseResult result = new BaseResult();\\n\\n        executeTemplate.execute(result, new ExecuteCallback() {\\n\\n            @Override\\n            public void check() {\\n                AssertUtil.isTrue(itemIdList != null \\u0026\\u0026 itemIdList.size() \\u003e 0, PARAM_ILLEGAL, \\\"itemIdList不可以为空！\\\");\\n                boolean compareSize = itemIdList.stream().distinct().collect(Collectors.toList()).size() == itemIdList.size();\\n                AssertUtil.isTrue(compareSize, PARAM_ILLEGAL, \\\"itemId不可以重复！\\\");\\n            }\\n\\n            @Override\\n            public void doService() {\\n                releaseManager.deployBatchDirectAtDc(itemIdList, dcEnv);\\n            }\\n        });\\n        return result;\\n    }\\n\\n    @ResponseBody\\n    @RequestMapping(value = \\\"/query/all/dc\\\", method = RequestMethod.GET, produces = \\\"application/json\\\")\\n    public BaseResult queryAllDc(@RequestParam(\\\"itemId\\\") String itemId) {\\n\\n        ThreadLocalHolder.setBizScene(BizScene.QUERY_RELEASE_ITEM_DC);\\n\\n        final QueryAllReleaseItemDcResult result = new QueryAllReleaseItemDcResult();\\n\\n        executeTemplate.execute(result, new ExecuteCallback() {\\n\\n            @Override\\n            public void check() {\\n                AssertUtil.notBlank(itemId, PARAM_ILLEGAL);\\n            }\\n\\n            @Override\\n            public void doService() {\\n                List\\u003cReleaseItemDcView\\u003e itemDcList = releaseManager.queryAllDc(itemId);\\n                result.setReleaseItemDcList(itemDcList);\\n            }\\n        });\\n\\n        return result;\\n    }\\n\\n    @ResponseBody\\n    @RequestMapping(value = \\\"/query/deploy/result\\\", method = RequestMethod.GET, produces = \\\"application/json\\\")\\n    public BaseResult queryDeployResult(@RequestParam(\\\"releaseOrderId\\\") final String releaseOrderId, @RequestParam(value = \\\"isRemote\\\", required = false) Boolean isRemote) {\\n        ThreadLocalHolder.setBizScene(BizScene.QUERY_DEPLOY_RESULT);\\n\\n        final QueryReleaseOrderStatusResult result = new QueryReleaseOrderStatusResult();\\n\\n        executeTemplate.execute(result, new ExecuteCallback() {\\n\\n            @Override\\n            public void check() {\\n                AssertUtil.notBlank(releaseOrderId, PARAM_ILLEGAL, \\\"发布单Id不能为空\\\");\\n            }\\n\\n            @Override\\n            public void doService() {\\n                ReleaseOrderView releaseOrderView = releaseManager.queryDeployResult(releaseOrderId, isRemote);\\n                result.setReleaseOrder(releaseOrderView);\\n            }\\n        });\\n\\n        return result;\\n    }\\n\\n    @ResponseBody\\n    @RequestMapping(value = \\\"/callback\\\", method = RequestMethod.GET, produces = \\\"application/json\\\")\\n    public BaseResult jenkinsCallback(@RequestParam(\\\"appName\\\") String appName, @RequestParam(\\\"buildNo\\\") Integer buildNo,\\n                                      @RequestParam(\\\"status\\\") Integer status, @RequestParam(\\\"envType\\\") Integer envType) {\\n        ThreadLocalHolder.setBizScene(BizScene.JENKINS_CALLBACK);\\n\\n        final BaseResult result = new BaseResult();\\n\\n        executeTemplate.execute(result, new ExecuteCallback() {\\n\\n            @Override\\n            public void check() {\\n                AssertUtil.notBlank(appName, PARAM_ILLEGAL);\\n                AssertUtil.notNull(buildNo, PARAM_ILLEGAL);\\n                AssertUtil.notNull(status, PARAM_ILLEGAL);\\n                AssertUtil.notNull(envType, PARAM_ILLEGAL);\\n\\n            }\\n\\n            @Override\\n            public void doService() {\\n                releaseManager.jenkinsCallback(appName, buildNo, status, envType);\\n            }\\n        });\\n\\n        return result;\\n    }\\n    \\n    @ResponseBody\\n    @RequestMapping(value = \\\"/checkReleaseApply\\\", method = RequestMethod.POST, produces = \\\"application/json\\\")\\n    public CheckReleaseApplyResult checkReleaseApply(@RequestBody final CheckReleaseApplyRequest request) {\\n    \\tThreadLocalHolder.setBizScene(BizScene.CHECK_RELEASE_APPLY);\\n\\n        final CheckReleaseApplyResult result = new CheckReleaseApplyResult();\\n\\n        executeTemplate.execute(result, new ExecuteCallback() {\\n\\n            @Override\\n            public void check() {\\n                AssertUtil.notBlank(request.getSprintId(), PARAM_ILLEGAL);\\n            }\\n\\n            @Override\\n            public void doService() {\\n            \\tresult.setResult(releaseManager.checkReleaseApplyRequest(request.getSprintId()));\\n            }\\n        });\\n        return result;\\n    }\\n\\n    @ResponseBody\\n    @RequestMapping(value = \\\"/create\\\", method = RequestMethod.POST, produces = \\\"application/json\\\")\\n    public CreateReleaseOrderResult createReleaseOrderForSprint(@RequestBody final CreateReleaseOrderForSprintRequest request) {\\n\\n        ThreadLocalHolder.setBizScene(BizScene.RELEASE_ORDER_CREATE);\\n\\n        final CreateReleaseOrderResult result = new CreateReleaseOrderResult();\\n\\n        executeTemplate.execute(result, new ExecuteCallback() {\\n\\n            @Override\\n            public void check() {\\n                AssertUtil.notBlank(request.getSprintId(), PARAM_ILLEGAL);\\n            }\\n\\n            @Override\\n            public void doService() {\\n                String operator = ThreadLocalHolder.getUserName();\\n\\n                String releaseOrderId;\\n                Boolean entranceGuardResult = true;\\n                if (StringUtils.isBlank(request.getApp())) {\\n                    CreateReleaseOrderResult releaseOrderForSprint = releaseManager.createReleaseOrderForSprint(request.getSprintId(), operator);\\n                    releaseOrderId = releaseOrderForSprint.getReleaseOrderId();\\n                    entranceGuardResult = releaseOrderForSprint.getEntranceGuardResult();\\n                } else {\\n                    releaseOrderId = releaseManager.createReleaseOrderForSprint(request.getSprintId(),\\n                            request.getApp(), operator);\\n                }\\n                result.setReleaseOrderId(releaseOrderId);\\n                result.setEntranceGuardResult(entranceGuardResult);\\n            }\\n        });\\n        return result;\\n    }\\n\\n    @ResponseBody\\n    @RequestMapping(value = \\\"/deploy\\\", method = RequestMethod.GET, produces = \\\"application/json\\\")\\n    public BaseResult deploy(@RequestParam(\\\"releaseOrderId\\\") String releaseOrderId,\\n                             @RequestParam(value = \\\"partition\\\", required = false, defaultValue = \\\"false\\\") Boolean partition) {\\n        ThreadLocalHolder.setBizScene(BizScene.RELEASE_ORDER_CREATE);\\n\\n        final BaseResult result = new BaseResult();\\n\\n        executeTemplate.execute(result, new ExecuteCallback() {\\n\\n            @Override\\n            public void check() {\\n                AssertUtil.notBlank(releaseOrderId, PARAM_ILLEGAL);\\n            }\\n\\n            @Override\\n            public void doService() {\\n                releaseManager.deployReleaseOrder(releaseOrderId, partition);\\n            }\\n        });\\n\\n        return result;\\n    }\\n\\n    @ResponseBody\\n    @RequestMapping(value = \\\"/queryStatus\\\", method = RequestMethod.GET, produces = \\\"application/json\\\")\\n    public QueryReleaseOrderStatusResult queryReleaseStatusByOrderId(\\n            @RequestParam(\\\"releaseOrderId\\\") final String releaseOrderId) {\\n\\n        ThreadLocalHolder.setBizScene(BizScene.RELEASE_STATUS_QUERY);\\n\\n        final QueryReleaseOrderStatusResult result = new QueryReleaseOrderStatusResult();\\n\\n        executeTemplate.execute(result, new ExecuteCallback() {\\n\\n            @Override\\n            public void check() {\\n                AssertUtil.notBlank(releaseOrderId, PARAM_ILLEGAL, \\\"发布单Id不能为空\\\");\\n            }\\n\\n            @Override\\n            public void doService() {\\n                ReleaseOrderView releaseOrderView = releaseManager.queryReleaseOrderStatus(releaseOrderId);\\n                result.setReleaseOrder(releaseOrderView);\\n            }\\n        });\\n\\n        return result;\\n    }\\n\\n    @ResponseBody\\n    @RequestMapping(value = \\\"/queryReleaseOrderList\\\", method = RequestMethod.GET, produces = \\\"application/json\\\")\\n    public QueryPageOfReleaseOrderResult querySimpleReleaseOrderListBySprintId(\\n            @RequestParam(value = \\\"sprintId\\\", required = false) String sprintId,\\n            @RequestParam(value = \\\"pageNum\\\") int pageNum,\\n            @RequestParam(value = \\\"releaseName\\\", required = false) String releaseName,\\n            @RequestParam(value = \\\"envName\\\", required = false) String envName,\\n            @RequestParam(value = \\\"operator\\\", required = false) String operator) {\\n\\n        ThreadLocalHolder.setBizScene(BizScene.QUERY_SIMPLE_RELEASE_OF_SPRINT);\\n\\n        final QueryPageOfReleaseOrderResult result = new QueryPageOfReleaseOrderResult();\\n\\n        executeTemplate.execute(result, new ExecuteCallback() {\\n\\n            @Override\\n            public void check() {\\n                AssertUtil.isTrue(pageNum \\u003e 0, PARAM_ILLEGAL);\\n            }\\n\\n            @Override\\n            public void doService() {\\n                if (StringUtils.isNotBlank(sprintId)) {\\n                    Map\\u003cString, Object\\u003e map = releaseManager.queryReleaseOrderListBySprintId(sprintId, pageNum);\\n                    result.setReleaseOrderList((List\\u003cSimpleReleaseOrderDto\\u003e) map.get(\\\"releaseOrderList\\\"));\\n                    result.setTotal((int) map.get(\\\"total\\\"));\\n                } else {\\n                    String releaseNameCopy, envNameCopy, operatorCopy;\\n                    releaseNameCopy = (releaseName != null) ? releaseName.trim() : null;\\n                    envNameCopy = (envName != null) ? envName.trim() : null;\\n                    operatorCopy = (operator != null) ? operator.trim() : null;\\n                    Map\\u003cString, Object\\u003e map = releaseManager.queryPageOfReleaseOrder(pageNum, releaseNameCopy, envNameCopy, operatorCopy);\\n                    result.setReleaseOrderList((List\\u003cSimpleReleaseOrderDto\\u003e) map.get(\\\"releaseOrderList\\\"));\\n                    result.setTotal((int) map.get(\\\"total\\\"));\\n                }\\n            }\\n        });\\n\\n        return result;\\n    }\\n\\n    @ResponseBody\\n    @RequestMapping(value = \\\"/test\\\", method = RequestMethod.GET, produces = \\\"application/json\\\")\\n    public BaseResult test() {\\n        releaseClient.test();\\n        return new BaseResult();\\n    }\\n\\n    @ResponseBody\\n    @RequestMapping(value = \\\"/deviceService/add\\\", method = RequestMethod.GET, produces = \\\"application/json\\\")\\n    public BaseResult deviceAdd(@RequestParam(\\\"appName\\\") String appName) {\\n        ThreadLocalHolder.setBizScene(BizScene.DEVICE_SERVICE_ADD);\\n\\n        final BaseResult result = new BaseResult();\\n\\n        executeTemplate.execute(result, new ExecuteCallback() {\\n            @Override\\n            public void doService() {\\n                releaseManager.deviceAdd(appName);\\n            }\\n        });\\n\\n        return result;\\n    }\\n\\n    @ResponseBody\\n    @RequestMapping(value = \\\"/deviceService/delete\\\", method = RequestMethod.GET, produces = \\\"application/json\\\")\\n    public BaseResult deviceDelete(@RequestParam(\\\"appName\\\") String appName) {\\n        ThreadLocalHolder.setBizScene(BizScene.DEVICE_SERVICE_DELETE);\\n\\n        final BaseResult result = new BaseResult();\\n\\n        executeTemplate.execute(result, new ExecuteCallback() {\\n            @Override\\n            public void doService() {\\n                releaseManager.deviceDelete(appName);\\n            }\\n        });\\n\\n        return result;\\n    }\\n\\n    @ResponseBody\\n    @RequestMapping(value = \\\"/deviceService/queryList\\\", method = RequestMethod.GET, produces = \\\"application/json\\\")\\n    public QueryAllAppNameResult queryApplication() {\\n        ThreadLocalHolder.setBizScene(BizScene.DEVICE_SERVICE_MENU_QUERY);\\n\\n        final QueryAllAppNameResult result = new QueryAllAppNameResult();\\n\\n        executeTemplate.execute(result, new ExecuteCallback() {\\n            @Override\\n            public void doService() {\\n                List\\u003cString\\u003e strs = releaseManager.queryDeviceAppName();\\n                result.setAppNameList(strs);\\n            }\\n        });\\n\\n        return result;\\n    }\\n\\n    @ResponseBody\\n    @RequestMapping(value = \\\"/releaseOrderListInfo\\\", method = RequestMethod.POST, produces = \\\"application/json\\\")\\n    public QueryPageOfReleaseOrderResult querySimpleReleaseOrderListBySprintId(@RequestBody ReleaseOrderRequest request) {\\n\\n        ThreadLocalHolder.setBizScene(BizScene.QUERY_SIMPLE_RELEASE_OF_SPRINT);\\n\\n        final QueryPageOfReleaseOrderResult result = new QueryPageOfReleaseOrderResult();\\n\\n        executeTemplate.execute(result, new ExecuteCallback() {\\n\\n            @Override\\n            public void check() {\\n                AssertUtil.isTrue(request.getPageNum() \\u003e 0, PARAM_ILLEGAL);\\n            }\\n\\n            @Override\\n            public void doService() {\\n                if (StringUtils.isNotBlank(request.getSprintId())) {\\n                    Map\\u003cString, Object\\u003e map = releaseManager.queryReleaseOrderListBySprintId(request.getSprintId(), request.getPageNum());\\n                    result.setReleaseOrderList((List\\u003cSimpleReleaseOrderDto\\u003e) map.get(\\\"releaseOrderList\\\"));\\n                    result.setTotal((int) map.get(\\\"total\\\"));\\n                } else {\\n                    Map\\u003cString, Object\\u003e map = releaseManager.queryPageOfReleaseOrderInfo(request.getPageNum(), request.getReleaseName(), request.getReleaseDate(), request.getOperator(), request.getAppName());\\n                    result.setReleaseOrderList((List\\u003cSimpleReleaseOrderDto\\u003e) map.get(\\\"releaseOrderList\\\"));\\n                    result.setTotal((int) map.get(\\\"total\\\"));\\n                }\\n            }\\n        });\\n\\n        return result;\\n    }\\n\\n    @ResponseBody\\n    @RequestMapping(value = \\\"/deployBatch/strategy\\\", method = RequestMethod.POST, produces = \\\"application/json\\\")\\n    public BaseResult deployBatch(@RequestBody List\\u003cString\\u003e itemIdList,\\n                                  @RequestParam(value = \\\"partition\\\", required = false, defaultValue = \\\"false\\\") Boolean partition) {\\n        ThreadLocalHolder.setBizScene(BizScene.RELEASE_DEPLOY_STRATEGY);\\n\\n        final BaseResult result = new BaseResult();\\n\\n        executeTemplate.execute(result, new ExecuteCallback() {\\n\\n            @Override\\n\\n            public void check() {\\n                AssertUtil.notBlank(itemIdList.toString(), PARAM_ILLEGAL);\\n            }\\n\\n            @Override\\n            public void doService() {\\n                String operator = ThreadLocalHolder.getUserName();\\n                releaseManager.deployBatch(itemIdList, operator, partition);\\n            }\\n        });\\n\\n        return result;\\n    }\\n\\n    //分区资源释放\\n    @ResponseBody\\n    @RequestMapping(value = \\\"/region/release\\\", method = RequestMethod.GET, produces = \\\"application/json\\\")\\n    public BaseResult regionRelease(@RequestParam(value = \\\"app\\\", required = false) String app, @RequestParam(value = \\\"regionName\\\",required = false) String regionName) {\\n        ThreadLocalHolder.setBizScene(BizScene.REGION_RELEASE);\\n\\n        final BaseResult result = new BaseResult();\\n\\n        executeTemplate.execute(result, new ExecuteCallback() {\\n\\n            @Override\\n            public void check() {\\n                AssertUtil.notBlank(app, PARAM_ILLEGAL, \\\"app不合法\\\");\\n                AssertUtil.notBlank(regionName, PARAM_ILLEGAL,\\\"regionName不合法\\\");\\n            }\\n\\n            @Override\\n            public void doService() {\\n                releaseManager.regionRelease(app, regionName);\\n            }\\n        });\\n        return result;\\n    }\\n\\n    //分区列表查询\\n    @ResponseBody\\n    @RequestMapping(value = \\\"/region/list\\\", method = RequestMethod.GET, produces = \\\"application/json\\\")\\n    public BaseResult regionList(@RequestParam(\\\"pageNum\\\") final int pageNum,\\n                                      @RequestParam(value = \\\"sprintName\\\", required = false) final String sprintName,\\n                                      @RequestParam(value = \\\"regionName\\\", required = false) final String regionName,\\n                                      @RequestParam(value = \\\"sprintStatus\\\", required = false) final SprintStatus sprintStatus,\\n                                      @RequestParam(value = \\\"regionStatus\\\", required = false) final RegionStatusEnum regionStatus,\\n                                      @RequestParam(value = \\\"sprintOwner\\\", required = false) final SprintOwner sprintOwner,\\n                                      @RequestParam(value = \\\"app\\\", required = false) final String app) {\\n        ThreadLocalHolder.setBizScene(BizScene.REGION_QUERY);\\n\\n        final RegionListPage result = new RegionListPage();\\n\\n        executeTemplate.execute(result, new ExecuteCallback() {\\n\\n            @Override\\n            public void check() {\\n                AssertUtil.isTrue(pageNum \\u003e 0, PARAM_ILLEGAL);\\n            }\\n\\n            @Override\\n            public void doService() {\\n                Map\\u003cString, Object\\u003e map = releaseManager.regionList(sprintName, regionName, sprintStatus, regionStatus, sprintOwner, app, pageNum);\\n                result.setSprintRegionPageList((List\\u003cSprintRegionPageView\\u003e) map.get(\\\"sprintRegionPageDoList\\\"));\\n                result.setTotal((int) map.get(\\\"total\\\"));\\n            }\\n        });\\n\\n        return result;\\n    }\\n\\n}\"\r\n            },\r\n            {\r\n                \"Path\": \"src/main/java/com/poype/heracles/core/facade/request/deploy/DeployReq.java\",\r\n                \"Status\": \"A\",\r\n                \"Content\": \"package com.poype.heracles.core.facade.request.deploy;\\n\\nimport lombok.Builder;\\n\\n/**\\n * 应用发布mq载体\\n */\\n@Builder\\npublic class DeployReq {\\n\\n    /**\\n     * itemId\\n     */\\n    private String itemId;\\n\\n    /**\\n     * 机房\\n     */\\n    private String dc;\\n\\n    /**\\n     * 环境\\n     */\\n    private String dcEnv;\\n\\n    /**\\n     * 是否分区\\n     */\\n    private Boolean partition;\\n\\n    private String operator;\\n\\n    public DeployReq() {\\n    }\\n\\n    public DeployReq(String itemId, String dc, String dcEnv, Boolean partition, String operator) {\\n        this.itemId = itemId;\\n        this.dc = dc;\\n        this.dcEnv = dcEnv;\\n        this.partition = partition;\\n        this.operator = operator;\\n    }\\n\\n    public String getOperator() {\\n        return operator;\\n    }\\n\\n    public void setOperator(String operator) {\\n        this.operator = operator;\\n    }\\n\\n    @Override\\n    public String toString() {\\n        return \\\"DeployReq{\\\" +\\n                \\\"itemId='\\\" + itemId + '\\\\'' +\\n                \\\", dc='\\\" + dc + '\\\\'' +\\n                \\\", dcEnv='\\\" + dcEnv + '\\\\'' +\\n                \\\", partition=\\\" + partition +\\n                \\\", operator='\\\" + operator + '\\\\'' +\\n                '}';\\n    }\\n\\n    public String getItemId() {\\n        return itemId;\\n    }\\n\\n    public void setItemId(String itemId) {\\n        this.itemId = itemId;\\n    }\\n\\n    public String getDc() {\\n        return dc;\\n    }\\n\\n    public void setDc(String dc) {\\n        this.dc = dc;\\n    }\\n\\n    public String getDcEnv() {\\n        return dcEnv;\\n    }\\n\\n    public void setDcEnv(String dcEnv) {\\n        this.dcEnv = dcEnv;\\n    }\\n\\n    public Boolean isPartition() {\\n        return partition;\\n    }\\n\\n    public void setPartition(Boolean partition) {\\n        this.partition = partition;\\n    }\\n\\n}\"\r\n                },\r\n                {\r\n                    \"Path\": \"src/main/java/com/poype/heracles/core/facade/result/DeployDirectAtDcResult.java\",\r\n                    \"Status\": \"D\",\r\n                    \"Content\": \"fatal: Path 'src/main/java/com/poype/heracles/core/facade/result/DeployDirectAtDcResult.java' does not exist in '94b07be93611b3076f3a56b77a43d6fa05982c11'\"\r\n                },\r\n                {\r\n                    \"Path\": \"src/main/java/com/poype/heracles/core/facade/result/ReleaseItemDcView.java\",\r\n                    \"Status\": \"M\",\r\n                    \"Content\": \"package com.poype.heracles.core.facade.result;\\n\\nimport com.fasterxml.jackson.annotation.JsonIgnore;\\nimport lombok.Data;\\n\\n/**\\n * 概要信息:\\n * \\u003cp\\u003e\\n * 版权: ©2020 中国平安国际融资租赁有限公司 版权所有\\n *\\n * @author YANGPENGFEI131\\n * @version %I%, %G%\\n * @date 2021-7-15\\n */\\n@Data\\npublic class ReleaseItemDcView {\\n\\n    private String itemDcId;\\n\\n    /**\\n     * 发布项状态\\n     */\\n    private String status;\\n\\n    private String resultUrl;\\n\\n    private String jobName;\\n\\n    private Integer taskIndex;\\n\\n    private String dcEnv;\\n\\n    private String dc;\\n\\n    private String consulUrl;\\n\\n    /**\\n     * jenkins部署时生成的随机数\\n     */\\n    @JsonIgnore\\n    private String keyword;\\n\\n    /**\\n     * 队列排名(数值仅参考)\\n     */\\n    private Integer rank;\\n\\n\\n}\"\r\n                },\r\n                {\r\n                    \"Path\": \"src/main/java/com/poype/heracles/core/facade/result/ReleaseItemView.java\",\r\n                    \"Status\": \"M\",\r\n                    \"Content\": \"package com.poype.heracles.core.facade.result;\\n\\nimport lombok.Data;\\n\\nimport java.util.List;\\n\\n@Data\\npublic class ReleaseItemView {\\n\\n    /**\\n     * 发布项Id\\n     */\\n    private String itemId;\\n\\n    /**\\n     * 应用名字\\n     */\\n    private String appName;\\n\\n    /**\\n     * 代码仓库\\n     */\\n    private String codeRepos;\\n\\n    /**\\n     * 代码分支\\n     */\\n    private String codeBranch;\\n\\n    /**\\n     * 发布项状态\\n     */\\n    private String status;\\n\\n    /**\\n     * jenkins日志链接\\n     */\\n    private String logLink;\\n\\n    /**\\n     * 前端访问路径\\n     */\\n    private String webPath;\\n\\n    /**\\n     * 团队\\n     */\\n    private String team;\\n\\n    /**\\n     * project项目组\\n     */\\n    private String project;\\n\\n    private String belongSystem;\\n\\n    private List\\u003cReleaseItemDcView\\u003e itemDcList;\\n\\n    /**\\n     * 队列排名(数值仅参考)\\n     */\\n    private Integer rank;\\n\\n    @Override\\n    public String toString() {\\n        return \\\"ReleaseItemView{\\\" +\\n                \\\"itemId='\\\" + itemId + '\\\\'' +\\n                \\\", appName='\\\" + appName + '\\\\'' +\\n                \\\", codeRepos='\\\" + codeRepos + '\\\\'' +\\n                \\\", codeBranch='\\\" + codeBranch + '\\\\'' +\\n                \\\", status='\\\" + status + '\\\\'' +\\n                \\\", logLink='\\\" + logLink + '\\\\'' +\\n                \\\", webPath='\\\" + webPath + '\\\\'' +\\n                \\\", rank='\\\" + rank + '\\\\'' +\\n                '}';\\n    }\\n\\n    public ReleaseItemView() {\\n    }\\n\\n    public ReleaseItemView(String itemId, String appName, String codeRepos, String codeBranch, String status,\\n                           String logLink, String webPath, String team, String project, String belongSystem) {\\n        this.itemId = itemId;\\n        this.appName = appName;\\n        this.codeRepos = codeRepos;\\n        this.codeBranch = codeBranch;\\n        this.status = status;\\n        this.logLink = logLink;\\n        this.webPath = webPath;\\n        this.team = team;\\n        this.project = project;\\n        this.belongSystem = belongSystem;\\n    }\\n\\n    public ReleaseItemView(String itemId, String appName, String codeRepos, String codeBranch, String status,\\n                           String logLink, String webPath, String team, String project, String belongSystem, Integer rank) {\\n        this.itemId = itemId;\\n        this.appName = appName;\\n        this.codeRepos = codeRepos;\\n        this.codeBranch = codeBranch;\\n        this.status = status;\\n        this.logLink = logLink;\\n        this.webPath = webPath;\\n        this.team = team;\\n        this.project = project;\\n        this.belongSystem = belongSystem;\\n        this.rank = rank;\\n    }\\n\\n}\"\r\n                    },\r\n                    {\r\n                        \"Path\": \"src/main/java/com/poype/heracles/core/facade/result/ReleaseOrderView.java\",\r\n                        \"Status\": \"M\",\r\n                        \"Content\": \"package com.poype.heracles.core.facade.result;\\n\\nimport com.poype.heracles.core.domain.model.enums.PartitionEnum;\\n\\nimport java.util.List;\\n\\npublic class ReleaseOrderView {\\n\\n    /**\\n     * 发布单Id\\n     */\\n    private String orderId;\\n\\n    /**\\n     * 关联版本\\n     */\\n    private String sprintId;\\n\\n    /**\\n     * 发布名称\\n     */\\n    private String releaseName;\\n\\n    /**\\n     * 发布描述\\n     */\\n    private String description;\\n\\n    /**\\n     * 环境名称\\n     */\\n    private String envName;\\n\\n    /**\\n     * 发布状态\\n     */\\n    private String status;\\n\\n    private PartitionEnum partition;\\n\\n\\n    /**\\n     * 操作者\\n     */\\n    private String operator;\\n\\n    /**\\n     * 发布时间\\n     */\\n    private String releaseDate;\\n\\n    /**\\n     * 发布项列表\\n     */\\n    private List\\u003cReleaseItemView\\u003e itemList;\\n\\n    /**\\n     * 当前登录人角色\\n     */\\n    private String loginIdUserRoleId;\\n\\n    /**\\n     * 发布队列app数量\\n     */\\n    private Integer waitAppCount = 0;\\n\\n    @Override\\n    public String toString() {\\n        return \\\"ReleaseOrderView{\\\" +\\n                \\\"orderId='\\\" + orderId + '\\\\'' +\\n                \\\"sprintId='\\\" + sprintId + '\\\\'' +\\n                \\\", releaseName='\\\" + releaseName + '\\\\'' +\\n                \\\", description='\\\" + description + '\\\\'' +\\n                \\\", envName='\\\" + envName + '\\\\'' +\\n                \\\", status='\\\" + status + '\\\\'' +\\n                \\\", partition='\\\" + partition + '\\\\'' +\\n                \\\", operator='\\\" + operator + '\\\\'' +\\n                \\\", releaseDate='\\\" + releaseDate + '\\\\'' +\\n                \\\", itemList=\\\" + itemList +\\n                \\\", loginIdUserRoleId=\\\" + loginIdUserRoleId +\\n                \\\", waitAppCount=\\\" + waitAppCount +\\n                '}';\\n    }\\n\\n    public ReleaseOrderView() {\\n    }\\n\\n    public ReleaseOrderView(String orderId, String releaseName, String description, String envName,\\n                            String status, String operator, String releaseDate) {\\n        this.orderId = orderId;\\n        this.releaseName = releaseName;\\n        this.description = description;\\n        this.envName = envName;\\n        this.status = status;\\n        this.operator = operator;\\n        this.releaseDate = releaseDate;\\n    }\\n    public ReleaseOrderView(String orderId, String releaseName, String description, String envName,\\n                            String status, String operator, String releaseDate, PartitionEnum partition) {\\n        this.orderId = orderId;\\n        this.releaseName = releaseName;\\n        this.description = description;\\n        this.envName = envName;\\n        this.status = status;\\n        this.operator = operator;\\n        this.releaseDate = releaseDate;\\n        this.partition = partition;\\n    }\\n\\n    public ReleaseOrderView(String orderId, String releaseName, String description, String envName,\\n                            String status, String operator, String releaseDate, PartitionEnum partition,\\n                            String sprintId, String loginIdUserRoleId) {\\n        this.orderId = orderId;\\n        this.releaseName = releaseName;\\n        this.description = description;\\n        this.envName = envName;\\n        this.status = status;\\n        this.operator = operator;\\n        this.releaseDate = releaseDate;\\n        this.partition = partition;\\n        this.sprintId = sprintId;\\n        this.loginIdUserRoleId = loginIdUserRoleId;\\n    }\\n\\n    public ReleaseOrderView(String orderId, String releaseName, String description, String envName,\\n                            String status, String operator, String releaseDate, PartitionEnum partition,\\n                            String sprintId, String loginIdUserRoleId, Integer waitAppCount) {\\n        this.orderId = orderId;\\n        this.releaseName = releaseName;\\n        this.description = description;\\n        this.envName = envName;\\n        this.status = status;\\n        this.operator = operator;\\n        this.releaseDate = releaseDate;\\n        this.partition = partition;\\n        this.sprintId = sprintId;\\n        this.loginIdUserRoleId = loginIdUserRoleId;\\n        this.waitAppCount = waitAppCount;\\n    }\\n\\n\\n\\n    public String getOrderId() {\\n        return orderId;\\n    }\\n\\n    public void setOrderId(String orderId) {\\n        this.orderId = orderId;\\n    }\\n\\n    public String getReleaseName() {\\n        return releaseName;\\n    }\\n\\n    public void setReleaseName(String releaseName) {\\n        this.releaseName = releaseName;\\n    }\\n\\n    public String getDescription() {\\n        return description;\\n    }\\n\\n    public void setDescription(String description) {\\n        this.description = description;\\n    }\\n\\n    public String getEnvName() {\\n        return envName;\\n    }\\n\\n    public void setEnvName(String envName) {\\n        this.envName = envName;\\n    }\\n\\n    public String getStatus() {\\n        return status;\\n    }\\n\\n    public void setStatus(String status) {\\n        this.status = status;\\n    }\\n\\n    public String getOperator() {\\n        return operator;\\n    }\\n\\n    public void setOperator(String operator) {\\n        this.operator = operator;\\n    }\\n\\n    public String getReleaseDate() {\\n        return releaseDate;\\n    }\\n\\n    public void setReleaseDate(String releaseDate) {\\n        this.releaseDate = releaseDate;\\n    }\\n\\n    public List\\u003cReleaseItemView\\u003e getItemList() {\\n        return itemList;\\n    }\\n\\n    public void setItemList(List\\u003cReleaseItemView\\u003e itemList) {\\n        this.itemList = itemList;\\n    }\\n\\n    public PartitionEnum getPartition() {\\n        return partition;\\n    }\\n\\n    public void setPartition(PartitionEnum partition) {\\n        this.partition = partition;\\n    }\\n\\n    public String getSprintId() {\\n        return sprintId;\\n    }\\n\\n    public void setSprintId(String sprintId) {\\n        this.sprintId = sprintId;\\n    }\\n\\n    public String getLoginIdUserRoleId() {\\n        return loginIdUserRoleId;\\n    }\\n\\n    public void setLoginIdUserRoleId(String loginIdUserRoleId) {\\n        this.loginIdUserRoleId = loginIdUserRoleId;\\n    }\\n\\n    public Integer getWaitAppCount() {\\n        return waitAppCount;\\n    }\\n\\n    public void setWaitAppCount(Integer waitAppCount) {\\n        this.waitAppCount = waitAppCount;\\n    }\\n}\"\r\n                        },\r\n                        {\r\n                            \"Path\": \"src/main/java/com/poype/heracles/core/manager/impl/ReleaseManagerImpl.java\",\r\n                            \"Status\": \"M\",\r\n                            \"Content\": \"package com.poype.heracles.core.manager.impl;\\n\\nimport com.alibaba.fastjson.JSONObject;\\nimport com.poype.heracles.auth.facade.config.CenterConfig;\\nimport com.poype.heracles.common.constant.Constants;\\nimport com.poype.heracles.common.enums.BusinessErrorCode;\\nimport com.poype.heracles.common.enums.RegionStatusEnum;\\nimport com.poype.heracles.common.enums.ReleaseApplyStatus;\\nimport com.poype.heracles.common.enums.SprintOwner;\\nimport com.poype.heracles.common.util.AssertUtil;\\nimport com.poype.heracles.common.util.DateUtils;\\nimport com.poype.heracles.common.util.ThreadLocalHolder;\\nimport com.poype.heracles.core.domain.model.*;\\nimport com.poype.heracles.core.domain.model.application.Application;\\nimport com.poype.heracles.core.domain.model.application.config.BranchCompareConf;\\nimport com.poype.heracles.core.domain.model.dto.ReleaseItemDto;\\nimport com.poype.heracles.core.domain.model.dto.SimpleReleaseOrderDto;\\nimport com.poype.heracles.core.domain.model.enums.*;\\nimport com.poype.heracles.core.domain.model.sprint.AppOfSprint;\\nimport com.poype.heracles.core.domain.model.sprint.Sprint;\\nimport com.poype.heracles.core.domain.service.EventSenderService;\\nimport com.poype.heracles.core.domain.service.ReleaseService;\\nimport com.poype.heracles.core.domain.service.SprintService;\\nimport com.poype.heracles.core.domain.service.UserRoleService;\\nimport com.poype.heracles.core.domain.service.deployCheck.AbstractCheckService;\\nimport com.poype.heracles.core.domain.service.deployCheck.CheckService;\\nimport com.poype.heracles.core.facade.request.JenkinsDeployCallBack;\\nimport com.poype.heracles.core.facade.request.deploy.DeployReq;\\nimport com.poype.heracles.core.facade.result.*;\\nimport com.poype.heracles.core.manager.ReleaseManager;\\nimport com.poype.heracles.core.repository.*;\\nimport com.poype.heracles.core.repository.dao.ReleaseApplyDAO;\\nimport com.poype.heracles.core.repository.dao.ReleaseDAO;\\nimport com.poype.heracles.core.repository.dao.SprintDAO;\\nimport com.poype.heracles.core.repository.dao.model.ReleaseItemDO;\\nimport com.poype.heracles.core.repository.dao.model.ReleaseItemDcDO;\\nimport com.poype.heracles.core.repository.dao.model.RoleDO;\\nimport com.poype.heracles.core.repository.dao.model.SprintDO;\\nimport com.poype.heracles.core.repository.integration.EntranceGuardClient;\\nimport com.poype.heracles.core.repository.integration.ReleaseClient;\\nimport com.poype.heracles.core.repository.integration.model.entranceGuard.Data;\\nimport com.poype.heracles.core.repository.integration.model.entranceGuard.EntranceGuardReq;\\nimport com.poype.heracles.core.repository.integration.model.entranceGuard.EntranceGuardResp;\\nimport com.poype.heracles.core.repository.integration.model.entranceGuard.EntranceGuardTaskResult;\\nimport lombok.extern.slf4j.Slf4j;\\nimport org.apache.commons.lang.StringUtils;\\nimport org.springframework.beans.factory.annotation.Autowired;\\nimport org.springframework.stereotype.Service;\\nimport org.springframework.util.CollectionUtils;\\n\\nimport javax.annotation.Resource;\\nimport java.text.SimpleDateFormat;\\nimport java.util.*;\\nimport java.util.concurrent.CompletableFuture;\\nimport java.util.concurrent.Executor;\\nimport java.util.stream.Collectors;\\n\\nimport static com.poype.heracles.common.enums.BusinessErrorCode.*;\\n\\n/**\\n * @author EX-LUOWEICHAO001\\n */\\n@Service(\\\"releaseManager\\\")\\n@Slf4j\\npublic class ReleaseManagerImpl implements ReleaseManager {\\n\\n    @Resource\\n    private SprintService sprintService;\\n\\n    @Resource\\n    private ReleaseService releaseService;\\n\\n    @Resource\\n    private ReleaseRepository releaseRepository;\\n\\n    @Resource\\n    private Executor getAsyncExecutor;\\n\\n    @Resource\\n    private EnvironmentRepository environmentRepository;\\n\\n    @Resource\\n    private ReleaseClient releaseClient;\\n\\n    @Resource\\n    private ApplicationRepository applicationRepository;\\n    \\n    @Resource\\n    private SprintRepository sprintRepository;\\n    \\n    @Resource\\n    private ReleaseApplyDAO releaseApplyDAO;\\n    \\n    @Resource\\n    private ReleaseDAO releaseDAO;\\n\\n    @Resource\\n    private SprintDAO sprintDAO;\\n\\n    @Autowired\\n    private CenterConfig centerConfig;\\n\\n    @Autowired\\n    private HeraclesGitRepository heraclesGitRepository;\\n\\n    @Autowired\\n    private UserRoleService userRoleService;\\n\\n    @Autowired\\n    private EntranceGuardClient entranceGuardClient;\\n\\n    @Autowired\\n    private EntranceGuardRepository entranceGuardRepository;\\n\\n    @Autowired\\n    private Executor scanEntranceGuard;\\n\\n    @Autowired\\n    private EventSenderService eventSenderService;\\n\\n    @Autowired\\n    private List\\u003cAbstractCheckService\\u003e checkServices;\\n\\n    private static final String CONSUL_POST = \\\"/instances\\\";\\n\\n    @Override\\n    public Integer checkReleaseApplyRequest(String sprintId) {\\n        Sprint sprint = sprintService.queryBySprintId(sprintId);\\n        if(ReleaseApplyStatus.pass != sprint.getReleaseApplyStatus() ) {\\n        \\treturn 1;\\n        }else {\\n        \\tReleaseApply release = releaseApplyDAO.selectOneBySprintId(sprintId);\\n        \\tlong curr = new Date().getTime();\\n        \\tif (curr \\u003c release.getReleaseExpTime().getTime() || curr \\u003e release.getReleaseEndTime().getTime()) {\\n        \\t\\treturn 2;\\n        \\t}\\n        }\\n        return 0;\\n    }\\n\\n    @Override\\n    public String createReleaseOrderForSprint(String sprintId, String app, String operator) {\\n        Sprint sprint = sprintService.queryBySprintId(sprintId);\\n        log.info(\\\"sprint {}\\\", sprint);\\n        String releaseOrderId = releaseService.createReleaseOrderForSprint(sprint, app, operator);\\n        log.info(\\\"releaseOrderId {}\\\", releaseOrderId);\\n        return releaseOrderId;\\n    }\\n    \\n    @Override\\n    public CreateReleaseOrderResult createReleaseOrderForSprint(String sprintId, String operator) {\\n        Sprint sprint = sprintService.queryBySprintId(sprintId);\\n        log.info(\\\"sprint {}\\\", sprint);\\n        // 只有RC和PROD两个环境可以整体发布\\n        AssertUtil.isTrue(sprint.getStatus().getCode() \\u003e= SprintStatus.FINISH_TEST.getCode() \\u0026\\u0026\\n                        sprint.getStatus().getCode() \\u003c= SprintStatus.PROD.getCode(),\\n                BusinessErrorCode.ILLEGAL_SPRINT_STATUS);\\n        //运维可以在签报未通过的时候发布生产\\n        List\\u003cString\\u003e releaseOperators = releaseClient.getReleaseOperator();\\n        ReleaseApply releaseApply = sprintRepository.queryLastReleaseApply(sprint.getSprintId());\\n        Boolean relationReleaseApply = false;\\n        if (ReleaseApplyStatus.pass != sprint.getReleaseApplyStatus()) {\\n            AssertUtil.isTrue(StringUtils.containsIgnoreCase(releaseOperators.toString(), operator),\\n                    PARAM_ILLEGAL, \\\"发布申请未通过或未发起，只有运维才能创建生产\\\");\\n        } else if (ReleaseApplyStatus.pass == sprint.getReleaseApplyStatus()) {\\n            //签报通过但时间未超期,关联签报;否则不关联签报\\n            Date current = Calendar.getInstance().getTime();\\n            relationReleaseApply = releaseApply.getReleaseEndTime() != null \\u0026\\u0026 releaseApply.getReleaseEndTime().compareTo(current) \\u003e 0\\n                    \\u0026\\u0026 releaseApply.getReleaseExpTime() != null \\u0026\\u0026 releaseApply.getReleaseExpTime().compareTo(current) \\u003c 0;\\n        }\\n\\n        //所有受门禁管控的app信息\\n        Map\\u003cString, Application\\u003e appInfoList = sprint.getApplications().stream()\\n                .map(item -\\u003e applicationRepository.queryByAppName(item.getApp()))\\n                .distinct()\\n                .filter(application -\\u003e centerConfig.getEntranceGuardConf(Constants.ENTRANCE_GUARD_TEAMS_KEY).contains(application.getTeam()))\\n                .collect(Collectors.toMap(Application::getApplicationName, item -\\u003e item, (a, b) -\\u003e b));\\n        log.info(\\\"需要门禁验证的应用：{}\\\", JSONObject.toJSONString(appInfoList.keySet()));\\n        Boolean check = appInfoList.keySet().size() \\u003e 0 \\u0026\\u0026 sprint.getSprintType() == 1;\\n        if (check) {\\n            // 普通版本必须关联神兵\\n            int count = sprintService.querySprintFeatureCount(sprint.getSprintId());\\n            AssertUtil.isTrue(count \\u003e 0, NOT_BIND_WIZARD_PLAN, \\\"当前版本未关联神兵版本，请先完成关联！\\\");\\n        } else {\\n            //方向未管控,可直接创建发布单\\n            String releaseOrderId = releaseService.createReleaseOrderForSprint(sprint, operator, relationReleaseApply, releaseApply);\\n            log.info(\\\"releaseOrderId {}\\\", releaseOrderId);\\n            return new CreateReleaseOrderResult(releaseOrderId);\\n        }\\n        List\\u003cCompletableFuture\\u003cEntranceGuardTaskResult\\u003e\\u003e taskList = appInfoList.keySet().stream().map(key -\\u003e {\\n            Application application = appInfoList.get(key);\\n            EntranceGuardReq entranceGuardReq = new EntranceGuardReq(sprint.getWizardPlanId(), application.getBelongSystem(), application.getApplicationName());\\n            return CompletableFuture.supplyAsync(() -\\u003e\\n                    {\\n                        EntranceGuardResp entranceGuardResp = entranceGuardClient.acceptRequest(entranceGuardReq);\\n                        return new EntranceGuardTaskResult(entranceGuardResp, application);\\n                    }\\n                    , scanEntranceGuard);\\n        }).collect(Collectors.toList());\\n\\n        Boolean checkResult = true;\\n        // 解析结果\\n        for (CompletableFuture\\u003cEntranceGuardTaskResult\\u003e task : taskList) {\\n            try {\\n                EntranceGuardTaskResult entranceGuardTaskResult = task.get();\\n                if (entranceGuardTaskResult.getEntranceGuardResp() != null) {\\n                    // 门禁不过，但是试点时不管控，也可以创建发布单\\n                    if (entranceGuardTaskResult.getEntranceGuardResp().getCode() != 200) {\\n                        EntranceGuardResp entranceGuardResp = entranceGuardTaskResult.getEntranceGuardResp();\\n                        for (Data datum : entranceGuardResp.getData()) {\\n                            //场景验证不过\\n                            if (checkResult) {\\n                                Boolean scenario = centerConfig.getEntranceGuardConf(Constants.ENTRANCE_GUARD_SCENARIO_KEY).contains(datum.getName());\\n                                if (scenario \\u0026\\u0026 datum.getCount() != null \\u0026\\u0026 datum.getCount() \\u003e 0) {\\n                                    checkResult = false;\\n                                    break;\\n                                }\\n                            }\\n                        }\\n                    }\\n                    entranceGuardRepository.saveEntranceGuardInfo(sprint, entranceGuardTaskResult);\\n                }\\n            } catch (Exception e) {\\n                checkResult = false;\\n                log.error(\\\"陆吾门禁验证异常\\\", e);\\n            }\\n        }\\n\\n        String releaseOrderId = null;\\n        if (checkResult) {\\n            //门禁通过，创建发布单\\n            releaseOrderId = releaseService.createReleaseOrderForSprint(sprint, operator, relationReleaseApply, releaseApply);\\n            log.info(\\\"releaseOrderId {}\\\", releaseOrderId);\\n        }\\n\\n        return new CreateReleaseOrderResult(releaseOrderId, checkResult);\\n    }\\n\\n    @Override\\n    public String createReleaseOrderAtSpecEnv(String releaseName, String envName, String description,\\n                                              List\\u003cReleaseItemDto\\u003e releaseItemList, String operator) {\\n        String releaseOrderId = releaseService.createReleaseOrderAtSpecEnv(releaseName, envName, description,\\n                operator, releaseItemList);\\n        log.info(\\\"releaseOrderId {}\\\", releaseOrderId);\\n        return releaseOrderId;\\n    }\\n\\n    @Override\\n    public String sprintCreateReleaseOrderAtSpecEnv(String envName, List\\u003cReleaseItemDto\\u003e releaseItemList, String operator, String sprintId) {\\n        Sprint sprint = sprintService.queryBySprintId(sprintId);\\n        List\\u003cAppOfSprint\\u003e sprints = sprint.getApplications();\\n        log.info(\\\"sprints {}\\\", sprints);\\n        for (ReleaseItemDto dto : releaseItemList) {\\n            for (AppOfSprint appOfSprint : sprints) {\\n                if (dto.getAppName().equals(appOfSprint.getApp())) {\\n                    AssertUtil.isTrue(AppOfSprintStatus.getByName(envName).getCode() \\u003c= appOfSprint.getStatus().getCode(),\\n                            BusinessErrorCode.ILLEGAL_RELEASE_ENV);\\n                }\\n            }\\n        }\\n\\n        String releaseOrderId = releaseService.sprintCreateReleaseOrderAtSpecEnv(sprint, envName, releaseItemList, operator, sprintId);\\n        return releaseOrderId;\\n    }\\n\\n    @Override\\n    public void deployAtSpecEnv(String itemId, String operator, Boolean partition) {\\n        ReleaseOrder releaseOrder = releaseRepository.queryByItemId(itemId);\\n        this.checkProdUser(releaseOrder.getEnvName(), releaseOrder.getSprintId(), operator);\\n\\n        //单个应用item的状态\\n        ReleaseItemStatus status = releaseOrder.getReleaseItems().get(0).getStatus();\\n        log.info(\\\"单个应用itemStatus {}\\\", status);\\n        AssertUtil.isTrue((status == ReleaseItemStatus.INIT || status == ReleaseItemStatus.FAIL)\\n                , BusinessErrorCode.APP_DEPLOYING);\\n\\n        Environment environment = environmentRepository.queryByEnvName(releaseOrder.getEnvName());\\n        releaseClient.deploy(releaseOrder, environment, partition);\\n        releaseRepository.updateReleaseOrderAndRegionInfo(releaseOrder, partition, environment, operator);\\n\\n    }\\n\\n    private void checkProdUser(String envName, String sprintId, String operator) {\\n        log.info(\\\"Check operator\\\");\\n        List\\u003cString\\u003e releaseOperators = releaseClient.getReleaseOperator();\\n        if (envName.equals(\\\"RC\\\") || envName.equals(\\\"PROD\\\")) {\\n            AssertUtil.isTrue(StringUtils.containsIgnoreCase(releaseOperators.toString(), operator) \\n            \\t\\t|| sprintRepository.hasJoinDevSprint(sprintId, operator),\\n                    PARAM_ILLEGAL, \\\"目前只有运维和版本开发才能创建生产\\\");\\n        }\\n    }\\n\\n    @Override\\n    public void jenkinsCallback(String appName, int buildNo, int status, int envType) {\\n        ReleaseItemStatus itemStatus = ReleaseItemStatus.getByCode(status);\\n        log.info(\\\"itemStatus {}\\\", itemStatus);\\n        AssertUtil.isTrue((itemStatus == ReleaseItemStatus.SUCCESS || itemStatus == ReleaseItemStatus.FAIL)\\n                , BusinessErrorCode.ILLEGAL_APP_STATUS);\\n\\n        ReleaseItem releaseItem = releaseRepository.queryByAppNameAndBuildNo(appName, buildNo, envType);\\n        ReleaseOrder releaseOrder = releaseRepository.queryByOrderId(releaseItem.getOrderId());\\n        log.info(\\\"releaseItem releaseOrder -{} -{}\\\", releaseItem, releaseOrder);\\n\\n        releaseOrder.updateItemStatus(releaseItem.getItemId(), itemStatus);\\n        releaseRepository.updateReleaseOrderStatus(releaseOrder);\\n    }\\n\\n    @Override\\n    public ReleaseOrderView queryReleaseOrderStatus(String releaseOrderId) {\\n        ReleaseOrder releaseOrder = releaseService.queryReleaseOrder(releaseOrderId);\\n\\n        SimpleDateFormat formatter = new SimpleDateFormat(\\\"yyyy-MM-dd HH:mm\\\");\\n        log.info(\\\"Create Time Format {}\\\", formatter);\\n        ReleaseOrderView releaseOrderView = new ReleaseOrderView(releaseOrder.getOrderId(),\\n                releaseOrder.getReleaseName(), releaseOrder.getDescription(), releaseOrder.getEnvName(),\\n                releaseOrder.getStatus().getName(), releaseOrder.getOperator(),\\n                formatter.format(releaseOrder.getReleaseDate()));\\n        List\\u003cReleaseItemView\\u003e itemViewList = new ArrayList\\u003c\\u003e();\\n        for (ReleaseItem item : releaseOrder.getReleaseItems()) {\\n            String webPath = getWebPath(releaseOrder, item);\\n            log.info(\\\"webPath {}\\\", webPath);\\n            ReleaseItemView itemView = new ReleaseItemView(item.getItemId(), item.getAppName(),\\n                    item.getCodeRepos(), item.getCodeBranch(), item.getStatus().getName(),\\n                    item.getLogLink(), webPath, item.getTeam(), item.getProject(), item.getBelongSystem());\\n            itemViewList.add(itemView);\\n        }\\n        releaseOrderView.setItemList(itemViewList);\\n        return releaseOrderView;\\n    }\\n\\n    private String getWebPath(ReleaseOrder releaseOrder, ReleaseItem item) {\\n        Application application = applicationRepository.queryByAppName(item.getAppName());\\n        String webPath = \\\"\\\";\\n        if (application.getApplicationType() == ApplicationType.JAVA) {\\n            webPath = \\\"\\\";\\n        } else if (application.getApplicationType() == ApplicationType.H5) {\\n\\n            /**\\n             * USELESS, just for display\\n             * Need Verify\\n             */\\n            webPath = \\\"/web/v\\\" + releaseOrder.getEnvName() + \\\"/\\\" + item.getAppName() + \\\"/index.html#/login\\\";\\n            /*if (releaseOrder.getEnvName().length() \\u003e 4) {\\n                webPath = \\\"/web/v\\\" + releaseOrder.getEnvName().substring(4) + \\\"/\\\" + item.getAppName() + \\\"/index.html#/login\\\";\\n            } else {\\n                webPath = \\\"/web/v\\\" + releaseOrder.getEnvName() + \\\"/\\\" + item.getAppName() + \\\"/index.html#/login\\\";\\n            }*/\\n        }\\n        return webPath;\\n    }\\n\\n    @Override\\n    public Map\\u003cString, Object\\u003e queryReleaseOrderListBySprintId(String sprintId, int pageNum) {\\n        List\\u003cSimpleReleaseOrderDto\\u003e dtoList =\\n                releaseRepository.queryReleaseOrderListBySprintId(sprintId, pageNum);\\n        int total = releaseRepository.queryTotalOfSprint(sprintId);\\n\\n        Map\\u003cString, Object\\u003e map = new HashMap\\u003c\\u003e();\\n        map.put(\\\"releaseOrderList\\\", dtoList);\\n        map.put(\\\"total\\\", total);\\n        return map;\\n    }\\n\\n    @Override\\n    public Map\\u003cString, Object\\u003e queryPageOfReleaseOrder(int pageNum, String releaseName, String envName, String operator) {\\n        List\\u003cSimpleReleaseOrderDto\\u003e dtoList = releaseRepository.queryPageOfReleaseOrder(pageNum, releaseName, envName, operator);\\n        int total = releaseRepository.queryTotal(releaseName, envName, operator);\\n        Map\\u003cString, Object\\u003e map = new HashMap\\u003c\\u003e();\\n        map.put(\\\"releaseOrderList\\\", dtoList);\\n        map.put(\\\"total\\\", total);\\n        return map;\\n    }\\n\\n    @Override\\n    public void deployReleaseOrder(String releaseOrderId, Boolean partition) {\\n        ReleaseOrder releaseOrder = releaseRepository.queryByOrderId(releaseOrderId);\\n        Environment environment = environmentRepository.queryByEnvName(releaseOrder.getEnvName());\\n        releaseClient.deploy(releaseOrder, environment, partition);\\n        releaseRepository.updateReleaseOrderAndRegionInfo(releaseOrder, partition, environment, ThreadLocalHolder.getUserName());\\n    }\\n\\n    @Override\\n    public void deviceAdd(String appName) {\\n        releaseRepository.deviceAdd(appName);\\n    }\\n\\n    @Override\\n    public void deviceDelete(String appName) {\\n        releaseRepository.deviceDelete(appName);\\n    }\\n\\n    @Override\\n    public List\\u003cString\\u003e queryDeviceAppName() {\\n        return releaseRepository.queryDeviceAppName();\\n    }\\n\\n    @Override\\n    public Map\\u003cString, Object\\u003e queryPageOfReleaseOrderInfo(int pageNum, String releaseName, String releaseDate, String operator, String appName) {\\n        List\\u003cString\\u003e orderIds = new ArrayList\\u003c\\u003e();\\n        if (!StringUtils.isBlank(appName)) {\\n            orderIds = releaseService.queryReleaseyItemList(appName);\\n        }\\n        List\\u003cSimpleReleaseOrderDto\\u003e dtoList =\\n                releaseRepository.queryReleaseOrderList(releaseName, releaseDate, orderIds, operator, pageNum);\\n        int total = releaseRepository.queryReleaseOrderNum(releaseName, releaseDate, orderIds, operator);\\n        log.info(\\\"ReleaseOrderNum {}\\\", total);\\n\\n        Map\\u003cString, Object\\u003e map = new HashMap\\u003c\\u003e();\\n        map.put(\\\"releaseOrderList\\\", dtoList);\\n        map.put(\\\"total\\\", total);\\n        return map;\\n    }\\n\\n    @Override\\n    public void deployStrategy(String itemId, String operator, Boolean partition) {\\n        log.info(\\\"deployStrategy params, itemId: {}, operator: {}, partition: {}\\\", itemId, operator, partition);\\n        ReleaseOrder releaseOrder = releaseRepository.queryByItemId(itemId);\\n\\n        checkServices.forEach(checkService -\\u003e checkService.commonDeployCheck(releaseOrder, null, null));\\n\\n        DeployReq deployReq = DeployReq.builder()\\n                .itemId(itemId)\\n                .operator(operator)\\n                .partition(partition)\\n                .build();\\n        eventSenderService.sendMsgAndConfirmCallback(releaseOrder, deployReq);\\n    }\\n\\n    @Override\\n    public String deployStrategyReturnResult(String itemId, String operator, Boolean partition) {\\n        //多线程时副本没有userName需要重新设置\\n        ThreadLocalHolder.setUserName(operator);\\n        ReleaseOrder releaseOrder = releaseRepository.queryByItemId(itemId);\\n        for (CheckService checkService : checkServices) {\\n            String errorMsg = checkService.doService(releaseOrder, null, null);\\n            if (StringUtils.isNotBlank(errorMsg)) {\\n                return errorMsg;\\n            }\\n        }\\n\\n        // 发送消息\\n        eventSenderService.sendMsgAndConfirmCallback(releaseOrder,DeployReq.builder()\\n                        .itemId(itemId)\\n                        .operator(operator)\\n                        .partition(partition)\\n                .build());\\n\\n        return null;\\n    }\\n\\n    private void checkDeployCondition(String envName, ReleaseOrder releaseOrder, String dc, String dcEnv) {\\n        log.info(\\\"checkDeployCondition params:envName={},dc={},dcEnv={}\\\", envName, dc, dcEnv);\\n        if (envName.equals(\\\"RC\\\") || envName.equals(\\\"PROD\\\")) {\\n            AssertUtil.isTrue(ReleaseOrderStatus.INVALID != releaseOrder.getStatus(), ILLEGAL_RELEASE_ENV, \\\"该发布单已失效，不允许发布！\\\");\\n            if (releaseOrder.getSprintId() != null) {\\n                //如果有版本,但未关联签报只允许成功发布一次\\n                if (releaseOrder.getReleaseApplyId() == null) {\\n                    List\\u003cReleaseItem\\u003e releaseItems = releaseOrder.getReleaseItems();\\n                    //如果发布过\\n                    if (!CollectionUtils.isEmpty(releaseItems) \\u0026\\u0026 releaseItems.size() \\u003e 0 \\u0026\\u0026 StringUtils.isNotBlank(dc) \\u0026\\u0026 StringUtils.isNotBlank(dcEnv)) {\\n                        ReleaseItem releaseItem = releaseOrder.getReleaseItems().get(0);\\n                        ReleaseItemDcDO releaseItemDcDO = releaseDAO.queryOneByItemIdAndEnvAndDc(releaseItem.getItemId(), dcEnv, dc);\\n                        if (releaseItemDcDO != null) {\\n                            AssertUtil.isTrue(ReleaseItemStatus.SUCCESS != ReleaseItemStatus.getByCode(releaseItemDcDO.getStatus()), INEFFECTIVE_APPROVE, \\\"无有效签报，不允许重复发布！\\\");\\n                        }\\n                    }\\n                } else {\\n                    String releaseApplyId = releaseOrder.getReleaseApplyId();\\n                    Date releaseEndTime = releaseOrder.getReleaseEndTime();\\n                    Date releaseExpTime = releaseOrder.getReleaseExpTime();\\n                    Date currentDate = Calendar.getInstance().getTime();\\n                    AssertUtil.isTrue(releaseApplyId != null \\u0026\\u0026 (currentDate.compareTo(releaseExpTime) \\u003e 0 \\u0026\\u0026 currentDate.compareTo(releaseEndTime) \\u003c 0), INEFFECTIVE_APPROVE, \\\"签报通过不在预设时间内!\\\");\\n                }\\n                String sprintId = releaseOrder.getSprintId();\\n                SprintDO sprintDO = sprintDAO.querySprintById(sprintId);\\n                //创建发布单后如果回切版本状态，则不允许发布\\n                AssertUtil.isFalse(SprintStatus.UAT.getCode() == sprintDO.getStatus() || SprintStatus.SIT.getCode() == sprintDO.getStatus()\\n                                || SprintStatus.START.getCode() == sprintDO.getStatus() || SprintStatus.INIT.getCode() == sprintDO.getStatus()\\n                        , ILLEGAL_RELEASE_ENV, \\\"版本有应用为非测试完成状态，不允许发布!\\\");\\n            } else {\\n                if (StringUtils.isNotBlank(dc) \\u0026\\u0026 StringUtils.isNotBlank(dcEnv)) {\\n                    ReleaseItem releaseItem = releaseOrder.getReleaseItems().get(0);\\n                    ReleaseItemDcDO releaseItemDcDO = releaseDAO.queryOneByItemIdAndEnvAndDc(releaseItem.getItemId(), dcEnv, dc);\\n                    if (releaseItemDcDO != null) {\\n                        AssertUtil.isTrue(ReleaseItemStatus.SUCCESS != ReleaseItemStatus.getByCode(releaseItemDcDO.getStatus()), INEFFECTIVE_APPROVE, \\\"无有效签报，不允许重复发布！\\\");\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    private String branchCompare(ReleaseItem releaseItem) {\\n        BranchCompareConf branchCompareConf = centerConfig.getObject(Constants.BRANCH_COMPARE, BranchCompareConf.class);\\n        if (branchCompareConf == null || StringUtils.isBlank(branchCompareConf.getDeploy()) || \\\"no\\\".equalsIgnoreCase(branchCompareConf.getDeploy())) {\\n            return \\\"\\\";\\n        }\\n        Application application = applicationRepository.queryByAppName(releaseItem.getAppName());\\n        ApplicationType applicationType = application.getApplicationType();\\n        //过滤前端应用\\n        if (StringUtils.equalsIgnoreCase(application.getTeam(), \\\"front-end\\\") || ApplicationType.H5 == applicationType || ApplicationType.APOLLO_H5 == applicationType) {\\n            return \\\"\\\";\\n        }\\n        Boolean compare = heraclesGitRepository.branchCompare(releaseItem.getAppName(), releaseItem.getCodeRepos(), \\\"master\\\", releaseItem.getCodeBranch(), false);\\n        if (!compare) {\\n            return releaseItem.getAppName() + \\\"的\\\" + releaseItem.getCodeBranch() + \\\"分支不包含master最新代码;\\\";\\n        }\\n        return \\\"\\\";\\n    }\\n\\n    @Override\\n    public void deployDirect(String itemId, String operator, String dc, String dcEnv, Boolean partition) {\\n        log.info(\\\"deployDirect params: itemId: {}, operator: {}, dc: {}, dcEnv: {}, partition: {}\\\", itemId, operator, dc, dcEnv, partition);\\n        ReleaseOrder releaseOrder = releaseRepository.queryByItemId(itemId);\\n        for (CheckService checkService : checkServices) {\\n            checkService.commonDeployCheck(releaseOrder, dc, dcEnv);\\n        }\\n        //send deploy msg\\n        eventSenderService.sendMsgAndConfirmCallback(releaseOrder, DeployReq.builder()\\n                .itemId(itemId)\\n                .dc(dc)\\n                .dcEnv(dcEnv)\\n                .partition(partition)\\n                .operator(operator)\\n                .build());\\n    }\\n\\n    @Override\\n    public List\\u003cReleaseItemDcView\\u003e queryAllDc(String itemId) {\\n        log.info(\\\"queryAllDc\\\");\\n        return releaseRepository.queryAllReleaseItemDc(itemId).stream().map(item -\\u003e {\\n            ReleaseItemDcView view = new ReleaseItemDcView();\\n            view.setItemDcId(item.getItemDcId());\\n            view.setStatus(item.getStatus().getName());\\n            view.setResultUrl(item.getResultUrl());\\n            view.setJobName(item.getJobName());\\n            view.setTaskIndex(item.getTaskIndex());\\n            view.setDc(item.getDc());\\n            view.setDcEnv(item.getDcEnv());\\n\\n            return view;\\n        }).collect(Collectors.toList());\\n    }\\n\\n    @Override\\n    public ReleaseOrderView queryDeployResult(String releaseOrderId, Boolean isRemote) {\\n        ReleaseOrder releaseOrder;\\n        if (isRemote != null \\u0026\\u0026 isRemote) {\\n            releaseOrder = releaseService.queryDeployResult(releaseOrderId);\\n        } else {\\n            releaseOrder = releaseRepository.queryByOrderId(releaseOrderId);\\n            for (ReleaseItem releaseItem : releaseOrder.getReleaseItems()) {\\n                List\\u003cReleaseItemDc\\u003e itemDcList = releaseRepository.queryAllReleaseItemDc(releaseItem.getItemId());\\n                log.info(\\\"query all itemDcList {}\\\", itemDcList);\\n                releaseItem.setItemDcList(itemDcList);\\n            }\\n        }\\n        RoleDO roleDO = userRoleService.queryRole(ThreadLocalHolder.getUserName());\\n        Environment environment = environmentRepository.queryByEnvName(releaseOrder.getEnvName());\\n        int msgCount = checkServices.get(0).size(environment.getEnvType());\\n        ReleaseOrderView releaseOrderView = new ReleaseOrderView(releaseOrder.getOrderId(),\\n                releaseOrder.getReleaseName(), releaseOrder.getDescription(), releaseOrder.getEnvName(),\\n                releaseOrder.getStatus().getName(), releaseOrder.getOperator(), DateUtils.getTimeV2(releaseOrder.getReleaseDate()), releaseOrder.getPartition(), releaseOrder.getSprintId(),\\n                roleDO.getRoleId(), msgCount);\\n        releaseOrderView.setSprintId(releaseOrder.getSprintId());\\n        Map consulUrlMap = centerConfig.getObject(Constants.CONSUL_URL_PRE, Map.class);\\n        List\\u003cReleaseItemView\\u003e itemViewList = new ArrayList\\u003c\\u003e();\\n        for (ReleaseItem item : releaseOrder.getReleaseItems()) {\\n            String webPath = getWebPath(releaseOrder, item);\\n            log.info(\\\"Get webPath {}\\\", webPath);\\n            Integer rank = 0;\\n            if (item.getStatus() == ReleaseItemStatus.RANKING) {\\n                rank = checkServices.get(0).indexOf(environment.getEnvType(), item.getAppName());\\n            }\\n            ReleaseItemView itemView = new ReleaseItemView(item.getItemId(), item.getAppName(),\\n                    item.getCodeRepos(), item.getCodeBranch(), item.getStatus().getName(),\\n                    item.getLogLink(), webPath, item.getTeam(), item.getProject(), item.getBelongSystem(),rank);\\n            itemViewList.add(itemView);\\n\\n            if (!CollectionUtils.isEmpty(item.getItemDcList())) {\\n                Integer finalRank = rank;\\n                itemView.setItemDcList(item.getItemDcList().stream().map(itemDc -\\u003e {\\n                    ReleaseItemDcView view = new ReleaseItemDcView();\\n                    view.setItemDcId(itemDc.getItemDcId());\\n                    view.setJobName(itemDc.getJobName());\\n                    view.setDc(itemDc.getDc());\\n                    view.setDcEnv(itemDc.getDcEnv());\\n                    view.setRank(finalRank);\\n                    if (item.getStatus() == ReleaseItemStatus.RANKING) {\\n                        view.setStatus(item.getStatus().getName());\\n                        return view;\\n                    }\\n                    view.setResultUrl(itemDc.getResultUrl());\\n                    view.setTaskIndex(itemDc.getTaskIndex());\\n                    view.setStatus(itemDc.getStatus().getName());\\n                    view.setKeyword(itemDc.getKeyword());\\n                    if (ReleaseItemStatus.SUCCESS == itemDc.getStatus()) {\\n                        String consulUrl = consulUrlMap.get(itemDc.getDcEnv()) + item.getAppName() + CONSUL_POST;\\n                        if (StringUtils.isNotBlank(itemDc.getKeyword())) {\\n                            consulUrl = consulUrl + \\\"?filter=\\\" + itemDc.getKeyword();\\n                        }\\n                        view.setConsulUrl(consulUrl);\\n                    }\\n                    return view;\\n                }).collect(Collectors.toList()));\\n            }\\n        }\\n        releaseOrderView.setItemList(itemViewList);\\n        return releaseOrderView;\\n    }\\n\\n\\n    @Override\\n    public void deployBatch(List\\u003cString\\u003e itemIdList, String operator, Boolean partition) {\\n        log.info(\\\"deployBatch params: itemIdList: {}, operator: {}, partition: {}\\\", JSONObject.toJSONString(itemIdList), operator, partition);\\n        List\\u003cString\\u003e result = new ArrayList\\u003c\\u003e();\\n        List\\u003cCompletableFuture\\u003cString\\u003e\\u003e deployTaskList = itemIdList.stream().map(itemId -\\u003e CompletableFuture.supplyAsync(() -\\u003e\\n                deployStrategyReturnResult(itemId, operator, partition), getAsyncExecutor)).collect(Collectors.toList());\\n        deployTaskList.stream().forEach(task -\\u003e {\\n            try {\\n                String resultMsg = task.get();\\n                if (StringUtils.isNotBlank(resultMsg)) {\\n                    result.add(resultMsg);\\n                }\\n            } catch (Exception e) {\\n                log.error(\\\"发布失败:\\\", e.getMessage());\\n            }\\n        });\\n        if (result.size() \\u003e 0) {\\n            StringBuffer stringBuffer = new StringBuffer();\\n            result.forEach(item -\\u003e {\\n                stringBuffer.append(item).append(\\\"; \\\");\\n            });\\n            AssertUtil.isTrue(false, SYSTEM_ERROR, stringBuffer.toString());\\n        }\\n    }\\n\\n    @Override\\n    public void deployResultCallback(JenkinsDeployCallBack jenkinsDeployCallBack) {\\n        releaseService.deployResultCallback(jenkinsDeployCallBack);\\n    }\\n\\n    @Override\\n    public Map\\u003cString, Object\\u003e regionList(String sprintName, String regionName, SprintStatus sprintStatus,\\n                                          RegionStatusEnum regionStatus, SprintOwner sprintOwner, String app, int pageNum) {\\n        return releaseService.getRegionListPage(sprintName, regionName, sprintStatus, regionStatus, sprintOwner, app, pageNum);\\n    }\\n\\n    @Override\\n    public void regionRelease(String app, String regionName) {\\n        List\\u003cRegionReleaseResult\\u003e regionReleaseResults = releaseService.regionRelease(app, regionName);\\n        regionReleaseResults.forEach(regionReleaseResult -\\u003e AssertUtil.isTrue(regionReleaseResult.getSuccess(), SYSTEM_ERROR, \\\"回收失败\\\"));\\n    }\\n\\n    @Override\\n    public void deployBatchDirectAtDc(List\\u003cString\\u003e itemIdList, DcEnum dc) {\\n        //检查发布环境\\n        String operator = ThreadLocalHolder.getUserName();\\n        log.info(\\\"deployBatchDirectAtDc operator: {}, dc: {}, itemIdList: {} \\\", operator, dc, itemIdList);\\n        List\\u003cString\\u003e releaseOperators = releaseClient.getReleaseOperator();\\n        AssertUtil.isTrue(StringUtils.containsIgnoreCase(releaseOperators.toString(), operator),\\n                ILLEGAL_RELEASE_ENV, \\\"只有运维才能发布！\\\");\\n        ReleaseOrder releaseOrder = releaseRepository.queryByItemId(itemIdList.get(0));\\n        AssertUtil.isTrue(SprintStatus.PROD.getName().equals(releaseOrder.getEnvName()), ILLEGAL_RELEASE_ENV, \\\"只能发布生产\\\");\\n        AssertUtil.blank(releaseOrder.getSprintId(), ILLEGAL_RELEASE_ENV, \\\"有版本的发布单不允许发布！\\\");\\n        //req\\n        Map\\u003cReleaseItem, String\\u003e releaseItemsDeployReq = new HashMap\\u003c\\u003e();\\n        //查询环境\\n        Environment environment = environmentRepository.queryByEnvName(releaseOrder.getEnvName());\\n        for (String itemId : itemIdList) {\\n            ReleaseItemDO releaseItemDO = releaseDAO.queryReleaseItemByItemId(itemId);\\n            AssertUtil.notNull(releaseItemDO, PARAM_ILLEGAL, \\\"发布单数据不存在!\\\");\\n            //分支检查\\n            ReleaseItem item = new ReleaseItem(releaseItemDO.getOrderId(),\\n                    releaseItemDO.getItemId(),\\n                    ReleaseItemStatus.getByCode(releaseItemDO.getStatus()),\\n                    releaseItemDO.getAppName(),\\n                    releaseItemDO.getTeam(),\\n                    releaseItemDO.getProject(),\\n                    releaseItemDO.getCodeRepos(),\\n                    releaseItemDO.getCodeBranch(),\\n                    releaseItemDO.getLogLink(),\\n                    releaseItemDO.getBuildNo(),\\n                    JenkinsEnvType.getByCode(releaseItemDO.getEnvType()),\\n                    releaseItemDO.getBelongSystem());\\n            String branchCompare = branchCompare(item);\\n            AssertUtil.blank(branchCompare, ILLEGAL_RELEASE_ENV, branchCompare);\\n            //筛选dc\\n            ReleaseItemDcDO releaseItemDcDO = releaseDAO.queryOneByItemIdAndEnvAndDc(itemId, SprintStatus.PROD.getName().toLowerCase(), null);\\n            if (releaseItemDcDO != null) {\\n                //有成功发布记录,不再发布\\n                AssertUtil.isTrue(ReleaseItemStatus.SUCCESS != ReleaseItemStatus.getByCode(releaseItemDcDO.getStatus()), SYSTEM_ERROR, releaseItemDO.getAppName() + \\\"不允许重复发布！\\\");\\n                // 使用上次的机房发布\\n                releaseItemsDeployReq.put(item, releaseItemDcDO.getDc());\\n            } else {\\n                // 无发布记录，使用指定机房\\n                releaseItemsDeployReq.put(item, dc.getCode());\\n            }\\n        }\\n\\n        List\\u003cReleaseItem\\u003e releaseItems = releaseOrder.getReleaseItems();\\n        releaseItems.clear();\\n        // 发布\\n        Iterator\\u003cMap.Entry\\u003cReleaseItem, String\\u003e\\u003e iterator = releaseItemsDeployReq.entrySet().iterator();\\n        while (iterator.hasNext()) {\\n            Map.Entry\\u003cReleaseItem, String\\u003e entry = iterator.next();\\n            ReleaseItem releaseItem = entry.getKey();\\n            String dcStr = entry.getValue();\\n            DcEnum dcEnum = DcEnum.getByCode(entry.getValue());\\n            if (dcEnum != null) {\\n                //默认lfb\\n                dcStr = DcEnum.DEF == dcEnum ? DcEnum.LFB.getCode() : dcEnum.getCode();\\n            }\\n            if (StringUtils.isNotBlank(releaseItem.getTeam())) {\\n                releaseClient.deployDirect(new ReleaseOrder(releaseItem), environment, SprintStatus.PROD.getName().toLowerCase(), dcStr, false);\\n            } else {\\n                releaseClient.deploy(new ReleaseOrder(releaseItem), environment, false);\\n            }\\n            releaseItems.add(releaseItem);\\n        }\\n        releaseOrder.setStatus(ReleaseOrderStatus.PROCESSING);\\n        releaseRepository.updateReleaseOrderAndRegionInfo(releaseOrder, false, environment, operator);\\n    }\\n}\"\r\n                        },\r\n                        {\r\n                            \"Path\": \"src/main/java/com/poype/heracles/core/manager/impl/SprintManagerImpl.java\",\r\n                            \"Status\": \"M\",\r\n                            \"Content\": \"package com.poype.heracles.core.manager.impl;\\n\\nimport com.alibaba.fastjson.JSON;\\nimport com.alibaba.fastjson.JSONObject;\\nimport com.alibaba.fastjson.TypeReference;\\nimport com.poype.heracles.auth.facade.config.CenterConfig;\\nimport com.poype.heracles.common.constant.Constants;\\nimport com.poype.heracles.common.enums.*;\\nimport com.poype.heracles.common.util.AssertUtil;\\nimport com.poype.heracles.common.util.ThreadLocalHolder;\\nimport com.poype.heracles.core.domain.model.OperationRecord;\\nimport com.poype.heracles.core.domain.model.ReleaseApply;\\nimport com.poype.heracles.core.domain.model.application.Application;\\nimport com.poype.heracles.core.domain.model.application.config.BranchCompareConf;\\nimport com.poype.heracles.core.domain.model.code.CodeApiResponse;\\nimport com.poype.heracles.core.domain.model.code.StoryInfo;\\nimport com.poype.heracles.core.domain.model.dto.AppOfSprintDto;\\nimport com.poype.heracles.core.domain.model.dto.ApprovePersonConf;\\nimport com.poype.heracles.core.domain.model.dto.SimpleSprintDto;\\nimport com.poype.heracles.core.domain.model.dto.SprintUedRecordDto;\\nimport com.poype.heracles.core.domain.model.enums.*;\\nimport com.poype.heracles.core.domain.model.eoa.ReleaseOrderList;\\nimport com.poype.heracles.core.domain.model.sprint.AppOfSprint;\\nimport com.poype.heracles.core.domain.model.sprint.Sprint;\\nimport com.poype.heracles.core.domain.service.*;\\nimport com.poype.heracles.core.facade.request.SubmitApplyReq;\\nimport com.poype.heracles.core.facade.result.*;\\nimport com.poype.heracles.core.manager.SprintManager;\\nimport com.poype.heracles.core.repository.ApplicationRepository;\\nimport com.poype.heracles.core.repository.HeraclesGitRepository;\\nimport com.poype.heracles.core.repository.SprintRepository;\\nimport com.poype.heracles.core.repository.dao.SprintDAO;\\nimport com.poype.heracles.core.repository.dao.SprintRegionDao;\\nimport com.poype.heracles.core.repository.dao.model.SprintDO;\\nimport com.poype.heracles.core.repository.dao.model.SprintRegionDO;\\nimport com.poype.heracles.core.repository.integration.CodeApiClient;\\nimport lombok.extern.slf4j.Slf4j;\\nimport org.apache.commons.collections.CollectionUtils;\\nimport org.apache.commons.collections.map.HashedMap;\\nimport org.apache.commons.lang.StringUtils;\\nimport org.springframework.beans.factory.annotation.Autowired;\\nimport org.springframework.stereotype.Service;\\nimport org.springframework.transaction.annotation.Transactional;\\n\\nimport javax.annotation.Resource;\\nimport java.util.*;\\nimport java.util.concurrent.CompletableFuture;\\nimport java.util.concurrent.Executor;\\nimport java.util.stream.Collectors;\\n\\nimport static com.poype.heracles.common.enums.BusinessErrorCode.*;\\n\\n\\n@Service(\\\"sprintManager\\\")\\n@Slf4j\\npublic class SprintManagerImpl implements SprintManager {\\n\\n    @Resource\\n    private SprintService sprintService;\\n\\n    @Resource\\n    private SprintRepository sprintRepository;\\n\\n    @Resource\\n    private EventService eventService;\\n\\n    @Resource\\n    private ApplicationRepository applicationRepository;\\n\\n    @Resource\\n    private CodeApiClient codeApiClient;\\n\\n    @Resource\\n    private KafkaProducerService kafkaProducerService;\\n\\n    @Resource\\n    private SprintRegionDao sprintRegionDao;\\n\\n    @Autowired\\n    private ReleaseService releaseService;\\n\\n    @Autowired\\n    private HeraclesGitRepository heraclesGitRepository;\\n\\n    @Autowired\\n    private CenterConfig centerConfig;\\n\\n    @Resource\\n    private Executor getAsyncExecutor;\\n\\n    @Autowired\\n    private MessageCenterService messageCenterService;\\n\\n    @Autowired\\n    private SprintDAO sprintDAO;\\n\\n\\n    @Override\\n    public String createNewSprint(String name, String description, String releaseDate,\\n                                  List\\u003cAppOfSprintDto\\u003e sprintDtoList, String createUser,\\n                                  int printType, String signId, int useRc, List\\u003cSprintClassify\\u003e sprintClassify) {\\n\\n        for (AppOfSprintDto appOfSprintDto : sprintDtoList) {\\n            Application app = applicationRepository.queryByAppName(appOfSprintDto.getAppName());\\n            AssertUtil.isTrue((app.getApplicationStatus() == ApplicationStatus.SUCCESS),\\n                    BusinessErrorCode.ILLEGAL_APP_STATUS);\\n        }\\n\\n        String sprintId = sprintService.createNewSprint(name, description, releaseDate,\\n                sprintDtoList, createUser, printType, signId, useRc, sprintClassify);\\n\\n        // 异步创建版本中各个应用对应的分支\\n        eventService.sendSprintCreated(sprintId);\\n        return sprintId;\\n    }\\n\\n    @Override\\n    @Transactional\\n    public void update(String sprintId, List\\u003cAppOfSprintDto\\u003e appOfSprintDtoList, int useRc, String creator, String name) {\\n        Sprint sprint = sprintService.queryBySprintId(sprintId);\\n        Boolean checkResult = sprintService.featureCheckAccess(sprintId);\\n        AssertUtil.isTrue(checkResult, BUSINESS_CHECK_EXCEPTION, \\\"只有版本创建人、应用参与人和项目负责人有权限编辑修改\\\");\\n        sprintService.updateAppListOfSprint(sprint, appOfSprintDtoList);\\n        sprintRepository.updateSprintByUseRc(sprint.getSprintId(), UseRcEnum.getByCode(useRc), name);\\n        // 异步创建版本中各个应用对应的分支\\n        eventService.sendSprintCreated(sprintId);\\n\\n        //保存操作记录\\n        String data = sprintToData(sprintId, appOfSprintDtoList, useRc, name);\\n        OperationRecord record = createRecord(creator, OperationTypeEnum.SPRINT_UPDATE.getName(), name, data);\\n        eventService.sendOperationRecordSave(record);\\n    }\\n\\n    @Override\\n    public Sprint queryBySprintId(String sprintId) {\\n        return sprintService.queryBySprintId(sprintId);\\n    }\\n\\n    @Override\\n    public Map\\u003cString, Object\\u003e querySimpleSprintList(int pageNum, String sprintName, String releaseDate, String appName,\\n                                                     List\\u003cSprintOwner\\u003e sprintOwnerList, ReleaseApplyStatus releaseApplyStatus) {\\n        Map\\u003cString, Object\\u003e map = new HashMap\\u003c\\u003e();\\n        String user = ThreadLocalHolder.getUserName();\\n        Set\\u003cString\\u003e sprintIds = new HashSet\\u003c\\u003e();\\n        List\\u003cString\\u003e sprintIdList = new ArrayList\\u003c\\u003e();\\n        //应用名和参与人转换为版本ID,用于后续查询\\n        if (sprintOwnerList != null \\u0026\\u0026 sprintOwnerList.size() \\u003e 0) {\\n            for (SprintOwner sprintOwner : sprintOwnerList) {\\n                if (SprintOwner.join == sprintOwner) {\\n                    //参与人字段多值凭借，所有用like\\n                    List\\u003cString\\u003e sprintList = sprintRepository.querySprintIdFromAppofsprint(null, \\\"%\\\" + user + \\\"%\\\");\\n                    sprintIds.addAll(sprintList);\\n                } else if (SprintOwner.owner == sprintOwner) {\\n                    List\\u003cString\\u003e sprintList = sprintRepository.querySprintIdFromSprint(user);\\n                    sprintIds.addAll(sprintList);\\n                }\\n            }\\n            //如果没有我参与的和我创建的数据返回空\\n            if (CollectionUtils.isEmpty(sprintIds)) {\\n                map.put(\\\"sprintList\\\", new ArrayList\\u003c\\u003e());\\n                map.put(\\\"total\\\", 0);\\n                return map;\\n            }\\n            sprintIdList = new ArrayList\\u003c\\u003e(sprintIds);\\n            if (StringUtils.isNotBlank(appName)) {\\n                //需要根据应用名字取交集\\n                List\\u003cString\\u003e sprintList = sprintRepository.querySprintIdFromAppofsprint(appName, null);\\n                sprintIdList = (List\\u003cString\\u003e) CollectionUtils.intersection(sprintIds, sprintList);\\n                if (CollectionUtils.isEmpty(sprintIdList)) {\\n                    //无交集直接返回\\n                    map.put(\\\"sprintList\\\", new ArrayList\\u003c\\u003e());\\n                    map.put(\\\"total\\\", 0);\\n                    return map;\\n                }\\n            }\\n        }else{\\n            if (StringUtils.isNotBlank(appName)) {\\n                sprintIdList = sprintRepository.querySprintIdFromAppofsprint(appName, null);\\n                //需要应用名字精准查询\\n                if (CollectionUtils.isEmpty(sprintIdList)) {\\n                    map.put(\\\"sprintList\\\", new ArrayList\\u003c\\u003e());\\n                    map.put(\\\"total\\\", 0);\\n                    return map;\\n                }\\n            }\\n        }\\n\\n        //版本名称支持模糊查询\\n        sprintName = StringUtils.isEmpty(sprintName) ? null : \\\"%\\\" + sprintName + \\\"%\\\";\\n        //查询总数\\n        int total = sprintRepository.queryTotalFromSprint(sprintName, releaseDate, sprintIdList, releaseApplyStatus);\\n        //查询结果集\\n        List\\u003cSimpleSprintDto\\u003e simpleSprintDtoList = new ArrayList\\u003c\\u003e();\\n        if (total \\u003e 0) {\\n            simpleSprintDtoList = sprintRepository.queryPageFromSprint(pageNum, sprintName, releaseDate, sprintIdList, releaseApplyStatus);\\n        }\\n        //组装响应体\\n        map.put(\\\"sprintList\\\", simpleSprintDtoList);\\n        map.put(\\\"total\\\", total);\\n\\n        return map;\\n    }\\n    @Override\\n    public void deleteSprint(String sprintId, String creator) {\\n        List\\u003cSprintRegionDO\\u003e sprintRegionDOList = sprintRegionDao.queryBySprintId(sprintId);\\n        Optional.ofNullable(sprintRegionDOList).orElse(new ArrayList\\u003c\\u003e()).stream().filter(item -\\u003e {\\n            RegionStatusEnum regionStatusEnum = RegionStatusEnum.getByCode(item.getRegionStatus());\\n            return !RegionStatusEnum.c_released.equals(regionStatusEnum);\\n        }).findFirst().ifPresent(item -\\u003e {\\n            AssertUtil.isTrue(false, PARAM_ILLEGAL,\\\"不允许删除版本，尚有分区资源未回收！\\\");\\n        });\\n        Sprint sprint = sprintRepository.queryBySprintId(sprintId);\\n        sprintService.deleteSprint(sprintId, creator);\\n\\n        //保存操作记录\\n        List\\u003cAppOfSprintDto\\u003e appOfSprintDtoList = new ArrayList\\u003c\\u003e();\\n        for (AppOfSprint appOfSprint : sprint.getApplications()) {\\n            AppOfSprintDto sprintDto = new AppOfSprintDto();\\n            sprintDto.setAppName(appOfSprint.getApp());\\n            sprintDto.setDevList(appOfSprint.getDevList());\\n            sprintDto.setQaList(appOfSprint.getQaList());\\n            appOfSprintDtoList.add(sprintDto);\\n        }\\n        String data = sprintToData(sprintId, appOfSprintDtoList, sprint.getUseRc().getCode(), sprint.getSprintName());\\n        OperationRecord record = createRecord(creator, OperationTypeEnum.SPRINT_DELETE.getName(), sprint.getSprintName(), data);\\n        eventService.sendOperationRecordSave(record);\\n    }\\n\\n    @Override\\n    public TransferAppStatusResult transferAppOfSprintStatus(String sprintId, String app, String status, String userName) {\\n        log.info(\\\"transferAppOfSprintStatus,sprintId: {},app: {},status: {},user: {}\\\",sprintId,app,status,ThreadLocalHolder.getUserName());\\n        Sprint sprint = sprintRepository.queryBySprintId(sprintId);\\n        TransferAppStatusResult transferAppStatusResult = sprintService.transferAppOfSprintStatus(sprint, app, status, userName);\\n        //保存操作记录\\n        List\\u003cString\\u003e strings = new ArrayList\\u003c\\u003e();\\n        strings.add(app);\\n        String data = statusToData(sprintId, app, strings, sprint.getStatus().getName(), status);\\n        OperationRecord record = createRecord(userName, OperationTypeEnum.SPRINT_UPDATE_STATUS_APP.getName(), sprint.getSprintName(), data);\\n        eventService.sendOperationRecordSave(record);\\n\\n        return transferAppStatusResult;\\n    }\\n\\n    @Override\\n    public String transferWholeSprintStatus(String sprintId, String status, String operator) {\\n        sprintService.transferWholeSprintStatus(sprintId, status);\\n\\n        Sprint sprint = sprintRepository.queryBySprintId(sprintId);\\n        //保存操作记录\\n        List\\u003cString\\u003e strings = sprint.getApplications().stream().map(AppOfSprint::getApp).collect(Collectors.toList());\\n        String data = statusToData(sprintId, sprint.getSprintName(), strings, sprint.getStatus().getName(), status);\\n        OperationRecord record = createRecord(operator, OperationTypeEnum.SPRINT_UPDATE_STATUS.getName(), sprint.getSprintName(), data);\\n        eventService.sendOperationRecordSave(record);\\n\\n        if (SprintStatus.getByName(status) == SprintStatus.FINISH_PROD_VERIFY) {\\n            // 推送生产验收通过消息\\n            try {\\n                messageCenterService.publicAttendance(sprint);\\n            } catch (Exception e) {\\n                log.warn(\\\"publicAttendance error,\\\", e);\\n            }\\n            if (PartitionRecovery.auto == sprint.getPartitionRecovery()) {\\n                //分区资源回收\\n                List\\u003cSprintRegionDO\\u003e sprintRegionDOList = sprintRegionDao.queryBySprintId(sprintId);\\n                List\\u003cCompletableFuture\\u003cList\\u003cRegionReleaseResult\\u003e\\u003e\\u003e taskList = Optional.ofNullable(sprintRegionDOList).orElse(new ArrayList\\u003c\\u003e()).stream()\\n                        .map(sprintRegionDo -\\u003e\\n                                CompletableFuture.supplyAsync(() -\\u003e\\n                                        releaseService.regionRelease(sprintRegionDo.getApp(), sprintRegionDo.getRegionName()), getAsyncExecutor))\\n                        .collect(Collectors.toList());\\n                //添加守护线程\\n                CompletableFuture.allOf(taskList.toArray(new CompletableFuture[0])).join();\\n\\n                List\\u003cList\\u003cRegionReleaseResult\\u003e\\u003e alResult = taskList.stream().map(i -\\u003e {\\n                    try {\\n                        return i.get();\\n                    } catch (Exception e) {\\n                        log.error(\\\"分区回收结果解析失败：\\\", e);\\n                        return null;\\n                    }\\n                }).filter(Objects::nonNull).collect(Collectors.toList());\\n                if (alResult.stream().flatMap(Collection::stream).anyMatch(regionReleaseResult -\\u003e !regionReleaseResult.getSuccess())) {\\n                    return \\\"分区资源回收失败\\\";\\n                }\\n            }\\n        }\\n\\n        return \\\"\\\";\\n    }\\n\\n    @Override\\n    public void transferSprintStatusForClose(String sprintId, String status, String userName) {\\n        log.info(\\\"transferSprintStatusForClose,sprintId: {},status: {},user: {}\\\", sprintId, status, userName);\\n\\n        List\\u003cString\\u003e strings = new ArrayList\\u003c\\u003e();\\n        //分支比较\\n        BranchCompareConf branchCompareConf = centerConfig.getObject(Constants.BRANCH_COMPARE, BranchCompareConf.class);\\n        boolean compare = branchCompareConf != null \\u0026\\u0026 StringUtils.isNotBlank(branchCompareConf.getTransferSprintStatus())\\n                \\u0026\\u0026 !\\\"no\\\".equalsIgnoreCase(branchCompareConf.getTransferSprintStatus());\\n        Sprint sprint = sprintRepository.queryBySprintId(sprintId);\\n\\n        List\\u003cCompletableFuture\\u003cBranchResult\\u003e\\u003e branchCompareTaskList = new ArrayList\\u003c\\u003e();\\n        for (AppOfSprint appOfSprint : sprint.getApplications()) {\\n            //验收且关闭检查\\n            List\\u003cSprintDO\\u003e sprintDOS = sprintDAO.queryAllProdSprintByAppName(appOfSprint.getApp(), sprint.getSprintId());\\n            AssertUtil.isTrue(sprintDOS == null || sprintDOS.size() == 0,\\n                    BusinessErrorCode.ILLEGAL_RELEASE_ENV, \\\"该版本下有应用在其他版本【\\\" +\\n                            sprintDOS.stream().findFirst().orElse(new SprintDO()).getSprintName() + \\\"】中未通过验收或版本未关闭，请验收并关闭版本之后再操作此版本发布！\\\");\\n            if (compare) {\\n                Application application = applicationRepository.queryByAppName(appOfSprint.getApp());\\n                ApplicationType applicationType = application.getApplicationType();\\n                //过滤前端应用\\n                if (!(StringUtils.equalsIgnoreCase(application.getTeam(), \\\"front-end\\\") || ApplicationType.H5 == applicationType || ApplicationType.APOLLO_H5 == applicationType)) {\\n                    CompletableFuture\\u003cBranchResult\\u003e branchCompareTask = CompletableFuture.supplyAsync(() -\\u003e {\\n                        Boolean compareResult = heraclesGitRepository.branchCompare(appOfSprint.getApp(), appOfSprint.getCodeRepository(), appOfSprint.getCodeBranch(), \\\"master\\\", true);\\n                        return BranchResult.builder()\\n                                .result(compareResult)\\n                                .appOfSprint(appOfSprint)\\n                                .build();\\n                    }, getAsyncExecutor);\\n                    branchCompareTaskList.add(branchCompareTask);\\n                }\\n            }\\n            strings.add(appOfSprint.getApp());\\n        }\\n\\n        for (CompletableFuture\\u003cBranchResult\\u003e branchResultCompletableFuture : branchCompareTaskList) {\\n            BranchResult branchResult = null;\\n            try {\\n                branchResult = branchResultCompletableFuture.get();\\n            } catch (Exception e) {\\n                log.error(\\\"解析分支比较结果异常：\\\", e);\\n                continue;\\n            }\\n            AssertUtil.isTrue(branchResult.getResult(), ILLEGAL_RELEASE_ENV, branchResult.getAppOfSprint().getApp()\\n                    + \\\",\\\" + branchResult.getAppOfSprint().getCodeBranch() + \\\"分支未合并master！\\\");\\n        }\\n        //修改状态\\n        sprintService.transferWholeSprintStatus(sprintId, status);\\n        //保存操作记录\\n        String data = statusToData(sprintId, sprint.getSprintName(), strings, sprint.getStatus().getName(), status);\\n        OperationRecord record = createRecord(userName, OperationTypeEnum.SPRINT_UPDATE_STATUS.getName(), sprint.getSprintName(), data);\\n        eventService.sendOperationRecordSave(record);\\n    }\\n\\n\\n    @Override\\n    public SprintStoryView queryStoryBySprintId(String id, String releaseName) {\\n        JSONObject storyList = codeApiClient.getStoryList(id, true, releaseName, true, true, true, \\\"false\\\");\\n        log.info(\\\"获取storyList集合：{}\\\", storyList);\\n        CodeApiResponse\\u003cList\\u003cStoryInfo\\u003e\\u003e response = JSON.parseObject(storyList.toJSONString(), new TypeReference\\u003cCodeApiResponse\\u003cList\\u003cStoryInfo\\u003e\\u003e\\u003e() {\\n        });\\n        log.info(\\\"response数据：{}\\\", response);\\n        List\\u003cStoryInfo\\u003e storyInfoList = response.getData();\\n        log.info(\\\"storyInfoList数据： {}\\\", storyInfoList);\\n        log.info(\\\"storyInfoList数据条数： {}\\\", storyInfoList.size());\\n        SprintStoryView sprintStoryView = new SprintStoryView();\\n        List\\u003cString\\u003e hasCommittedList = new ArrayList\\u003c\\u003e();\\n        List\\u003cString\\u003e codeReviewStateList = new ArrayList\\u003c\\u003e();\\n        List\\u003cString\\u003e testCaseIdList = new ArrayList\\u003c\\u003e();\\n        List\\u003cStoryView\\u003e story = new ArrayList\\u003c\\u003e();\\n        if (storyInfoList.size() \\u003e 0) {\\n            for (StoryInfo storyInfo : storyInfoList) {\\n                log.info(\\\"storyInfo {}\\\", storyInfo);\\n                //代码是否提交包含false，是否关联用例包含false，代码是否评审全部为false，以上满足任一一个则为false。\\n                Boolean hasCommitted = storyInfo.getHasCommitted();\\n                if (!StringUtils.isBlank(String.valueOf(hasCommitted))) {\\n                    hasCommittedList.add(String.valueOf(hasCommitted));\\n                }\\n                String codeReviewState = storyInfo.getCodeReviewState();\\n                if (!StringUtils.isBlank(codeReviewState)) {\\n                    codeReviewStateList.add(codeReviewState);\\n                }\\n                String testCaseIds = storyInfo.getTestCaseIds();\\n                if (!StringUtils.isBlank(testCaseIds)) {\\n                    testCaseIdList.add(testCaseIds);\\n                }\\n                sprintStoryView.setStoryViewList(getStoryList(storyInfo, story));\\n            }\\n            log.info(\\\"hasCommittedLists数据,codeReviewStateList数据,testCaseIdList数据 {} {} {}\\\", hasCommittedList, codeReviewStateList, testCaseIdList);\\n            if (hasCommittedList.contains(\\\"false\\\") \\u0026\\u0026 getAbnReason(codeReviewStateList) \\u0026\\u0026 storyInfoList.size() != testCaseIdList.size()) {\\n                sprintStoryView.setSprintResult(false);\\n                sprintStoryView.setAbnReason(\\\"存在未提交代码的用户故事,用户故事未完成代码评审,用户故事未关联测试用例\\\");\\n            } else if (hasCommittedList.contains(\\\"false\\\") \\u0026\\u0026 getAbnReason(codeReviewStateList)) {\\n                sprintStoryView.setSprintResult(false);\\n                sprintStoryView.setAbnReason(\\\"存在未提交代码的用户故事,用户故事未完成代码评审\\\");\\n            } else if (hasCommittedList.contains(\\\"false\\\") \\u0026\\u0026 storyInfoList.size() != testCaseIdList.size()) {\\n                sprintStoryView.setSprintResult(false);\\n                sprintStoryView.setAbnReason(\\\"存在未提交代码的用户故事,用户故事未关联测试用例\\\");\\n            } else if (getAbnReason(codeReviewStateList) \\u0026\\u0026 storyInfoList.size() != testCaseIdList.size()) {\\n                sprintStoryView.setSprintResult(false);\\n                sprintStoryView.setAbnReason(\\\"用户故事未完成代码评审,用户故事未关联测试用例\\\");\\n            } else if (getAbnReason(codeReviewStateList)) {\\n                sprintStoryView.setSprintResult(false);\\n                sprintStoryView.setAbnReason(\\\"用户故事未完成代码评审\\\");\\n            } else if (storyInfoList.size() != testCaseIdList.size()) {\\n                sprintStoryView.setSprintResult(false);\\n                sprintStoryView.setAbnReason(\\\"用户故事未关联测试用例\\\");\\n            } else if (hasCommittedList.contains(\\\"false\\\")) {\\n                sprintStoryView.setSprintResult(false);\\n                sprintStoryView.setAbnReason(\\\"存在未提交代码的用户故事\\\");\\n            } else {\\n                sprintStoryView.setSprintResult(true);\\n                sprintStoryView.setAbnReason(\\\"未发现异常信息\\\");\\n            }\\n        }\\n        return sprintStoryView;\\n    }\\n\\n    private Boolean getAbnReason(List\\u003cString\\u003e codeReviewStateList) {\\n        if (codeReviewStateList.contains(CodeReviewStateEnum.NONE.getCode()) ||\\n                codeReviewStateList.contains(CodeReviewStateEnum.NOT_PASSED.getCode()) ||\\n                codeReviewStateList.contains(CodeReviewStateEnum.NOT_SUBMIT.getCode()) ||\\n                codeReviewStateList.contains(CodeReviewStateEnum.UNUSABLE.getCode()) ||\\n                codeReviewStateList.contains(CodeReviewStateEnum.REVIEWING.getCode())) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    private List\\u003cStoryView\\u003e getStoryList(StoryInfo storyInfo, List\\u003cStoryView\\u003e story) {\\n        StoryView storyView = new StoryView();\\n        storyView.setStoryName(storyInfo.getName());\\n        storyView.setReviewCode(storyInfo.getCodeReviewState().equals(CodeReviewStateEnum.PASSED.getCode()));\\n        storyView.setSsExample(!StringUtils.isBlank(storyInfo.getTestCaseIds()));\\n        storyView.setSubmitCode(storyInfo.getHasCommitted());\\n        story.add(storyView);\\n        return story;\\n    }\\n\\n    private String sprintToData(String sprintId, List\\u003cAppOfSprintDto\\u003e appOfSprintDtoList, int useRc, String name) {\\n        Map\\u003cString, Object\\u003e dataMap = new HashedMap();\\n        dataMap.put(\\\"sprintId\\\", sprintId);\\n        dataMap.put(\\\"appOfSprintDtoList\\\", appOfSprintDtoList);\\n        dataMap.put(\\\"useRc\\\", useRc);\\n        dataMap.put(\\\"name\\\", name);\\n        return JSONObject.toJSONString(dataMap);\\n    }\\n\\n    private OperationRecord createRecord(String operator, String operationType, String targetName, String data) {\\n        OperationRecord record = new OperationRecord();\\n        record.setData(data);\\n        record.setOperator(operator);\\n        record.setOperationType(operationType);\\n        record.setTargetName(targetName);\\n        return record;\\n    }\\n\\n    private String statusToData(String sprintId, String sprintName, List\\u003cString\\u003e appList, String oldStatus, String status) {\\n        Map\\u003cString, Object\\u003e dataMap = new HashedMap();\\n        dataMap.put(\\\"sprintId\\\", sprintId);\\n        dataMap.put(\\\"sprintName\\\", sprintName);\\n        dataMap.put(\\\"appList\\\", appList);\\n        dataMap.put(\\\"oldStatus\\\", oldStatus);\\n        dataMap.put(\\\"newStatus\\\", status);\\n        return JSONObject.toJSONString(dataMap);\\n    }\\n\\n    @Override\\n    public QueryReleaseApplyResultList queryReleaseApplyList(int pageNum, String sprintId) {\\n        log.info(\\\"query release apply list param，pageNum: {},sprintId: {}\\\", pageNum, sprintId);\\n        //获取总条数\\n        int total = sprintRepository.queryTotalReleaseApply(sprintId);\\n        List\\u003cQueryReleaseApply\\u003e list = new ArrayList\\u003c\\u003e();\\n        if (total \\u003e 0) {\\n            list = sprintRepository.queryPageReleaseApply(sprintId, pageNum);\\n        }\\n        log.info(\\\"query release apply list, total: {}\\\", total);\\n        return QueryReleaseApplyResultList.builder()\\n                .total(total)\\n                .applyList(list)\\n                .build();\\n    }\\n\\n    @Override\\n    public String createAndSubmit(String createUser, SubmitApplyReq request) {\\n        return sprintRepository.createAndSubmit(createUser, request);\\n    }\\n\\n    @Override\\n    public boolean syncSprintData() {\\n        try {\\n            log.info(\\\"sync release data to header start !\\\");\\n            List\\u003cSimpReleaseData\\u003e simpReleaseDataList = sprintRepository.querySimpleReleaseData();\\n            log.info(\\\"sync release data to header, send title: {}\\\", simpReleaseDataList.size());\\n            simpReleaseDataList.forEach(kafkaProducerService::sendReleaseData);\\n            log.info(\\\"sync release data to header end !\\\");\\n        } catch (Exception e) {\\n            log.error(\\\"sync release data to header error!\\\", e);\\n            return false;\\n        }\\n        return true;\\n    }\\n\\n    @Override\\n    public boolean uedConfirm(String sprintId, UedResult uedResult, String uedDesc, String uedUser) {\\n        try {\\n            sprintRepository.updateUedInfoAndSaveRecord(sprintId, uedResult, uedDesc, uedUser);\\n        } catch (Exception e) {\\n            AssertUtil.isTrue(false, BusinessErrorCode.UED_CONFIRM_ERROR, \\\"sprintId不存在或插入记录表失败！\\\");\\n        }\\n        return true;\\n    }\\n\\n    @Override\\n    public List\\u003cSprintUedRecordDto\\u003e querySprintUedRecord(String sprintId) {\\n        return sprintService.querySprintUedRecord(sprintId);\\n    }\\n\\n    @Override\\n    public boolean setPartitionRecovery(String sprintId, PartitionRecovery partitionRecovery) {\\n        return sprintRepository.updatePartitionRecovery(sprintId, partitionRecovery);\\n    }\\n\\n    @Override\\n    public List\\u003cReleaseOrderList\\u003e queryReleaseOrderList(String sprintId, ReleaseOrderCfg releaseOrderConf) {\\n        return sprintService.querySimpleReleaseOrderList(sprintId, releaseOrderConf);\\n    }\\n\\n    @Override\\n    public SubmitApplyView queryApplyInfo(String sprintId, String releaseApplyId) {\\n        return sprintService.queryApplyInfo(sprintId, releaseApplyId);\\n    }\\n\\n    @Override\\n    public String saveApply(String createUser, SubmitApplyReq request) {\\n        return sprintRepository.saveApply(createUser, request);\\n    }\\n\\n    @Override\\n    public List\\u003cString\\u003e queryApprovePerson(PrimaryLabelEnum primaryLabel) {\\n        return sprintRepository.queryApprovePerson(primaryLabel);\\n    }\\n\\n    @Override\\n    public List\\u003cApprovePersonConf\\u003e queryApprovePersonConfBySprintId(String sprintId) {\\n        return sprintService.queryApprovePersonConfFilter(sprintId);\\n    }\\n\\n    @Override\\n    public void querySsdlcRecord(String springId, String appName, AppOfSprintView appOfSprintView) {\\n         sprintService.querySsdlcRecord(springId, appName, appOfSprintView);\\n    }\\n\\n    @Override\\n\\tpublic ReleaseApply queryLastReleaseApply(String sprintId) {\\n\\t\\treturn sprintRepository.queryLastReleaseApply(sprintId);\\n\\t}\\n\\n    @Override\\n    public SprintView querySprintDetail(String sprintId) {\\n        Sprint sprint = queryBySprintId(sprintId);\\n        SprintView sprintView = new SprintView();\\n        sprintView.setSprintId(sprint.getSprintId());\\n        sprintView.setName(sprint.getSprintName());\\n        sprintView.setDescription(sprint.getDescription());\\n        sprintView.setReleaseDate(sprint.getReleaseDate());\\n        sprintView.setStatus(sprint.getStatus().getName());\\n        sprintView.setTestEnv(sprint.getSitEnvName());\\n        sprintView.setSprintType(sprint.getSprintType());\\n        sprintView.setSignId(sprint.getSignId());\\n        sprintView.setUseRc(sprint.getUseRc().getCode());\\n        //新增\\n        sprintView.setReleaseApplyStatus(sprint.getReleaseApplyStatus());\\n        sprintView.setSprintClassify(sprint.getSprintClassify());\\n        sprintView.setUedResult(sprint.getUedResult());\\n        sprintView.setUedDesc(sprint.getUedDesc());\\n        sprintView.setPartitionRecovery(sprint.getPartitionRecovery());\\n        sprintView.setSprintCreatorUm(sprint.getSprintCreator());\\n\\n        List\\u003cAppOfSprintView\\u003e appList = new ArrayList\\u003c\\u003e();\\n        for (AppOfSprint appOfSprint : sprint.getApplications()) {\\n            AppOfSprintView appOfSprintView = new AppOfSprintView();\\n            appOfSprintView.setAppName(appOfSprint.getApp());\\n            appOfSprintView.setCodeBranch(appOfSprint.getCodeBranch());\\n            appOfSprintView.setCodeRepos(appOfSprint.getCodeRepository());\\n            appOfSprintView.setAppType(appOfSprint.getAppType().getName());\\n            appOfSprintView.setStatus(appOfSprint.getStatus().getName());\\n            appOfSprintView.setDevList(appOfSprint.getDevList());\\n            appOfSprintView.setQaList(appOfSprint.getQaList());\\n            sprintService.querySsdlcRecord(sprintId, appOfSprint.getApp(), appOfSprintView);\\n            // 门禁检查记录\\n            List\\u003cEntranceGuardDataView\\u003e entranceGuardResultList = sprintService.queryEntranceGuardSimpleInfoOfApp(sprint, appOfSprint);\\n            if (entranceGuardResultList.size() \\u003e 0) {\\n                appOfSprintView.setEntranceGuardListResult(entranceGuardResultList);\\n            }\\n            appList.add(appOfSprintView);\\n        }\\n        sprintView.setAppList(appList);\\n        //设置版本申请ID\\n        ReleaseApply releaseApply = sprintRepository.queryLastReleaseApply(sprintId);\\n        sprintView.setReleaseApplyId(releaseApply == null ? null : releaseApply.getId());\\n        int count = sprintService.querySprintFeatureCount(sprintId);\\n        sprintView.setHaveFeature(count \\u003e 0);\\n        return sprintView;\\n    }\\n\\n}\"\r\n                        },\r\n                        {\r\n                            \"Path\": \"src/main/java/com/poype/heracles/core/repository/ReleaseRepository.java\",\r\n                            \"Status\": \"M\",\r\n                            \"Content\": \"package com.poype.heracles.core.repository;\\n\\nimport com.poype.heracles.core.domain.model.Environment;\\nimport com.poype.heracles.core.domain.model.ReleaseItem;\\nimport com.poype.heracles.core.domain.model.ReleaseItemDc;\\nimport com.poype.heracles.core.domain.model.ReleaseOrder;\\nimport com.poype.heracles.core.domain.model.dto.SimpleReleaseOrderDto;\\nimport com.poype.heracles.core.domain.model.ioc.IocApplyDeploy;\\n\\nimport java.util.Date;\\nimport java.util.List;\\nimport java.util.Set;\\n\\npublic interface ReleaseRepository {\\n\\n    void saveReleaseOrder(ReleaseOrder releaseOrder);\\n\\n    void updateReleaseOrderStatus(ReleaseOrder releaseOrder);\\n\\n    void updateReleaseOrderAndRegionInfo(ReleaseOrder releaseOrder, Boolean partition, Environment environment, String operator);\\n\\n    void saveRegionInfo(ReleaseOrder releaseOrder, Boolean partition, Environment environment, String operator);\\n\\n    ReleaseOrder queryByOrderId(String orderId);\\n\\n    ReleaseOrder queryByItemId(String itemId);\\n\\n    ReleaseItem queryByAppNameAndBuildNo(String appName, int buildNo, int envType);\\n\\n    List\\u003cSimpleReleaseOrderDto\\u003e queryReleaseOrderListBySprintId(String sprintId, int pageNum);\\n\\n    List\\u003cSimpleReleaseOrderDto\\u003e queryPageOfReleaseOrder(int pageNum, String releaseName, String envNameCopy, String operatorCopy);\\n\\n    int queryTotal(String releaseName, String envName, String operator);\\n\\n    int queryTotalOfSprint(String sprintId);\\n\\n    void deviceAdd(String appName);\\n\\n    void deviceDelete(String appName);\\n\\n    List\\u003cString\\u003e queryDeviceAppName();\\n\\n    List\\u003cSimpleReleaseOrderDto\\u003e queryReleaseOrderList(String releaseName, String releaseDate, List\\u003cString\\u003e orderIds, String operator, int pageNum);\\n\\n    int queryReleaseOrderNum(String releaseName, String releaseDate, List\\u003cString\\u003e orderIds, String operator);\\n\\n    Set\\u003cString\\u003e queryReleaseItemByAppName(String appName);\\n\\n    void saveReleaseItemDc(List\\u003cIocApplyDeploy\\u003e deployList, ReleaseItem item);\\n\\n    List\\u003cReleaseItemDc\\u003e queryAllReleaseItemDc(String itemId);\\n\\n    void updateReleaseOrder(String orderId, String releaseApplyId, Date releaseExpTime, Date releaseEndTime);\\n\\n    void changeItemRanking(ReleaseOrder releaseOrder);\\n\\n    void changeItemFailed(ReleaseOrder releaseOrder);\\n\\n    }\"\r\n                        },\r\n                        {\r\n                            \"Path\": \"src/main/java/com/poype/heracles/core/repository/dao/EntranceGuardDetailDao.java\",\r\n                            \"Status\": \"M\",\r\n                            \"Content\": \"package com.poype.heracles.core.repository.dao;\\n\\nimport com.poype.heracles.core.repository.dao.model.EntranceGuardDetailDO;\\nimport org.apache.ibatis.annotations.Mapper;\\nimport org.apache.ibatis.annotations.Param;\\nimport org.springframework.stereotype.Component;\\n\\nimport java.util.List;\\n\\n@Component\\n@Mapper\\npublic interface EntranceGuardDetailDao {\\n\\n\\n    int deleteByRecordList(List\\u003cString\\u003e list);\\n\\n    int deleteByRecordId(@Param(\\\"entranceGuardRecordId\\\") int entranceGuardRecordId);\\n\\n    int insert(EntranceGuardDetailDO record);\\n\\n    int insertSelective(EntranceGuardDetailDO record);\\n\\n    int updateByPrimaryKeySelective(EntranceGuardDetailDO record);\\n\\n    int updateByPrimaryKey(EntranceGuardDetailDO record);\\n\\n    /**\\n     * 避免浪费内存，该查询暂时没有注入desc和detail\\n     */\\n    List\\u003cEntranceGuardDetailDO\\u003e selectByRecordId(@Param(\\\"entranceGuardRecordId\\\") int entranceGuardRecordId);\\n}\"\r\n                        },\r\n                        {\r\n                            \"Path\": \"src/main/java/com/poype/heracles/core/repository/dao/EntranceGuardRecordDao.java\",\r\n                            \"Status\": \"M\",\r\n                            \"Content\": \"package com.poype.heracles.core.repository.dao;\\n\\nimport com.poype.heracles.core.repository.dao.model.EntranceGuardRecordDO;\\nimport org.apache.ibatis.annotations.Mapper;\\nimport org.apache.ibatis.annotations.Param;\\nimport org.springframework.stereotype.Component;\\n\\n@Component\\n@Mapper\\npublic interface EntranceGuardRecordDao {\\n\\n    int deleteByRecordId(@Param(\\\"entranceGuardRecordId\\\") Integer entranceGuardRecordId);\\n\\n    int insert(EntranceGuardRecordDO record);\\n\\n    int insertSelective(EntranceGuardRecordDO record);\\n\\n    Integer selectRecordIdBySprintIdAndApp(@Param(\\\"sprintId\\\") String sprintId, @Param(\\\"app\\\") String app);\\n\\n    EntranceGuardRecordDO selectBySprintIdAndApp(@Param(\\\"sprintId\\\") String sprintId, @Param(\\\"app\\\") String app);\\n\\n}\"\r\n                        },\r\n                        {\r\n                            \"Path\": \"src/main/java/com/poype/heracles/core/repository/dao/ReleaseDAO.java\",\r\n                            \"Status\": \"M\",\r\n                            \"Content\": \"package com.poype.heracles.core.repository.dao;\\n\\nimport com.poype.heracles.core.domain.model.enums.PartitionEnum;\\nimport com.poype.heracles.core.repository.dao.model.ReleaseDeviceDO;\\nimport com.poype.heracles.core.repository.dao.model.ReleaseItemDO;\\nimport com.poype.heracles.core.repository.dao.model.ReleaseItemDcDO;\\nimport com.poype.heracles.core.repository.dao.model.ReleaseOrderDO;\\nimport org.apache.ibatis.annotations.Mapper;\\nimport org.apache.ibatis.annotations.Param;\\nimport org.springframework.stereotype.Component;\\n\\nimport java.util.Date;\\nimport java.util.List;\\n\\n@Component\\n@Mapper\\npublic interface ReleaseDAO {\\n\\n    void saveReleaseOrder(ReleaseOrderDO releaseOrderDO);\\n\\n    void saveReleaseItem(ReleaseItemDO releaseItemDO);\\n\\n    void saveReleaseItemDc(ReleaseItemDcDO releaseItemDcDO);\\n\\n    ReleaseOrderDO queryReleaseOrderById(@Param(\\\"orderId\\\") String orderId);\\n\\n    List\\u003cReleaseItemDO\\u003e queryReleaseItemListByOrderId(@Param(\\\"orderId\\\") String orderId);\\n\\n    ReleaseItemDO queryReleaseItemByItemId(@Param(\\\"itemId\\\") String itemId);\\n\\n    int updateReleaseOrderStatus(@Param(\\\"orderId\\\") String orderId, @Param(\\\"status\\\") int status);\\n\\n    int updateReleaseOrderInvalid(@Param(\\\"sprintId\\\") String sprintId);\\n\\n    void updateReleaseItemStatus(@Param(\\\"itemId\\\") String itemId, @Param(\\\"status\\\") int status,\\n                                 @Param(\\\"logLink\\\") String logLink, @Param(\\\"buildNo\\\") int buildNo);\\n\\n    void updReleaseItemStatus(@Param(\\\"itemId\\\") String itemId, @Param(\\\"status\\\") int status);\\n\\n    /**\\n     * 准备中,成功,失败 的数据更新到目标状态\\n     * @param itemId\\n     * @param target\\n     */\\n    int updReleaseItemTargetStatusFromSource(@Param(\\\"itemId\\\") String itemId, @Param(\\\"target\\\") int target);\\n\\n    int updateReleaseItemDcStatus(@Param(\\\"itemDcId\\\") String itemDcId, @Param(\\\"status\\\") int status);\\n\\n    int updateReleaseItemDcStatusAndKeyword(@Param(\\\"itemDcId\\\") String itemDcId, @Param(\\\"keyword\\\") String keyword, @Param(\\\"status\\\") int status);\\n\\n    List\\u003cReleaseOrderDO\\u003e queryBySprintId(@Param(\\\"sprintId\\\") String sprintId, @Param(\\\"offset\\\") int offset);\\n\\n    List\\u003cReleaseOrderDO\\u003e queryPage(@Param(\\\"offset\\\") int offset, @Param(\\\"releaseName\\\") String releaseName,\\n                                   @Param(\\\"envName\\\") String envName, @Param(\\\"operator\\\") String operator);\\n\\n    List\\u003cReleaseOrderDO\\u003e queryAllReleaseOrderForProdBySprintIdAndEnv(@Param(\\\"sprintId\\\") String sprintId, @Param(\\\"envName\\\") String envName);\\n\\n    int queryTotal(@Param(\\\"releaseName\\\") String releaseName, @Param(\\\"envName\\\") String envName, @Param(\\\"operator\\\") String operator);\\n\\n    int queryTotalOfSprint(@Param(\\\"sprintId\\\") String sprintId);\\n\\n    ReleaseItemDO queryItemByAppNameAndBuildNo(@Param(\\\"appName\\\") String appName,\\n                                               @Param(\\\"buildNo\\\") int buildNo,\\n                                               @Param(\\\"envType\\\") int envType);\\n\\n    int deviceAdd(ReleaseDeviceDO deviceDO);\\n\\n    int deviceDeleta(@Param(\\\"appName\\\") String appName);\\n\\n    List\\u003cString\\u003e queryDeviceAppName();\\n\\n    List\\u003cReleaseItemDO\\u003e queryReleaseItemByAppName(@Param(\\\"appName\\\") String appName);\\n\\n    List\\u003cReleaseItemDO\\u003e queryReleaseItemByAppNameAndStatus(@Param(\\\"appName\\\") String appName, @Param(\\\"status\\\") int status);\\n\\n    List\\u003cReleaseOrderDO\\u003e queryPageReleaseOrders(@Param(\\\"offset\\\") int offset, @Param(\\\"releaseName\\\") String releaseName,\\n                                                @Param(\\\"releaseDate\\\")String releaseDate, @Param(\\\"operator\\\") String operator,\\n                                                @Param(\\\"orderIds\\\") List\\u003cString\\u003e orderIds);\\n\\n\\n    int queryReleaseOrdersCount(@Param(\\\"releaseName\\\") String releaseName,@Param(\\\"releaseDate\\\")String releaseDate,\\n                                            @Param(\\\"operator\\\") String operator, @Param(\\\"orderIds\\\") List\\u003cString\\u003e orderIds);\\n\\n    List\\u003cReleaseItemDcDO\\u003e queryAllReleaseItemDc(@Param(\\\"itemId\\\") String itemId);\\n\\n    ReleaseItemDcDO queryByNameAndIndexAndEnvAndDc(@Param(\\\"jobName\\\") String jobName, @Param(\\\"taskIndex\\\") Integer taskIndex,\\n                                                   @Param(\\\"dcEnv\\\") String dcEnv, @Param(\\\"dc\\\") String dc);\\n\\n    ReleaseItemDcDO queryOneByItemIdAndEnvAndDc(@Param(\\\"itemId\\\") String itemId, @Param(\\\"dcEnv\\\") String dcEnv, @Param(\\\"dc\\\") String dc);\\n\\n    int updateReleaseOrder(@Param(\\\"orderId\\\") String orderId, @Param(\\\"releaseApplyId\\\") String releaseApplyId, @Param(\\\"releaseExpTime\\\") Date releaseExpTime, @Param(\\\"releaseEndTime\\\") Date releaseEndTime);\\n\\n    int updateReleaseOrderStatusAndPartitionFlag(@Param(\\\"orderId\\\") String orderId, @Param(\\\"status\\\") Integer status, @Param(\\\"partitionFlag\\\") PartitionEnum partitionFlag);\\n\\n    int updateReleaseOrderPartitionFlag(@Param(\\\"orderId\\\") String orderId, @Param(\\\"partitionFlag\\\") PartitionEnum partitionFlag);\\n}\"\r\n                        },\r\n                        {\r\n                            \"Path\": \"src/main/java/com/poype/heracles/core/repository/impl/EntranceGuardRepositoryImpl.java\",\r\n                            \"Status\": \"M\",\r\n                            \"Content\": \"package com.poype.heracles.core.repository.impl;\\n\\nimport com.alibaba.fastjson.JSONArray;\\nimport com.poype.heracles.common.util.ThreadLocalHolder;\\nimport com.poype.heracles.core.domain.model.application.Application;\\nimport com.poype.heracles.core.domain.model.sprint.Sprint;\\nimport com.poype.heracles.core.repository.EntranceGuardRepository;\\nimport com.poype.heracles.core.repository.dao.EntranceGuardDetailDao;\\nimport com.poype.heracles.core.repository.dao.EntranceGuardRecordDao;\\nimport com.poype.heracles.core.repository.dao.model.EntranceGuardDetailDO;\\nimport com.poype.heracles.core.repository.dao.model.EntranceGuardRecordDO;\\nimport com.poype.heracles.core.repository.integration.model.entranceGuard.Data;\\nimport com.poype.heracles.core.repository.integration.model.entranceGuard.EntranceGuardTaskResult;\\nimport lombok.extern.slf4j.Slf4j;\\nimport org.springframework.beans.factory.annotation.Autowired;\\nimport org.springframework.stereotype.Repository;\\nimport org.springframework.transaction.annotation.Propagation;\\nimport org.springframework.transaction.annotation.Transactional;\\n\\n@Repository\\n@Slf4j\\npublic class EntranceGuardRepositoryImpl implements EntranceGuardRepository {\\n\\n    @Autowired\\n    private EntranceGuardDetailDao entranceGuardDetailDao;\\n\\n    @Autowired\\n    private EntranceGuardRecordDao entranceGuardRecordDao;\\n\\n    @Override\\n    @Transactional(rollbackFor = Exception.class, propagation = Propagation.REQUIRES_NEW)\\n    public void saveEntranceGuardInfo(Sprint sprint, EntranceGuardTaskResult entranceGuardTaskResult) {\\n        Application appInfo = entranceGuardTaskResult.getApplication();\\n        //删除版本\\u0026app下的所有记录\\n        Integer recordId = entranceGuardRecordDao.selectRecordIdBySprintIdAndApp(sprint.getSprintId(), appInfo.getApplicationName());\\n        if (recordId != null) {\\n            entranceGuardDetailDao.deleteByRecordId(recordId);\\n            entranceGuardRecordDao.deleteByRecordId(recordId);\\n        }\\n        String operator = ThreadLocalHolder.getUserName();\\n        EntranceGuardRecordDO entranceGuardRecordDO = new EntranceGuardRecordDO(sprint.getSprintId(), appInfo.getApplicationName(),\\n                entranceGuardTaskResult.getEntranceGuardResp().getCode(), entranceGuardTaskResult.getEntranceGuardResp().getErrorMsg(),\\n                operator, operator);\\n\\n        entranceGuardRecordDao.insertSelective(entranceGuardRecordDO);\\n\\n        for (Data datum : entranceGuardTaskResult.getEntranceGuardResp().getData()) {\\n            EntranceGuardDetailDO entranceGuardDetailDO = new EntranceGuardDetailDO(entranceGuardRecordDO.getEntranceGuardRecordId(), datum.getName(), datum.getDesc(), datum.getCount(),\\n                    datum.getUrl(), JSONArray.toJSONString(datum.getDetail()), operator, operator);\\n            entranceGuardDetailDao.insertSelective(entranceGuardDetailDO);\\n        }\\n    }\\n}\"\r\n                        },\r\n                        {\r\n                            \"Path\": \"src/main/java/com/poype/heracles/core/repository/impl/ReleaseRepositoryImpl.java\",\r\n                            \"Status\": \"M\",\r\n                            \"Content\": \"package com.poype.heracles.core.repository.impl;\\n\\nimport com.poype.heracles.common.enums.RegionStatusEnum;\\nimport com.poype.heracles.common.util.IdUtil;\\nimport com.poype.heracles.common.util.LogUtil;\\nimport com.poype.heracles.core.domain.model.Environment;\\nimport com.poype.heracles.core.domain.model.ReleaseItem;\\nimport com.poype.heracles.core.domain.model.ReleaseItemDc;\\nimport com.poype.heracles.core.domain.model.ReleaseOrder;\\nimport com.poype.heracles.core.domain.model.dto.SimpleReleaseOrderDto;\\nimport com.poype.heracles.core.domain.model.enums.*;\\nimport com.poype.heracles.core.domain.model.ioc.IocApplyDeploy;\\n import com.poype.heracles.core.domain.service.deployCheck.AbstractCheckService;\\nimport com.poype.heracles.core.repository.EnvironmentRepository;\\nimport com.poype.heracles.core.repository.ReleaseRepository;\\nimport com.poype.heracles.core.repository.dao.EnvironmentDAO;\\nimport com.poype.heracles.core.repository.dao.ReleaseDAO;\\nimport com.poype.heracles.core.repository.dao.SprintRegionDao;\\nimport com.poype.heracles.core.repository.dao.model.*;\\nimport com.poype.heracles.core.repository.integration.impl.ReleaseClientImpl;\\nimport lombok.extern.slf4j.Slf4j;\\nimport org.apache.commons.lang.StringUtils;\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\nimport org.springframework.beans.factory.annotation.Autowired;\\nimport org.springframework.stereotype.Repository;\\nimport org.springframework.transaction.annotation.Propagation;\\nimport org.springframework.transaction.annotation.Transactional;\\nimport org.springframework.util.CollectionUtils;\\n\\nimport javax.annotation.Resource;\\nimport java.text.SimpleDateFormat;\\nimport java.util.*;\\nimport java.util.stream.Collectors;\\n\\n@Repository(\\\"releaseRepository\\\")\\n@Slf4j\\npublic class ReleaseRepositoryImpl implements ReleaseRepository {\\n\\n    private static final Logger logger = LoggerFactory.getLogger(ReleaseRepositoryImpl.class);\\n\\n    @Resource\\n    private ReleaseDAO releaseDAO;\\n\\n    @Resource\\n    private EnvironmentDAO environmentDAO;\\n\\n    @Resource\\n    private SprintRegionDao sprintRegionDao;\\n\\n    @Autowired\\n    private EnvironmentRepository environmentRepository;\\n\\n    private Set\\u003cInteger\\u003e testCode = new HashSet\\u003c\\u003e();\\n\\n    private Set\\u003cInteger\\u003e prodCode = new HashSet\\u003c\\u003e();\\n\\n\\n    {\\n        // 线下\\n        testCode.add(EnvironmentType.SIT.getCode());\\n        testCode.add(EnvironmentType.UAT.getCode());\\n        // 线上\\n        prodCode.add(EnvironmentType.RC.getCode());\\n        prodCode.add(EnvironmentType.PROD.getCode());\\n    }\\n\\n    @Transactional(rollbackFor = Exception.class)\\n    @Override\\n    public void saveReleaseOrder(ReleaseOrder releaseOrder) {\\n        ReleaseOrderDO releaseOrderDO = new ReleaseOrderDO(releaseOrder.getOrderId(),\\n                releaseOrder.getReleaseName(), releaseOrder.getDescription(), releaseOrder.getEnvName(),\\n                releaseOrder.getStatus().getCode(), releaseOrder.getOperator(), releaseOrder.getReleaseDate(),\\n                releaseOrder.getSprintId());\\n\\n        releaseDAO.saveReleaseOrder(releaseOrderDO);\\n\\n        EnvironmentDO environmentDO = environmentDAO.queryByName(releaseOrder.getEnvName());\\n        log.info(\\\"environmentDO {}\\\", environmentDO);\\n        int envType = environmentDO.getEnvType();\\n        if (testCode.contains(envType)) {\\n            // 0表示用线下jenkins发布\\n            envType = 0;\\n        } else {\\n            // 1表示用线上jenkins发布\\n            envType = 1;\\n        }\\n        for (ReleaseItem item : releaseOrder.getReleaseItems()) {\\n            ReleaseItemDO itemDO = new ReleaseItemDO(item.getItemId(), item.getOrderId(),\\n                    item.getStatus().getCode(), item.getAppName(), item.getTeam(), item.getProject(), item.getCodeRepos(), item.getCodeBranch(), envType, item.getBelongSystem());\\n            releaseDAO.saveReleaseItem(itemDO);\\n        }\\n    }\\n\\n    @Override\\n    public void updateReleaseOrderStatus(ReleaseOrder releaseOrder) {\\n        LogUtil.info(logger, \\\"releaseOrder: \\\" + releaseOrder);\\n\\n        releaseDAO.updateReleaseOrderStatus(releaseOrder.getOrderId(), releaseOrder.getStatus().getCode());\\n        for (ReleaseItem item : releaseOrder.getReleaseItems()) {\\n            releaseDAO.updateReleaseItemStatus(item.getItemId(), item.getStatus().getCode(),\\n                    item.getLogLink(), item.getBuildNo());\\n            if (!CollectionUtils.isEmpty(item.getItemDcList())) {\\n                for (ReleaseItemDc itemDc : item.getItemDcList()) {\\n                    releaseDAO.updateReleaseItemDcStatus(itemDc.getItemDcId(), itemDc.getStatus().getCode());\\n                }\\n            }\\n        }\\n    }\\n\\n    @Override\\n    public void updateReleaseOrderAndRegionInfo(ReleaseOrder releaseOrder, Boolean partition, Environment environment, String operator) {\\n        LogUtil.info(logger, \\\"releaseOrder: \\\" + releaseOrder + \\\"partition:\\\" + partition);\\n        updateReleaseOrderStatus(releaseOrder);\\n        saveRegionInfo(releaseOrder, partition, environment, operator);\\n    }\\n\\n    @Override\\n    public void saveRegionInfo(ReleaseOrder releaseOrder, Boolean partition, Environment environment, String operator) {\\n        LogUtil.info(logger, \\\"save region info: \\\" + releaseOrder + \\\"partition:\\\" + partition);\\n        releaseDAO.updateReleaseOrderPartitionFlag(releaseOrder.getOrderId(), PartitionEnum.getPartitionEnum(partition));\\n        //无版本不维护分区记录\\n        if (partition \\u0026\\u0026 EnvironmentType.SIT == environment.getEnvType() \\u0026\\u0026 StringUtils.isNotBlank(releaseOrder.getSprintId())) {\\n            List\\u003cReleaseItem\\u003e releaseItems = releaseOrder.getReleaseItems();\\n            String region = ReleaseClientImpl.getRegionName(environment);\\n            for (ReleaseItem releaseItem : releaseItems) {\\n                SprintRegionDO sprintRegionDO = generateSprintRegionDo(releaseOrder, operator, region, releaseItem, environment.getEnvType().getName());\\n                SprintRegionDO sprintRegionDONew = sprintRegionDao.selectByRegionNameAndDcAndApp(sprintRegionDO.getRegionName(), sprintRegionDO.getEnv(), sprintRegionDO.getApp());\\n                if (sprintRegionDONew != null) {\\n                    // update\\n                    sprintRegionDO.setSprintRegionId(sprintRegionDONew.getSprintRegionId());\\n                    sprintRegionDao.updateByPrimaryKey(sprintRegionDO);\\n                } else {\\n                    // insert\\n                    sprintRegionDao.insert(sprintRegionDO);\\n                }\\n            }\\n        }\\n    }\\n\\n    private SprintRegionDO generateSprintRegionDo(ReleaseOrder releaseOrder, String operator, String region, ReleaseItem releaseItem, String env) {\\n        return SprintRegionDO.builder()\\n                .sprintId(releaseOrder.getSprintId())\\n                .itemId(releaseItem.getItemId())\\n                .regionName(region)\\n                .env(env)\\n                .app(releaseItem.getAppName())\\n                .regionStatus(RegionStatusEnum.b_non.getCode())\\n                .updatedBy(operator)\\n                .createdBy(operator)\\n                .build();\\n    }\\n\\n    @Override\\n    public ReleaseOrder queryByOrderId(String orderId) {\\n        ReleaseOrderDO releaseOrderDO = releaseDAO.queryReleaseOrderById(orderId);\\n        List\\u003cReleaseItemDO\\u003e itemDOList = releaseDAO.queryReleaseItemListByOrderId(orderId);\\n        log.info(\\\"releaseOrderDO itemDOList -{} -{}\\\", releaseOrderDO, itemDOList);\\n        List\\u003cReleaseItem\\u003e itemList = new ArrayList\\u003c\\u003e();\\n        for (ReleaseItemDO itemDO : itemDOList) {\\n            ReleaseItem item = new ReleaseItem(itemDO.getOrderId(),\\n                    itemDO.getItemId(),\\n                    ReleaseItemStatus.getByCode(itemDO.getStatus()),\\n                    itemDO.getAppName(),\\n                    itemDO.getTeam(),\\n                    itemDO.getProject(),\\n                    itemDO.getCodeRepos(),\\n                    itemDO.getCodeBranch(),\\n                    itemDO.getLogLink(),\\n                    itemDO.getBuildNo(),\\n                    JenkinsEnvType.getByCode(itemDO.getEnvType()),\\n                    itemDO.getBelongSystem(),\\n                    itemDO.getUpdateTime());\\n            itemList.add(item);\\n        }\\n        ReleaseOrder releaseOrder = new ReleaseOrder(releaseOrderDO.getOrderId(),\\n                releaseOrderDO.getReleaseName(),\\n                releaseOrderDO.getDescription(),\\n                itemList,\\n                releaseOrderDO.getEnvName(),\\n                releaseOrderDO.getSprintId(),\\n                ReleaseOrderStatus.getByCode(releaseOrderDO.getStatus()),\\n                releaseOrderDO.getOperator(),\\n                releaseOrderDO.getReleaseDate(),\\n                PartitionEnum.getByName(releaseOrderDO.getPartitionFlag()));\\n        return releaseOrder;\\n    }\\n\\n    @Override\\n    public ReleaseOrder queryByItemId(String itemId) {\\n        ReleaseItemDO itemDO = releaseDAO.queryReleaseItemByItemId(itemId);\\n        ReleaseOrderDO releaseOrderDO = releaseDAO.queryReleaseOrderById(itemDO.getOrderId());\\n\\n        List\\u003cReleaseItem\\u003e itemList = new ArrayList\\u003c\\u003e();\\n        ReleaseItem item = new ReleaseItem(itemDO.getOrderId(),\\n                itemDO.getItemId(),\\n                ReleaseItemStatus.getByCode(itemDO.getStatus()),\\n                itemDO.getAppName(),\\n                itemDO.getTeam(),\\n                itemDO.getProject(),\\n                itemDO.getCodeRepos(),\\n                itemDO.getCodeBranch(),\\n                itemDO.getLogLink(),\\n                itemDO.getBuildNo(),\\n                JenkinsEnvType.getByCode(itemDO.getEnvType()),\\n                itemDO.getBelongSystem());\\n        itemList.add(item);\\n        ReleaseOrder releaseOrder = new ReleaseOrder(releaseOrderDO.getOrderId(),\\n                releaseOrderDO.getReleaseName(),\\n                releaseOrderDO.getDescription(),\\n                itemList,\\n                releaseOrderDO.getEnvName(),\\n                releaseOrderDO.getSprintId(),\\n                ReleaseOrderStatus.getByCode(releaseOrderDO.getStatus()),\\n                releaseOrderDO.getOperator(),\\n                releaseOrderDO.getReleaseDate(),\\n                releaseOrderDO.getReleaseApplyId(),\\n                releaseOrderDO.getReleaseExpTime(),\\n                releaseOrderDO.getReleaseEndTime());\\n        return releaseOrder;\\n    }\\n\\n    @Override\\n    public ReleaseItem queryByAppNameAndBuildNo(String appName, int buildNo, int envType) {\\n        ReleaseItemDO itemDO = releaseDAO.queryItemByAppNameAndBuildNo(appName, buildNo, envType);\\n        ReleaseItem item = new ReleaseItem(itemDO.getOrderId(),\\n                itemDO.getItemId(),\\n                ReleaseItemStatus.getByCode(itemDO.getStatus()),\\n                itemDO.getAppName(),\\n                itemDO.getTeam(),\\n                itemDO.getProject(),\\n                itemDO.getCodeRepos(),\\n                itemDO.getCodeBranch(),\\n                itemDO.getLogLink(),\\n                itemDO.getBuildNo(),\\n                JenkinsEnvType.getByCode(itemDO.getStatus()),\\n                itemDO.getBelongSystem());\\n        return item;\\n    }\\n\\n    @Override\\n    public List\\u003cSimpleReleaseOrderDto\\u003e queryReleaseOrderListBySprintId(String sprintId, int pageNum) {\\n        int offset = (pageNum - 1) * 10;\\n        log.info(\\\"offset {}\\\", offset);\\n        List\\u003cReleaseOrderDO\\u003e releaseOrderDOList = releaseDAO.queryBySprintId(sprintId, offset);\\n        return convertDtoList(releaseOrderDOList);\\n    }\\n\\n    @Override\\n    public List\\u003cSimpleReleaseOrderDto\\u003e queryPageOfReleaseOrder(int pageNum, String releaseName, String envName, String operator) {\\n        int offset = (pageNum - 1) * 10;\\n        log.info(\\\"offset {}\\\", offset);\\n        List\\u003cReleaseOrderDO\\u003e releaseOrderDOList = releaseDAO.queryPage(offset, releaseName, envName, operator);\\n        return convertDtoList(releaseOrderDOList);\\n    }\\n\\n    @Override\\n    public int queryTotal(String releaseName, String envName, String operator) {\\n        return releaseDAO.queryTotal(releaseName, envName, operator);\\n    }\\n\\n    @Override\\n    public int queryTotalOfSprint(String sprintId) {\\n        return releaseDAO.queryTotalOfSprint(sprintId);\\n    }\\n\\n    @Override\\n    public void deviceAdd(String appName) {\\n        ReleaseDeviceDO deviceDO = new ReleaseDeviceDO();\\n        deviceDO.setId(IdUtil.generate22Id());\\n        deviceDO.setAppName(appName);\\n\\n        releaseDAO.deviceAdd(deviceDO);\\n    }\\n\\n    @Override\\n    public void deviceDelete(String appName) {\\n        releaseDAO.deviceDeleta(appName);\\n    }\\n\\n    @Override\\n    public List\\u003cString\\u003e queryDeviceAppName() {\\n        return releaseDAO.queryDeviceAppName();\\n    }\\n\\n    @Override\\n    public List\\u003cSimpleReleaseOrderDto\\u003e queryReleaseOrderList(String releaseName, String releaseDate, List\\u003cString\\u003e orderIds, String operator, int pageNum) {\\n        int offset = (pageNum - 1) * 10;\\n        log.info(\\\"offset {}\\\", offset);\\n        List\\u003cReleaseOrderDO\\u003e orderDOS = releaseDAO.queryPageReleaseOrders(offset, releaseName, releaseDate, operator, orderIds);\\n        if (!CollectionUtils.isEmpty(orderDOS)) {\\n            return convertDtoList(orderDOS);\\n        }\\n        return null;\\n    }\\n\\n    @Override\\n    public int queryReleaseOrderNum(String releaseName, String releaseDate, List\\u003cString\\u003e orderIds, String operator) {\\n        return releaseDAO.queryReleaseOrdersCount(releaseName, releaseDate, operator, orderIds);\\n    }\\n\\n    @Override\\n    public Set\\u003cString\\u003e queryReleaseItemByAppName(String appName) {\\n        List\\u003cReleaseItemDO\\u003e releaseItemDOS = releaseDAO.queryReleaseItemByAppName(appName);\\n        Set\\u003cString\\u003e releaseItemSet = releaseItemDOS.stream().map(e -\\u003e e.getOrderId()).collect(Collectors.toSet());\\n        return releaseItemSet;\\n    }\\n\\n    private List\\u003cSimpleReleaseOrderDto\\u003e convertDtoList(List\\u003cReleaseOrderDO\\u003e releaseOrderDOList) {\\n        SimpleDateFormat formater = new SimpleDateFormat(\\\"yyyy-MM-dd HH:mm\\\");\\n        log.info(\\\"Set Time Format {}\\\", formater);\\n        List\\u003cSimpleReleaseOrderDto\\u003e dtoList = new ArrayList\\u003c\\u003e();\\n        for (ReleaseOrderDO orderDO : releaseOrderDOList) {\\n            SimpleReleaseOrderDto dto = new SimpleReleaseOrderDto(\\n                    orderDO.getOrderId(),\\n                    orderDO.getReleaseName(),\\n                    orderDO.getDescription(),\\n                    orderDO.getEnvName(),\\n                    ReleaseOrderStatus.getByCode(orderDO.getStatus()).getName(),\\n                    orderDO.getOperator(),\\n                    formater.format(orderDO.getReleaseDate()),\\n                    PartitionEnum.getByName(orderDO.getPartitionFlag())\\n            );\\n            dtoList.add(dto);\\n        }\\n        return dtoList;\\n    }\\n\\n    @Override\\n    @Transactional(propagation = Propagation.REQUIRES_NEW)\\n    public void saveReleaseItemDc(List\\u003cIocApplyDeploy\\u003e deployList, ReleaseItem item) {\\n    \\tReleaseItemStatus status = deployList.isEmpty()? ReleaseItemStatus.FAIL : ReleaseItemStatus.PROCESSING;\\n    \\tfor (IocApplyDeploy deploy : deployList) {\\n            ReleaseItemDcDO releaseItemDcDO = new ReleaseItemDcDO();\\n            releaseItemDcDO.setItemDcId(IdUtil.generateBizId());\\n            releaseItemDcDO.setItemId(item.getItemId());\\n            if (deploy.success()) {\\n                releaseItemDcDO.setStatus(ReleaseItemStatus.PROCESSING.getCode());\\n            } else {\\n                releaseItemDcDO.setStatus(ReleaseItemStatus.FAIL.getCode());\\n                status = ReleaseItemStatus.FAIL;\\n            }\\n            releaseItemDcDO.setResultUrl(deploy.getResultUrl());\\n            releaseItemDcDO.setJobName(deploy.getJobName());\\n            releaseItemDcDO.setTaskIndex(deploy.getTaskIndex());\\n            releaseItemDcDO.setDcEnv(deploy.getDcEnv());\\n            releaseItemDcDO.setDc(deploy.getDc());\\n            releaseItemDcDO.setRespStatus(deploy.getStatus());\\n            releaseItemDcDO.setRespMsg(deploy.getMsg());\\n\\n            releaseDAO.saveReleaseItemDc(releaseItemDcDO);\\n        }\\n        releaseDAO.updReleaseItemStatus(item.getItemId(), status.getCode());\\n    }\\n\\n    @Override\\n    public List\\u003cReleaseItemDc\\u003e queryAllReleaseItemDc(String itemId) {\\n        List\\u003cReleaseItemDcDO\\u003e dcDOList = releaseDAO.queryAllReleaseItemDc(itemId);\\n        log.info(\\\"queryAllReleaseItemDc {}\\\", dcDOList);\\n\\n        return dcDOList.stream().map(item -\\u003e {\\n            ReleaseItemDc itemDc = new ReleaseItemDc();\\n            itemDc.setItemDcId(item.getItemDcId());\\n            itemDc.setStatus(ReleaseItemStatus.getByCode(item.getStatus()));\\n            itemDc.setResultUrl(item.getResultUrl());\\n            itemDc.setJobName(item.getJobName());\\n            itemDc.setTaskIndex(item.getTaskIndex());\\n            itemDc.setDc(item.getDc());\\n            itemDc.setDcEnv(item.getDcEnv());\\n            itemDc.setKeyword(item.getKeyword());\\n\\n            return itemDc;\\n        }).collect(Collectors.toList());\\n    }\\n\\n    @Override\\n    public void updateReleaseOrder(String orderId, String releaseApplyId, Date releaseExpTime, Date releaseEndTime) {\\n        releaseDAO.updateReleaseOrder(orderId, releaseApplyId, releaseExpTime, releaseEndTime);\\n    }\\n\\n    @Override\\n    public void changeItemRanking(ReleaseOrder releaseOrder) {\\n        ReleaseItem releaseItem = releaseOrder.getReleaseItems().get(0);\\n        releaseDAO.updReleaseItemStatus(releaseItem.getItemId(), ReleaseItemStatus.RANKING.getCode());\\n        Environment environment = environmentRepository.queryByEnvName(releaseOrder.getEnvName());\\n        AbstractCheckService.add(environment.getEnvType(), releaseItem.getAppName());\\n    }\\n\\n    @Override\\n    public void changeItemFailed(ReleaseOrder releaseOrder) {\\n        ReleaseItem releaseItem = releaseOrder.getReleaseItems().get(0);\\n        releaseDAO.updReleaseItemStatus(releaseItem.getItemId(), ReleaseItemStatus.FAIL.getCode());\\n        //发布单状态整体流转\\n        List\\u003cReleaseItem\\u003e releaseItemList = releaseOrder.getReleaseItems();\\n        //非终态数据个数\\n        long count = releaseItemList.stream().filter(item\\n                -\\u003e item.getStatus() == ReleaseItemStatus.INIT\\n                || item.getStatus() == ReleaseItemStatus.PREPARE\\n                || item.getStatus() == ReleaseItemStatus.PROCESSING\\n                || item.getStatus() == ReleaseItemStatus.RANKING).count();\\n        log.info(\\\"The releaseOrder of Items is not finish! count: {}\\\", count);\\n        if (count == 0) {\\n            releaseDAO.updateReleaseOrderStatus(releaseOrder.getOrderId(), ReleaseOrderStatus.FINISH.getCode());\\n        }\\n    }\\n}\"\r\n                        },\r\n                        {\r\n                            \"Path\": \"src/main/java/com/poype/heracles/core/repository/integration/impl/EntranceGuardClientImpl.java\",\r\n                            \"Status\": \"M\",\r\n                            \"Content\": \"package com.poype.heracles.core.repository.integration.impl;\\n\\nimport com.alibaba.fastjson.JSON;\\nimport com.alibaba.fastjson.JSONObject;\\nimport com.poype.heracles.auth.facade.config.CenterConfig;\\nimport com.poype.heracles.common.constant.Constants;\\nimport com.poype.heracles.core.repository.integration.EntranceGuardClient;\\nimport com.poype.heracles.core.repository.integration.model.entranceGuard.EntranceGuardReq;\\nimport com.poype.heracles.core.repository.integration.model.entranceGuard.EntranceGuardResp;\\nimport lombok.extern.slf4j.Slf4j;\\nimport org.springframework.http.ResponseEntity;\\nimport org.springframework.http.client.HttpComponentsClientHttpRequestFactory;\\nimport org.springframework.stereotype.Component;\\nimport org.springframework.web.client.RestTemplate;\\nimport org.springframework.web.util.UriComponentsBuilder;\\n\\nimport java.net.URI;\\n\\n@Slf4j\\n@Component\\npublic class EntranceGuardClientImpl implements EntranceGuardClient {\\n\\n//    public static final String URLStr = \\\"http: //fls-osma-sec-stg.paic.com.cn/entrance/guard\\\";\\n//    public static final String URLStr = \\\"http://fls-osma-sec.paic.com.cn/entrance/guard\\\";\\n\\n    private RestTemplate initRestTemplate() {\\n        HttpComponentsClientHttpRequestFactory factory = new HttpComponentsClientHttpRequestFactory();\\n        factory.setConnectionRequestTimeout(2000);\\n        factory.setConnectTimeout(2000);\\n        factory.setReadTimeout(30000);\\n        RestTemplate restTemplate = new RestTemplate(factory);\\n        return restTemplate;\\n    }\\n\\n    @Override\\n    public EntranceGuardResp acceptRequest(EntranceGuardReq request) {\\n        //组装请求参数到url\\n        String entranceGuardUrl = JSONObject.parseObject(CenterConfig.configMap.get(Constants.ENTRANCE_GUARD_CONF)).getString(Constants.ENTRANCE_GUARD_URL_KEY);\\n        URI url = UriComponentsBuilder.fromUriString(entranceGuardUrl)\\n                .queryParam(\\\"releaseName\\\", request.getReleaseName())\\n                .queryParam(\\\"subsys\\\", request.getSubsys())\\n                .queryParam(\\\"module\\\", request.getModule())\\n                .build().encode().toUri();\\n        //发送请求\\n        log.info(\\\"-\\u003estart entrance guard module name:{}, request body: {}\\\", request.getModule(), JSON.toJSONString(request));\\n        ResponseEntity\\u003cString\\u003e entranceGuardRespStr = initRestTemplate().getForEntity(url, String.class);\\n        EntranceGuardResp entranceGuardResp = JSONObject.parseObject(entranceGuardRespStr.getBody(), EntranceGuardResp.class);\\n        log.info(\\\"start entrance guard module name:{}, pushed result:{}\\\", request.getModule(), entranceGuardResp.getCode());\\n        return entranceGuardResp;\\n    }\\n\\n}\"},{\"Path\":\"src/main/resources/config/application.yml\",\"Status\":\"M\",\"Content\":\"mybatis:\\n  mapper-locations: classpath:mapper/*.xml\\n  \\nserver:\\n  port: 8080\\n\\nspring:\\n  aop:\\n    auto: true\\n  main:\\n    allow-circular-references: true\\n  config:\\n    use-legacy-processing: true\\n  profiles:\\n    active: dev\\n  application:\\n    name: heracles\\n  rabbitmq:\\n    host: ${af-arch.resource.mq-mode1.host}\\n    port: ${af-arch.resource.mq-mode1.port}\\n    username: ${af-arch.resource.mq-mode1.username}\\n    password: ${af-arch.resource.mq-mode1.password}\\n    virtual-host: ${af-arch.resource.mq-mode1.virtual-host}\\n    pre-fetch: 20\\n    #publisher-confirms: true\\n    durable: false\\n  datasource:\\n    url: ${af-arch.resource.AFDISCZ.url}\\n    username: ${af-arch.resource.AFDISCZ.username}\\n    password: ${af-arch.resource.AFDISCZ.password}\\n    type: com.zaxxer.hikari.HikariDataSource\\n    hikari:\\n      minimum-idle: 10\\n      maximum-pool-size: 20\\n      connection-timeout: 3000\\n      idle-timeout: 30000\\n      max-lifetime: 300000\\n  ldap:\\n    base: DC=paicdom,DC=local\\n    urls: ldap://10.37.88.11:389\\n    referral: ignore\\n    jenkins_url: http://10.47.52.113:80/yw/jenkins-library.git\\n  kafka:\\n    bootstrap-servers: ${af-arch.resource.kafka-common.servers} #kafka集群\\n    producer:\\n      key-serializer: org.apache.kafka.common.serialization.StringSerializer\\n      value-serializer: org.apache.kafka.common.serialization.StringSerializer\\n      acks: 1\\n      batch-size: 16384\\n      properties:\\n        sasl.mechanism: PLAIN\\n        security.protocol: SASL_PLAINTEXT\\n        sasl.jaas.config: ${af-arch.resource.kafka-common.jaas.config}\\n    consumer:\\n      group-id: ssdlc-group\\n      properties:\\n        session:\\n          timeout:\\n            ms: 120000 #消费会话超时时间（超过这个时间consumer没有发送心跳，就会触发rebalance操作）\\n        request:\\n          timeout:\\n            ms: 180000 #消费请求超时时间\\n        security.protocol: SASL_PLAINTEXT\\n        sasl.mechanism: PLAIN\\n        sasl.jaas.config: ${af-arch.resource.kafka-common.jaas.config}\\n      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer #kafka提供的序列化和反序列化类\\n      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer\\n      listener:\\n        concurrency: 2\\n      auto-offset-reset: earliest\\n\\n\\nlogging:\\n  level:\\n    root: info\\n\\nfeign:\\n  client:\\n    config:\\n      default:\\n        connectTimeout: 90000  #单位毫秒\\n        readTimeout: 90000\\n\\napolloCenter:\\n  namespace: devops\\n\\nkafka:\\n  topic:\\n    sync-release-data-event: heracles-uav\\n    ssdlc-event: heracles-ssdlc\\n    sync-sprint-wizard-event: sec-heracles-version\\n\\nmanagement:\\n  health:\\n    ldap:\\n      enabled: false\"},{\"Path\":\"src/main/resources/mapper/EntranceGuardDetailDao.xml\",\"Status\":\"M\",\"Content\":\"\\u003c?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?\\u003e\\n\\u003c!DOCTYPE mapper PUBLIC \\\"-//mybatis.org//DTD Mapper 3.0//EN\\\" \\\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\\\"\\u003e\\n\\u003cmapper namespace=\\\"com.poype.heracles.core.repository.dao.EntranceGuardDetailDao\\\"\\u003e\\n    \\u003cresultMap id=\\\"BaseResultMap\\\" type=\\\"com.poype.heracles.core.repository.dao.model.EntranceGuardDetailDO\\\"\\u003e\\n        \\u003cid column=\\\"entrance_guard_detail_id\\\" property=\\\"entranceGuardDetailId\\\"/\\u003e\\n        \\u003cresult column=\\\"entrance_guard_record_id\\\" property=\\\"entranceGuardRecordId\\\"/\\u003e\\n        \\u003cresult column=\\\"type\\\" property=\\\"type\\\"/\\u003e\\n        \\u003cresult column=\\\"type_desc\\\" property=\\\"typeDesc\\\"/\\u003e\\n        \\u003cresult column=\\\"issue_count\\\" property=\\\"issueCount\\\"/\\u003e\\n        \\u003cresult column=\\\"issue_data_url\\\" property=\\\"issueDataUrl\\\"/\\u003e\\n        \\u003cresult column=\\\"issue_detail\\\" property=\\\"issueDetail\\\"/\\u003e\\n        \\u003cresult column=\\\"created_by\\\" property=\\\"createdBy\\\"/\\u003e\\n        \\u003cresult column=\\\"updated_by\\\" property=\\\"updatedBy\\\"/\\u003e\\n        \\u003cresult column=\\\"created_date\\\" property=\\\"createdDate\\\"/\\u003e\\n        \\u003cresult column=\\\"updated_date\\\" property=\\\"updatedDate\\\"/\\u003e\\n    \\u003c/resultMap\\u003e\\n    \\u003csql id=\\\"Base_Column_List\\\"\\u003e\\n        entrance_guard_detail_id\\n        , entrance_guard_record_id, `type`,issue_count,\\n    issue_data_url, created_by, updated_by, created_date, updated_date\\n    \\u003c/sql\\u003e\\n    \\u003cselect id=\\\"selectByRecordId\\\" resultMap=\\\"BaseResultMap\\\"\\u003e\\n        select\\n        \\u003cinclude refid=\\\"Base_Column_List\\\"/\\u003e\\n        from entrance_guard_detail\\n        where entrance_guard_record_id = #{entranceGuardRecordId}\\n    \\u003c/select\\u003e\\n    \\u003cdelete id=\\\"deleteByRecordId\\\"\\u003e\\n        delete\\n        from entrance_guard_detail\\n        where entrance_guard_record_id = #{entranceGuardRecordId}\\n    \\u003c/delete\\u003e\\n    \\u003cdelete id=\\\"deleteByRecordList\\\"\\u003e\\n        delete\\n        from entrance_guard_detail\\n        where entrance_guard_record_id in\\n        \\u003cforeach collection=\\\"list\\\" item=\\\"id\\\" separator=\\\",\\\" open=\\\"(\\\" close=\\\")\\\"\\u003e\\n            #{id}\\n        \\u003c/foreach\\u003e\\n    \\u003c/delete\\u003e\\n    \\u003cinsert id=\\\"insert\\\" keyColumn=\\\"entrance_guard_detail_id\\\" keyProperty=\\\"entranceGuardDetailId\\\"\\n            parameterType=\\\"com.poype.heracles.core.repository.dao.model.EntranceGuardDetailDO\\\" useGeneratedKeys=\\\"true\\\"\\u003e\\n        insert into entrance_guard_detail (entrance_guard_record_id, `type`, type_desc,\\n                                           issue_count, issue_data_url, issue_detail,\\n                                           created_by, updated_by, created_date,\\n                                           updated_date)\\n        values (#{entranceGuardRecordId}, #{type}, #{typeDesc},\\n                #{issueCount}, #{issueDataUrl}, #{issueDetail},\\n                #{createdBy}, #{updatedBy}, now(), now())\\n    \\u003c/insert\\u003e\\n    \\u003cinsert id=\\\"insertSelective\\\" keyColumn=\\\"entrance_guard_detail_id\\\" keyProperty=\\\"entranceGuardDetailId\\\"\\n            parameterType=\\\"com.poype.heracles.core.repository.dao.model.EntranceGuardDetailDO\\\" useGeneratedKeys=\\\"true\\\"\\u003e\\n        insert into entrance_guard_detail\\n        \\u003ctrim prefix=\\\"(\\\" suffix=\\\")\\\" suffixOverrides=\\\",\\\"\\u003e\\n            \\u003cif test=\\\"entranceGuardRecordId != null\\\"\\u003e\\n                entrance_guard_record_id,\\n            \\u003c/if\\u003e\\n            \\u003cif test=\\\"type != null\\\"\\u003e\\n                `type`,\\n            \\u003c/if\\u003e\\n            \\u003cif test=\\\"typeDesc != null\\\"\\u003e\\n                type_desc,\\n            \\u003c/if\\u003e\\n            \\u003cif test=\\\"issueCount != null\\\"\\u003e\\n                issue_count,\\n            \\u003c/if\\u003e\\n            \\u003cif test=\\\"issueDataUrl != null\\\"\\u003e\\n                issue_data_url,\\n            \\u003c/if\\u003e\\n            \\u003cif test=\\\"issueDetail != null\\\"\\u003e\\n                issue_detail,\\n            \\u003c/if\\u003e\\n            \\u003cif test=\\\"createdBy != null\\\"\\u003e\\n                created_by,\\n            \\u003c/if\\u003e\\n            \\u003cif test=\\\"updatedBy != null\\\"\\u003e\\n                updated_by,\\n            \\u003c/if\\u003e\\n            created_date,\\n            updated_date\\n        \\u003c/trim\\u003e\\n        \\u003ctrim prefix=\\\"values (\\\" suffix=\\\")\\\" suffixOverrides=\\\",\\\"\\u003e\\n            \\u003cif test=\\\"entranceGuardRecordId != null\\\"\\u003e\\n                #{entranceGuardRecordId},\\n            \\u003c/if\\u003e\\n            \\u003cif test=\\\"type != null\\\"\\u003e\\n                #{type},\\n            \\u003c/if\\u003e\\n            \\u003cif test=\\\"typeDesc != null\\\"\\u003e\\n                #{typeDesc},\\n            \\u003c/if\\u003e\\n            \\u003cif test=\\\"issueCount != null\\\"\\u003e\\n                #{issueCount},\\n            \\u003c/if\\u003e\\n            \\u003cif test=\\\"issueDataUrl != null\\\"\\u003e\\n                #{issueDataUrl},\\n            \\u003c/if\\u003e\\n            \\u003cif test=\\\"issueDetail != null\\\"\\u003e\\n                #{issueDetail},\\n            \\u003c/if\\u003e\\n            \\u003cif test=\\\"createdBy != null\\\"\\u003e\\n                #{createdBy},\\n            \\u003c/if\\u003e\\n            \\u003cif test=\\\"updatedBy != null\\\"\\u003e\\n                #{updatedBy},\\n            \\u003c/if\\u003e\\n            now(),now()\\n        \\u003c/trim\\u003e\\n    \\u003c/insert\\u003e\\n    \\u003cupdate id=\\\"updateByPrimaryKeySelective\\\"\\n            parameterType=\\\"com.poype.heracles.core.repository.dao.model.EntranceGuardDetailDO\\\"\\u003e\\n        update entrance_guard_detail\\n        \\u003cset\\u003e\\n            \\u003cif test=\\\"entranceGuardRecordId != null\\\"\\u003e\\n                entrance_guard_record_id = #{entranceGuardRecordId},\\n            \\u003c/if\\u003e\\n            \\u003cif test=\\\"type != null\\\"\\u003e\\n                `type` = #{type},\\n            \\u003c/if\\u003e\\n            \\u003cif test=\\\"typeDesc != null\\\"\\u003e\\n                type_desc = #{typeDesc},\\n            \\u003c/if\\u003e\\n            \\u003cif test=\\\"issueCount != null\\\"\\u003e\\n                issue_count = #{issueCount},\\n            \\u003c/if\\u003e\\n            \\u003cif test=\\\"issueDataUrl != null\\\"\\u003e\\n                issue_data_url = #{issueDataUrl},\\n            \\u003c/if\\u003e\\n            \\u003cif test=\\\"issueDetail != null\\\"\\u003e\\n                issue_detail = #{issueDetail},\\n            \\u003c/if\\u003e\\n            \\u003cif test=\\\"updatedBy != null\\\"\\u003e\\n                updated_by = #{updatedBy},\\n            \\u003c/if\\u003e\\n            updated_date = now()\\n        \\u003c/set\\u003e\\n        where entrance_guard_detail_id = #{entranceGuardDetailId}\\n    \\u003c/update\\u003e\\n    \\u003cupdate id=\\\"updateByPrimaryKey\\\" parameterType=\\\"com.poype.heracles.core.repository.dao.model.EntranceGuardDetailDO\\\"\\u003e\\n        update entrance_guard_detail\\n        set entrance_guard_record_id = #{entranceGuardRecordId},\\n            `type`                   = #{type},\\n            type_desc                = #{typeDesc},\\n            issue_count              = #{issueCount},\\n            issue_data_url           = #{issueDataUrl},\\n            issue_detail             = #{issueDetail},\\n            updated_by               = #{updatedBy},\\n            updated_date             = now()\\n        where entrance_guard_detail_id = #{entranceGuardDetailId}\\n    \\u003c/update\\u003e\\n\\u003c/mapper\\u003e\"},{\"Path\":\"src/main/resources/mapper/EntranceGuardRecordDao.xml\",\"Status\":\"M\",\"Content\":\"\\u003c?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?\\u003e\\n\\u003c!DOCTYPE mapper PUBLIC \\\"-//mybatis.org//DTD Mapper 3.0//EN\\\" \\\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\\\"\\u003e\\n\\u003cmapper namespace=\\\"com.poype.heracles.core.repository.dao.EntranceGuardRecordDao\\\"\\u003e\\n    \\u003cresultMap id=\\\"BaseResultMap\\\" type=\\\"com.poype.heracles.core.repository.dao.model.EntranceGuardRecordDO\\\"\\u003e\\n        \\u003cresult column=\\\"entrance_guard_record_id\\\" property=\\\"entranceGuardRecordId\\\"/\\u003e\\n        \\u003cresult column=\\\"sprint_id\\\" property=\\\"sprintId\\\"/\\u003e\\n        \\u003cresult column=\\\"app\\\" property=\\\"app\\\"/\\u003e\\n        \\u003cresult column=\\\"result_code\\\" property=\\\"resultCode\\\"/\\u003e\\n        \\u003cresult column=\\\"result_msg\\\" property=\\\"resultMsg\\\"/\\u003e\\n        \\u003cresult column=\\\"created_by\\\" property=\\\"createdBy\\\"/\\u003e\\n        \\u003cresult column=\\\"updated_by\\\" property=\\\"updatedBy\\\"/\\u003e\\n        \\u003cresult column=\\\"created_date\\\" property=\\\"createdDate\\\"/\\u003e\\n        \\u003cresult column=\\\"updated_date\\\" property=\\\"updatedDate\\\"/\\u003e\\n    \\u003c/resultMap\\u003e\\n\\n    \\u003csql id=\\\"Base_Column_List\\\"\\u003e\\n        entrance_guard_record_id\\n        , sprint_id, app, result_code, result_msg, created_by, updated_by, created_date, updated_date\\n    \\u003c/sql\\u003e\\n\\n    \\u003cinsert id=\\\"insert\\\" parameterType=\\\"com.poype.heracles.core.repository.dao.model.EntranceGuardRecordDO\\\"\\n            keyColumn=\\\"entrance_guard_record_id\\\" keyProperty=\\\"entranceGuardRecordId\\\" useGeneratedKeys=\\\"true\\\"\\u003e\\n        insert into entrance_guard_record (sprint_id, app, result_code, result_msg,\\n                                           created_by,\\n                                           updated_by, created_date, updated_date)\\n        values (#{sprintId}, #{app}, #{resultCode}, #{resultMsg}, #{createdBy},\\n                #{updatedBy}, now(), now())\\n    \\u003c/insert\\u003e\\n    \\u003cinsert id=\\\"insertSelective\\\" parameterType=\\\"com.poype.heracles.core.repository.dao.model.EntranceGuardRecordDO\\\"\\n            keyColumn=\\\"entrance_guard_record_id\\\" keyProperty=\\\"entranceGuardRecordId\\\" useGeneratedKeys=\\\"true\\\"\\u003e\\n        insert into entrance_guard_record\\n        \\u003ctrim prefix=\\\"(\\\" suffix=\\\")\\\" suffixOverrides=\\\",\\\"\\u003e\\n            \\u003cif test=\\\"sprintId != null\\\"\\u003e\\n                sprint_id,\\n            \\u003c/if\\u003e\\n            \\u003cif test=\\\"app != null\\\"\\u003e\\n                app,\\n            \\u003c/if\\u003e\\n            \\u003cif test=\\\"resultCode != null\\\"\\u003e\\n                result_code,\\n            \\u003c/if\\u003e\\n            \\u003cif test=\\\"resultMsg != null\\\"\\u003e\\n                result_msg,\\n            \\u003c/if\\u003e\\n            \\u003cif test=\\\"createdBy != null\\\"\\u003e\\n                created_by,\\n            \\u003c/if\\u003e\\n            \\u003cif test=\\\"updatedBy != null\\\"\\u003e\\n                updated_by,\\n            \\u003c/if\\u003e\\n            created_date,\\n            updated_date\\n        \\u003c/trim\\u003e\\n        \\u003ctrim prefix=\\\"values (\\\" suffix=\\\")\\\" suffixOverrides=\\\",\\\"\\u003e\\n            \\u003cif test=\\\"sprintId != null\\\"\\u003e\\n                #{sprintId},\\n            \\u003c/if\\u003e\\n            \\u003cif test=\\\"app != null\\\"\\u003e\\n                #{app},\\n            \\u003c/if\\u003e\\n            \\u003cif test=\\\"resultCode != null\\\"\\u003e\\n                #{resultCode},\\n            \\u003c/if\\u003e\\n            \\u003cif test=\\\"resultMsg != null\\\"\\u003e\\n                #{resultMsg},\\n            \\u003c/if\\u003e\\n            \\u003cif test=\\\"createdBy != null\\\"\\u003e\\n                #{createdBy},\\n            \\u003c/if\\u003e\\n            \\u003cif test=\\\"updatedBy != null\\\"\\u003e\\n                #{updatedBy},\\n            \\u003c/if\\u003e\\n            now(),now()\\n        \\u003c/trim\\u003e\\n    \\u003c/insert\\u003e\\n    \\u003cdelete id=\\\"deleteByRecordId\\\" \\u003e\\n        delete\\n        from entrance_guard_record\\n        where entrance_guard_record_id = #{entranceGuardRecordId}\\n    \\u003c/delete\\u003e\\n    \\u003cselect id=\\\"selectRecordIdBySprintIdAndApp\\\" resultType=\\\"java.lang.Integer\\\"\\u003e\\n        select entrance_guard_record_id\\n        from entrance_guard_record\\n        where sprint_id = #{sprintId}\\n          and app = #{app}\\n    \\u003c/select\\u003e\\n    \\u003cselect id=\\\"selectBySprintIdAndApp\\\" resultMap=\\\"BaseResultMap\\\"\\u003e\\n        select\\n        \\u003cinclude refid=\\\"Base_Column_List\\\"/\\u003e\\n        from entrance_guard_record\\n        where sprint_id = #{sprintId} and app = #{app}\\n    \\u003c/select\\u003e\\n\\u003c/mapper\\u003e\"},{\"Path\":\"src/main/resources/mapper/ReleaseDAO.xml\",\"Status\":\"M\",\"Content\":\"\\u003c?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?\\u003e\\n\\u003c!DOCTYPE mapper PUBLIC \\\"-//mybatis.org//DTD Mapper 3.0//EN\\\" \\\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\\\"\\u003e\\n\\u003cmapper namespace=\\\"com.poype.heracles.core.repository.dao.ReleaseDAO\\\"\\u003e\\n\\n    \\u003cresultMap id=\\\"release_order_result_map\\\" type=\\\"com.poype.heracles.core.repository.dao.model.ReleaseOrderDO\\\"\\u003e\\n        \\u003cresult column=\\\"order_id\\\" property=\\\"orderId\\\"/\\u003e\\n        \\u003cresult column=\\\"release_name\\\" property=\\\"releaseName\\\"/\\u003e\\n        \\u003cresult column=\\\"description\\\" property=\\\"description\\\"/\\u003e\\n        \\u003cresult column=\\\"env_name\\\" property=\\\"envName\\\"/\\u003e\\n        \\u003cresult column=\\\"status\\\" property=\\\"status\\\"/\\u003e\\n        \\u003cresult column=\\\"partition_flag\\\" property=\\\"partitionFlag\\\"/\\u003e\\n        \\u003cresult column=\\\"operator\\\" property=\\\"operator\\\"/\\u003e\\n        \\u003cresult column=\\\"release_date\\\" property=\\\"releaseDate\\\"/\\u003e\\n        \\u003cresult column=\\\"sprint_id\\\" property=\\\"sprintId\\\"/\\u003e\\n        \\u003cresult column=\\\"release_apply_id\\\" property=\\\"releaseApplyId\\\"/\\u003e\\n        \\u003cresult column=\\\"release_exp_time\\\" property=\\\"releaseExpTime\\\"/\\u003e\\n        \\u003cresult column=\\\"release_end_time\\\" property=\\\"releaseEndTime\\\"/\\u003e\\n        \\u003cresult column=\\\"create_time\\\" property=\\\"createTime\\\"/\\u003e\\n        \\u003cresult column=\\\"update_time\\\" property=\\\"updateTime\\\"/\\u003e\\n    \\u003c/resultMap\\u003e\\n\\n    \\u003cresultMap id=\\\"release_item_result_map\\\" type=\\\"com.poype.heracles.core.repository.dao.model.ReleaseItemDO\\\"\\u003e\\n        \\u003cresult column=\\\"item_id\\\" property=\\\"itemId\\\"/\\u003e\\n        \\u003cresult column=\\\"order_id\\\" property=\\\"orderId\\\"/\\u003e\\n        \\u003cresult column=\\\"status\\\" property=\\\"status\\\"/\\u003e\\n        \\u003cresult column=\\\"app_name\\\" property=\\\"appName\\\"/\\u003e\\n        \\u003cresult column=\\\"code_repos\\\" property=\\\"codeRepos\\\"/\\u003e\\n        \\u003cresult column=\\\"code_branch\\\" property=\\\"codeBranch\\\"/\\u003e\\n        \\u003cresult column=\\\"log_link\\\" property=\\\"logLink\\\"/\\u003e\\n        \\u003cresult column=\\\"build_no\\\" property=\\\"buildNo\\\"/\\u003e\\n        \\u003cresult column=\\\"env_type\\\" property=\\\"envType\\\"/\\u003e\\n        \\u003cresult column=\\\"create_time\\\" property=\\\"createTime\\\"/\\u003e\\n        \\u003cresult column=\\\"update_time\\\" property=\\\"updateTime\\\"/\\u003e\\n        \\u003cresult column=\\\"team\\\" property=\\\"team\\\"/\\u003e\\n        \\u003cresult column=\\\"project\\\" property=\\\"project\\\"/\\u003e\\n        \\u003cresult column=\\\"belong_system\\\" property=\\\"belongSystem\\\"/\\u003e\\n    \\u003c/resultMap\\u003e\\n\\n    \\u003cresultMap id=\\\"release_item_dc_map\\\" type=\\\"com.poype.heracles.core.repository.dao.model.ReleaseItemDcDO\\\"\\u003e\\n        \\u003cresult column=\\\"item_dc_id\\\" property=\\\"itemDcId\\\"/\\u003e\\n        \\u003cresult column=\\\"item_id\\\" property=\\\"itemId\\\"/\\u003e\\n        \\u003cresult column=\\\"status\\\" property=\\\"status\\\"/\\u003e\\n        \\u003cresult column=\\\"result_url\\\" property=\\\"resultUrl\\\"/\\u003e\\n        \\u003cresult column=\\\"job_name\\\" property=\\\"jobName\\\"/\\u003e\\n        \\u003cresult column=\\\"task_index\\\" property=\\\"taskIndex\\\"/\\u003e\\n        \\u003cresult column=\\\"dc_env\\\" property=\\\"dcEnv\\\"/\\u003e\\n        \\u003cresult column=\\\"dc\\\" property=\\\"dc\\\"/\\u003e\\n        \\u003cresult column=\\\"resp_status\\\" property=\\\"respStatus\\\"/\\u003e\\n        \\u003cresult column=\\\"resp_msg\\\" property=\\\"respMsg\\\"/\\u003e\\n        \\u003cresult column=\\\"create_time\\\" property=\\\"createTime\\\"/\\u003e\\n        \\u003cresult column=\\\"update_time\\\" property=\\\"updateTime\\\"/\\u003e\\n        \\u003cresult column=\\\"keyword\\\" property=\\\"keyword\\\"/\\u003e\\n    \\u003c/resultMap\\u003e\\n\\n    \\u003cinsert id=\\\"saveReleaseOrder\\\" parameterType=\\\"com.poype.heracles.core.repository.dao.model.ReleaseOrderDO\\\"\\u003e\\n        insert into release_order(order_id, release_name, description, env_name, status, operator, release_date, sprint_id, create_time, update_time)\\n        values (#{orderId}, #{releaseName}, #{description}, #{envName}, #{status}, #{operator}, #{releaseDate}, #{sprintId}, now(), now())\\n    \\u003c/insert\\u003e\\n\\n    \\u003cinsert id=\\\"saveReleaseItem\\\" parameterType=\\\"com.poype.heracles.core.repository.dao.model.ReleaseItemDO\\\"\\u003e\\n        insert into release_item(item_id, order_id, status, app_name, code_repos, code_branch, env_type, create_time, update_time, team, project, belong_system)\\n        values (#{itemId}, #{orderId}, #{status}, #{appName}, #{codeRepos}, #{codeBranch}, #{envType}, now(), now(), #{team}, #{project}, #{belongSystem})\\n    \\u003c/insert\\u003e\\n\\n    \\u003cinsert id=\\\"saveReleaseItemDc\\\" parameterType=\\\"com.poype.heracles.core.repository.dao.model.ReleaseItemDcDO\\\"\\u003e\\n        insert into release_item_dc(item_dc_id, item_id, status, result_url, job_name, task_index, dc_env, dc, resp_status, resp_msg, create_time, update_time)\\n        values (#{itemDcId}, #{itemId}, #{status}, #{resultUrl}, #{jobName}, #{taskIndex}, #{dcEnv}, #{dc}, #{respStatus}, #{respMsg}, now(), now())\\n    \\u003c/insert\\u003e\\n\\n    \\u003cselect id=\\\"queryReleaseOrderById\\\" resultMap=\\\"release_order_result_map\\\"\\u003e\\n        select * from release_order where order_id = #{orderId}\\n    \\u003c/select\\u003e\\n\\n    \\u003cselect id=\\\"queryReleaseItemListByOrderId\\\" resultMap=\\\"release_item_result_map\\\"\\u003e\\n        select * from release_item where order_id = #{orderId}\\n    \\u003c/select\\u003e\\n\\n    \\u003cselect id=\\\"queryReleaseItemByItemId\\\" resultMap=\\\"release_item_result_map\\\"\\u003e\\n        select * from release_item where item_id = #{itemId}\\n    \\u003c/select\\u003e\\n\\n    \\u003cselect id=\\\"queryItemByAppNameAndBuildNo\\\" resultMap=\\\"release_item_result_map\\\"\\u003e\\n        select * from release_item where app_name = #{appName} and build_no = #{buildNo} and env_type = #{envType}\\n    \\u003c/select\\u003e\\n\\n    \\u003cselect id=\\\"queryBySprintId\\\" resultMap=\\\"release_order_result_map\\\"\\u003e\\n        select * from release_order where sprint_id = #{sprintId} order by create_time desc limit #{offset}, 10;\\n    \\u003c/select\\u003e\\n\\n    \\u003cselect id=\\\"queryTotalOfSprint\\\" resultType=\\\"java.lang.Integer\\\"\\u003e\\n        select count(*) from release_order where sprint_id = #{sprintId}\\n    \\u003c/select\\u003e\\n\\n    \\u003cselect id=\\\"queryPage\\\" resultMap=\\\"release_order_result_map\\\"\\u003e\\n        select * from release_order\\n        \\u003cwhere\\u003e\\n            \\u003cif test=\\\"releaseName != null and releaseName != '' \\\"\\u003e\\n                release_name like concat('%',#{releaseName},'%')\\n            \\u003c/if\\u003e\\n            \\u003cif test=\\\"envName != null and envName != '' \\\"\\u003e\\n                and env_name like concat('%',#{envName},'%')\\n            \\u003c/if\\u003e\\n            \\u003cif test=\\\"operator != null and operator != '' \\\"\\u003e\\n                and operator like concat('%',#{operator},'%')\\n            \\u003c/if\\u003e\\n        \\u003c/where\\u003e\\n        order by create_time desc limit #{offset}, 10;\\n    \\u003c/select\\u003e\\n\\n    \\u003cselect id=\\\"queryTotal\\\" resultType=\\\"java.lang.Integer\\\"\\u003e\\n        select count(*) from release_order\\n        \\u003cwhere\\u003e\\n            \\u003cif test=\\\"releaseName != null and releaseName != '' \\\"\\u003e\\n                release_name like concat('%',#{releaseName},'%')\\n            \\u003c/if\\u003e\\n            \\u003cif test=\\\"envName != null and envName != '' \\\"\\u003e\\n                and env_name like concat('%',#{envName},'%')\\n            \\u003c/if\\u003e\\n            \\u003cif test=\\\"operator != null and operator != '' \\\"\\u003e\\n                and operator like concat('%',#{operator},'%')\\n            \\u003c/if\\u003e\\n        \\u003c/where\\u003e\\n    \\u003c/select\\u003e\\n\\n    \\u003cupdate id=\\\"updateReleaseOrderStatus\\\"\\u003e\\n        update release_order set status = #{status} where order_id = #{orderId}\\n    \\u003c/update\\u003e\\n\\n    \\u003cupdate id=\\\"updateReleaseOrderInvalid\\\"\\u003e\\n        update release_order\\n        set status      = -1,\\n            update_time = now()\\n        where sprint_id = #{sprintId}\\n          and env_name in ('PROD', 'RC')\\n          and status in (0, 1)\\n    \\u003c/update\\u003e\\n\\n    \\u003cupdate id=\\\"updateReleaseItemStatus\\\"\\u003e\\n        update release_item set status = #{status}, log_link = #{logLink}, build_no = #{buildNo} where item_id = #{itemId}\\n    \\u003c/update\\u003e\\n    \\n    \\u003cupdate id=\\\"updReleaseItemStatus\\\"\\u003e\\n        update release_item set status = #{status}, update_time = now() where item_id = #{itemId}\\n    \\u003c/update\\u003e\\n\\n    \\u003cupdate id=\\\"updReleaseItemTargetStatusFromSource\\\"\\u003e\\n        update release_item\\n        set status      = #{target},\\n            update_time = now()\\n        where item_id = #{itemId}\\n          and status in (0, 3, 4)\\n    \\u003c/update\\u003e\\n\\n    \\u003cupdate id=\\\"updateReleaseItemDcStatus\\\"\\u003e\\n        update release_item_dc set status = #{status}, update_time = now() where item_dc_id = #{itemDcId}\\n    \\u003c/update\\u003e\\n\\n    \\u003cupdate id=\\\"updateReleaseItemDcStatusAndKeyword\\\"\\u003e\\n        update release_item_dc\\n        set status      = #{status},\\n            keyword     = #{keyword},\\n            update_time = now()\\n        where item_dc_id = #{itemDcId}\\n    \\u003c/update\\u003e\\n\\n\\n    \\u003cinsert id=\\\"deviceAdd\\\" parameterType=\\\"com.poype.heracles.core.repository.dao.model.ReleaseDeviceDO\\\"\\u003e\\n        insert into release_device (id, app_name, create_time, update_time)\\n        values\\n        (#{id}, #{appName}, now(), now())\\n    \\u003c/insert\\u003e\\n\\n    \\u003cupdate id=\\\"deviceDeleta\\\"\\u003e\\n        delete from release_device where app_name = #{appName}\\n    \\u003c/update\\u003e\\n\\n    \\u003cupdate id=\\\"updateReleaseOrder\\\"\\u003e\\n        update release_order\\n        set release_apply_id = #{releaseApplyId},\\n            release_exp_time = #{releaseExpTime},\\n            release_end_time = #{releaseEndTime},\\n            update_time      = now()\\n        where order_id = #{orderId}\\n    \\u003c/update\\u003e\\n\\n    \\u003cselect id=\\\"queryDeviceAppName\\\" resultType=\\\"java.lang.String\\\"\\u003e\\n      select app_name from release_device\\n    \\u003c/select\\u003e\\n    \\n    \\u003cselect id=\\\"queryReleaseItemByAppName\\\" resultMap=\\\"release_item_result_map\\\"\\u003e\\n        select * from release_item where app_name = #{appName}\\n    \\u003c/select\\u003e\\n\\n    \\u003cselect id=\\\"queryReleaseItemByAppNameAndStatus\\\" resultMap=\\\"release_item_result_map\\\"\\u003e\\n        select *\\n        from release_item\\n        where app_name = #{appName}\\n          and status = #{status}\\n    \\u003c/select\\u003e\\n\\n    \\u003cselect id=\\\"queryPageReleaseOrders\\\" resultMap=\\\"release_order_result_map\\\"\\u003e\\n        select * from release_order\\n        \\u003cwhere\\u003e\\n            \\u003cif test=\\\"releaseDate != null and releaseDate != ''\\\"\\u003e\\n                DATE_FORMAT(create_time, '%Y-%m-%d') = #{releaseDate}\\n            \\u003c/if\\u003e\\n            \\u003cif test=\\\"operator != null and operator != ''\\\"\\u003e\\n                and operator = #{operator}\\n            \\u003c/if\\u003e\\n            \\u003cif test=\\\"orderIds != null and orderIds.size() \\u003e 0\\\"\\u003e\\n                and order_id in\\n                \\u003cforeach collection=\\\"orderIds\\\" open=\\\"(\\\" close=\\\")\\\" item=\\\"item\\\" separator=\\\",\\\"\\u003e\\n                    #{item}\\n                \\u003c/foreach\\u003e\\n            \\u003c/if\\u003e\\n            \\u003cif test=\\\"releaseName != null and releaseName != '' \\\"\\u003e\\n                and release_name like concat('%',#{releaseName},'%')\\n            \\u003c/if\\u003e\\n        \\u003c/where\\u003e\\n      order by create_time desc limit #{offset}, 10;\\n    \\u003c/select\\u003e\\n\\n    \\u003cselect id=\\\"queryReleaseOrdersCount\\\" resultType=\\\"int\\\"\\u003e\\n        select count(order_id) from release_order\\n        \\u003cwhere\\u003e\\n            \\u003cif test=\\\"releaseDate != null and releaseDate != ''\\\"\\u003e\\n                DATE_FORMAT(create_time, '%Y-%m-%d') = #{releaseDate}\\n            \\u003c/if\\u003e\\n            \\u003cif test=\\\"operator != null and operator != ''\\\"\\u003e\\n                and operator = #{operator}\\n            \\u003c/if\\u003e\\n            \\u003cif test=\\\"orderIds != null and orderIds.size() \\u003e 0\\\"\\u003e\\n                and order_id in\\n                \\u003cforeach collection=\\\"orderIds\\\" open=\\\"(\\\" close=\\\")\\\" item=\\\"item\\\" separator=\\\",\\\"\\u003e\\n                    #{item}\\n                \\u003c/foreach\\u003e\\n            \\u003c/if\\u003e\\n            \\u003cif test=\\\"releaseName != null and releaseName != '' \\\"\\u003e\\n                and release_name like concat('%',#{releaseName},'%')\\n            \\u003c/if\\u003e\\n        \\u003c/where\\u003e\\n    \\u003c/select\\u003e\\n\\n    \\u003cselect id=\\\"queryAllReleaseItemDc\\\" resultMap=\\\"release_item_dc_map\\\"\\u003e\\n        select *\\n          from (\\n              select dc.*, rank() over(partition by dc.dc order by dc.create_time desc) ran\\n                from release_item_dc dc where dc.item_id = #{itemId}\\n        ) dc where dc.ran = 1 order by dc.create_time desc, dc.dc, dc.dc_env\\n    \\u003c/select\\u003e\\n    \\u003cselect id=\\\"queryByNameAndIndexAndEnvAndDc\\\" resultMap=\\\"release_item_dc_map\\\"\\u003e\\n        select * from release_item_dc where job_name = #{jobName} and task_index = #{taskIndex} and dc_env = #{dcEnv} and dc = #{dc} order by create_time desc limit 1\\n    \\u003c/select\\u003e\\n\\n    \\u003cselect id=\\\"queryOneByItemIdAndEnvAndDc\\\" resultMap=\\\"release_item_dc_map\\\"\\u003e\\n        select * from release_item_dc\\n        \\u003cwhere\\u003e\\n            \\u003cif test=\\\"itemId != null and itemId != '' \\\"\\u003e\\n                and item_id = #{itemId}\\n            \\u003c/if\\u003e\\n            \\u003cif test=\\\"dcEnv != null and dcEnv != '' \\\"\\u003e\\n                and dc_env = #{dcEnv}\\n            \\u003c/if\\u003e\\n            \\u003cif test=\\\"dc != null and dc != '' \\\"\\u003e\\n                and dc = #{dc}\\n            \\u003c/if\\u003e\\n        \\u003c/where\\u003e\\n        order by create_time desc limit 1\\n    \\u003c/select\\u003e\\n\\n    \\u003cselect id=\\\"queryAllReleaseOrderForProdBySprintIdAndEnv\\\" resultMap=\\\"release_order_result_map\\\"\\u003e\\n        select *\\n        from release_order\\n        where sprint_id = #{sprintId}\\n          and env_name = #{envName}\\n        order by create_time desc\\n    \\u003c/select\\u003e\\n\\n\\n    \\u003cupdate id=\\\"updateReleaseOrderStatusAndPartitionFlag\\\"\\u003e\\n        update release_order\\n        set partition_flag = #{partitionFlag},\\n            status         = #{status},\\n            update_time    = now()\\n        where order_id = #{orderId}\\n    \\u003c/update\\u003e\\n\\n    \\u003cupdate id=\\\"updateReleaseOrderPartitionFlag\\\"\\u003e\\n        update release_order\\n        set partition_flag = #{partitionFlag},\\n            update_time    = now()\\n        where order_id = #{orderId}\\n    \\u003c/update\\u003e\\n\\n\\u003c/mapper\\u003e\"},{\"Path\":\"src/main/resources/mapper/SprintRegionDao.xml\",\"Status\":\"M\",\"Content\":\"\\u003c?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?\\u003e\\n\\u003c!DOCTYPE mapper PUBLIC \\\"-//mybatis.org//DTD Mapper 3.0//EN\\\" \\\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\\\"\\u003e\\n\\u003cmapper namespace=\\\"com.poype.heracles.core.repository.dao.SprintRegionDao\\\"\\u003e\\n    \\u003cresultMap id=\\\"BaseResultMap\\\" type=\\\"com.poype.heracles.core.repository.dao.model.SprintRegionDO\\\"\\u003e\\n        \\u003cid column=\\\"sprint_region_id\\\" property=\\\"sprintRegionId\\\"/\\u003e\\n        \\u003cresult column=\\\"sprint_id\\\" property=\\\"sprintId\\\"/\\u003e\\n        \\u003cresult column=\\\"item_id\\\" property=\\\"itemId\\\"/\\u003e\\n        \\u003cresult column=\\\"region_name\\\" property=\\\"regionName\\\"/\\u003e\\n        \\u003cresult column=\\\"env\\\" property=\\\"env\\\"/\\u003e\\n        \\u003cresult column=\\\"app\\\" property=\\\"app\\\"/\\u003e\\n        \\u003cresult column=\\\"region_status\\\" property=\\\"regionStatus\\\"/\\u003e\\n        \\u003cresult column=\\\"created_by\\\" property=\\\"createdBy\\\"/\\u003e\\n        \\u003cresult column=\\\"updated_by\\\" property=\\\"updatedBy\\\"/\\u003e\\n        \\u003cresult column=\\\"created_date\\\" property=\\\"createdDate\\\"/\\u003e\\n        \\u003cresult column=\\\"updated_date\\\" property=\\\"updatedDate\\\"/\\u003e\\n    \\u003c/resultMap\\u003e\\n\\n    \\u003cresultMap id=\\\"SprintRegionPageResultMap\\\" type=\\\"com.poype.heracles.core.repository.dao.model.SprintRegionPageDo\\\"\\u003e\\n        \\u003cid column=\\\"sprint_region_id\\\" property=\\\"sprintRegionId\\\"/\\u003e\\n        \\u003cresult column=\\\"app\\\" property=\\\"app\\\"/\\u003e\\n        \\u003cresult column=\\\"sprint_id\\\" property=\\\"sprintId\\\"/\\u003e\\n        \\u003cresult column=\\\"sprint_name\\\" property=\\\"sprintName\\\"/\\u003e\\n        \\u003cresult column=\\\"region_name\\\" property=\\\"regionName\\\"/\\u003e\\n        \\u003cresult column=\\\"team\\\" property=\\\"team\\\"/\\u003e\\n        \\u003cresult column=\\\"project\\\" property=\\\"project\\\"/\\u003e\\n        \\u003cresult column=\\\"region_name\\\" property=\\\"regionName\\\"/\\u003e\\n        \\u003cresult column=\\\"region_status\\\" property=\\\"regionStatus\\\"/\\u003e\\n        \\u003cresult column=\\\"status\\\" property=\\\"sprintStatus\\\"/\\u003e\\n        \\u003cresult column=\\\"created_by\\\" property=\\\"createdBy\\\"/\\u003e\\n        \\u003cresult column=\\\"created_date\\\" property=\\\"createdDate\\\"/\\u003e\\n        \\u003cresult column=\\\"updated_date\\\" property=\\\"updatedDate\\\"/\\u003e\\n    \\u003c/resultMap\\u003e\\n\\n    \\u003csql id=\\\"Base_Column_List\\\"\\u003e\\n        sprint_region_id\\n        , sprint_id, item_id, region_name, env, app, region_status, created_by,\\n    updated_by, created_date, updated_date\\n    \\u003c/sql\\u003e\\n    \\u003cselect id=\\\"selectByPrimaryKey\\\" parameterType=\\\"java.lang.Long\\\" resultMap=\\\"BaseResultMap\\\"\\u003e\\n        select\\n        \\u003cinclude refid=\\\"Base_Column_List\\\"/\\u003e\\n        from sprint_region\\n        where sprint_region_id = #{sprintRegionId}\\n    \\u003c/select\\u003e\\n    \\u003cselect id=\\\"selectByRegionNameAndDcAndApp\\\" resultMap=\\\"BaseResultMap\\\"\\u003e\\n        select\\n        \\u003cinclude refid=\\\"Base_Column_List\\\"/\\u003e\\n        from sprint_region\\n        where region_name = #{regionName}\\n        and env = #{env}\\n        and app = #{app}\\n    \\u003c/select\\u003e\\n    \\u003cselect id=\\\"selectByAppAndRegionName\\\" resultMap=\\\"BaseResultMap\\\"\\u003e\\n        select\\n        \\u003cinclude refid=\\\"Base_Column_List\\\"/\\u003e\\n        from sprint_region\\n        where app = #{app} and region_name = #{regionName}\\n    \\u003c/select\\u003e\\n    \\u003cselect id=\\\"queryTotal\\\" resultType=\\\"java.lang.Integer\\\"\\u003e\\n        select count(*) from sprint_region sr left join sprint s on sr.sprint_id = s.sprint_id\\n        \\u003cwhere\\u003e\\n            \\u003cif test=\\\"regionName != null and regionName != ''\\\"\\u003e\\n                and sr.region_name = #{regionName}\\n            \\u003c/if\\u003e\\n            \\u003cif test=\\\"sprintName != null and sprintName != ''\\\"\\u003e\\n                and s.sprint_name like #{sprintName}\\n            \\u003c/if\\u003e\\n            \\u003cif test=\\\"app != null and app != ''\\\"\\u003e\\n                and sr.app like #{app}\\n            \\u003c/if\\u003e\\n            \\u003cif test=\\\"regionStatus != null and regionStatus != ''\\\"\\u003e\\n                and sr.region_status = #{regionStatus}\\n            \\u003c/if\\u003e\\n            \\u003cif test=\\\"sprintStatus != null\\\"\\u003e\\n                and s.status = #{sprintStatus}\\n            \\u003c/if\\u003e\\n            \\u003cif test=\\\"ownerUser != null and ownerUser != ''\\\"\\u003e\\n                and s.sprint_creator = #{ownerUser}\\n            \\u003c/if\\u003e\\n            \\u003cif test=\\\"sprintIds != null and sprintIds.size()\\u003e0\\\"\\u003e\\n                and sr.sprint_id in\\n                \\u003cforeach collection=\\\"sprintIds\\\" item=\\\"id\\\" separator=\\\",\\\" open=\\\"(\\\" close=\\\")\\\"\\u003e\\n                    #{id, jdbcType=VARCHAR}\\n                \\u003c/foreach\\u003e\\n            \\u003c/if\\u003e\\n            and s.sprint_id is not null\\n        \\u003c/where\\u003e\\n    \\u003c/select\\u003e\\n    \\u003cselect id=\\\"queryPage\\\" resultMap=\\\"SprintRegionPageResultMap\\\"\\u003e\\n        select sr.sprint_region_id,\\n        sr.app,\\n        sr.sprint_id,\\n        s.sprint_name,\\n        a.team,\\n        a.project,\\n        sr.region_name,\\n        sr.region_status,\\n        s.status,\\n        sr.created_by,\\n        sr.created_date,\\n        sr.updated_date\\n        from sprint_region sr\\n        left join sprint s on sr.sprint_id = s.sprint_id\\n        left join application a on a.application_name = sr.app\\n        \\u003cwhere\\u003e\\n            \\u003cif test=\\\"regionName != null and regionName != ''\\\"\\u003e\\n                and sr.region_name = #{regionName}\\n            \\u003c/if\\u003e\\n            \\u003cif test=\\\"sprintName != null and sprintName != ''\\\"\\u003e\\n                and s.sprint_name like #{sprintName}\\n            \\u003c/if\\u003e\\n            \\u003cif test=\\\"app != null and app != ''\\\"\\u003e\\n                and sr.app like #{app}\\n            \\u003c/if\\u003e\\n            \\u003cif test=\\\"regionStatus != null and regionStatus != ''\\\"\\u003e\\n                and sr.region_status = #{regionStatus}\\n            \\u003c/if\\u003e\\n            \\u003cif test=\\\"sprintStatus != null\\\"\\u003e\\n                and s.status = #{sprintStatus}\\n            \\u003c/if\\u003e\\n            \\u003cif test=\\\"ownerUser != null and ownerUser != ''\\\"\\u003e\\n                and s.sprint_creator = #{ownerUser}\\n            \\u003c/if\\u003e\\n            \\u003cif test=\\\"sprintIds != null and sprintIds.size()\\u003e0\\\"\\u003e\\n                and sr.sprint_id in\\n                \\u003cforeach collection=\\\"sprintIds\\\" item=\\\"id\\\" separator=\\\",\\\" open=\\\"(\\\" close=\\\")\\\"\\u003e\\n                    #{id, jdbcType=VARCHAR}\\n                \\u003c/foreach\\u003e\\n            \\u003c/if\\u003e\\n            and s.sprint_id is not null\\n        \\u003c/where\\u003e\\n        order by sr.region_status,sr.created_date desc limit #{offset}, 10\\n    \\u003c/select\\u003e\\n    \\u003cselect id=\\\"queryBySprintId\\\" resultMap=\\\"BaseResultMap\\\"\\u003e\\n        select\\n        \\u003cinclude refid=\\\"Base_Column_List\\\"/\\u003e\\n        from sprint_region\\n        where sprint_id = #{sprintId}\\n    \\u003c/select\\u003e\\n    \\u003cdelete id=\\\"deleteByPrimaryKey\\\" parameterType=\\\"java.lang.Long\\\"\\u003e\\n        delete\\n        from sprint_region\\n        where sprint_region_id = #{sprintRegionId}\\n    \\u003c/delete\\u003e\\n    \\u003cinsert id=\\\"insert\\\" keyColumn=\\\"sprint_region_id\\\" keyProperty=\\\"sprintRegionId\\\"\\n            parameterType=\\\"com.poype.heracles.core.repository.dao.model.SprintRegionDO\\\" useGeneratedKeys=\\\"true\\\"\\u003e\\n        insert into sprint_region (sprint_id, item_id, region_name, env, app, region_status, created_by, updated_by,created_date,updated_date)\\n        values (#{sprintId}, #{itemId}, #{regionName}, #{env}, #{app}, #{regionStatus}, #{createdBy}, #{updatedBy},now(),now())\\n    \\u003c/insert\\u003e\\n    \\u003cinsert id=\\\"insertSelective\\\" keyColumn=\\\"sprint_region_id\\\" keyProperty=\\\"sprintRegionId\\\"\\n            parameterType=\\\"com.poype.heracles.core.repository.dao.model.SprintRegionDO\\\" useGeneratedKeys=\\\"true\\\"\\u003e\\n        insert into sprint_region\\n        \\u003ctrim prefix=\\\"(\\\" suffix=\\\")\\\" suffixOverrides=\\\",\\\"\\u003e\\n            \\u003cif test=\\\"sprintId != null\\\"\\u003e\\n                sprint_id,\\n            \\u003c/if\\u003e\\n            \\u003cif test=\\\"itemId != null\\\"\\u003e\\n                item_id,\\n            \\u003c/if\\u003e\\n            \\u003cif test=\\\"regionName != null\\\"\\u003e\\n                region_name,\\n            \\u003c/if\\u003e\\n            \\u003cif test=\\\"env != null\\\"\\u003e\\n                env,\\n            \\u003c/if\\u003e\\n            \\u003cif test=\\\"app != null\\\"\\u003e\\n                app,\\n            \\u003c/if\\u003e\\n            \\u003cif test=\\\"regionStatus != null\\\"\\u003e\\n                region_status,\\n            \\u003c/if\\u003e\\n            \\u003cif test=\\\"createdBy != null\\\"\\u003e\\n                created_by,\\n            \\u003c/if\\u003e\\n            \\u003cif test=\\\"updatedBy != null\\\"\\u003e\\n                updated_by,\\n            \\u003c/if\\u003e\\n            created_date,\\n            updated_date\\n        \\u003c/trim\\u003e\\n        \\u003ctrim prefix=\\\"values (\\\" suffix=\\\")\\\" suffixOverrides=\\\",\\\"\\u003e\\n            \\u003cif test=\\\"sprintId != null\\\"\\u003e\\n                #{sprintId},\\n            \\u003c/if\\u003e\\n            \\u003cif test=\\\"itemId != null\\\"\\u003e\\n                #{itemId},\\n            \\u003c/if\\u003e\\n            \\u003cif test=\\\"regionName != null\\\"\\u003e\\n                #{regionName},\\n            \\u003c/if\\u003e\\n            \\u003cif test=\\\"env != null\\\"\\u003e\\n                #{env},\\n            \\u003c/if\\u003e\\n            \\u003cif test=\\\"app != null\\\"\\u003e\\n                #{app},\\n            \\u003c/if\\u003e\\n            \\u003cif test=\\\"regionStatus != null\\\"\\u003e\\n                #{regionStatus},\\n            \\u003c/if\\u003e\\n            \\u003cif test=\\\"createdBy != null\\\"\\u003e\\n                #{createdBy},\\n            \\u003c/if\\u003e\\n            \\u003cif test=\\\"updatedBy != null\\\"\\u003e\\n                #{updatedBy},\\n            \\u003c/if\\u003e\\n            now(),now()\\n        \\u003c/trim\\u003e\\n    \\u003c/insert\\u003e\\n    \\u003cupdate id=\\\"updateByPrimaryKeySelective\\\"\\n            parameterType=\\\"com.poype.heracles.core.repository.dao.model.SprintRegionDO\\\"\\u003e\\n        update sprint_region\\n        \\u003cset\\u003e\\n            \\u003cif test=\\\"sprintId != null\\\"\\u003e\\n                sprint_id = #{sprintId},\\n            \\u003c/if\\u003e\\n            \\u003cif test=\\\"itemId != null\\\"\\u003e\\n                item_id = #{itemId},\\n            \\u003c/if\\u003e\\n            \\u003cif test=\\\"regionName != null\\\"\\u003e\\n                region_name = #{regionName},\\n            \\u003c/if\\u003e\\n            \\u003cif test=\\\"env != null\\\"\\u003e\\n                env = #{env},\\n            \\u003c/if\\u003e\\n            \\u003cif test=\\\"app != null\\\"\\u003e\\n                app = #{app},\\n            \\u003c/if\\u003e\\n            \\u003cif test=\\\"regionStatus != null\\\"\\u003e\\n                region_status = #{regionStatus},\\n            \\u003c/if\\u003e\\n            \\u003cif test=\\\"createdBy != null\\\"\\u003e\\n                created_by = #{createdBy},\\n            \\u003c/if\\u003e\\n            \\u003cif test=\\\"updatedBy != null\\\"\\u003e\\n                updated_by = #{updatedBy},\\n            \\u003c/if\\u003e\\n            updated_date = now(),\\n        \\u003c/set\\u003e\\n        where sprint_region_id = #{sprintRegionId}\\n    \\u003c/update\\u003e\\n    \\u003cupdate id=\\\"updateByPrimaryKey\\\" parameterType=\\\"com.poype.heracles.core.repository.dao.model.SprintRegionDO\\\"\\u003e\\n        update sprint_region\\n        set sprint_id     = #{sprintId},\\n            item_id       = #{itemId},\\n            region_name   = #{regionName},\\n            env           = #{env},\\n            app           = #{app},\\n            region_status = #{regionStatus},\\n            updated_by    = #{updatedBy},\\n            updated_date  = now()\\n        where sprint_region_id = #{sprintRegionId}\\n    \\u003c/update\\u003e\\n    \\u003cupdate id=\\\"updateStatus\\\"\\u003e\\n        update sprint_region\\n        set region_status = #{regionStatus},\\n            updated_by    = #{updatedBy},\\n            updated_date  = now()\\n        where sprint_region_id = #{sprintRegionId}\\n    \\u003c/update\\u003e\\n\\u003c/mapper\\u003e\"},{\"Path\":\"src/main/resources/sql/20221027/dml.sql\",\"Status\":\"M\",\"Content\":\"UPDATE sprint SET status=8 where status = 7;\\nUPDATE sprint SET status=9 where status = 8;\"},{\"Path\":\"src/main/resources/sql/20221125/conf.txt\",\"Status\":\"A\",\"Content\":\"\"},{\"Path\":\"src/main/resources/sql/20221125/ddl.sql\",\"Status\":\"A\",\"Content\":\"\\nalter table entrance_guard_detail modify type_desc text null comment '类型描述';\"}],\"CommitIds\":[\"94b07be93611b3076f3a56b77a43d6fa05982c11\",\"74f463bf2dbb6b882026603d51e7a4bd57ce4faa\",\"468238e340cfa88de1f7e7d66e54345f88488428\",\"2c628d8444db1e63f50c4b22cff5699ab388a5ac\",\"beb7dab610193c7e4f88c5e1981e889ffc600b61\",\"cab0d5dac494ef8327bd6999750b04a49fbe907e\",\"7a085d04e73bcb867c94ad501286c77897bfa353\",\"8970a85d24a880d2c927e19d4e46f9e232e98e6f\",\"d205a3e250bc918116dc11cd8b9319672ccd2651\",\"5d9bb18aa51145dbec227075e77ff29a2cac8ac0\",\"9e610da2c019dedc191ee645a6b9eaa0ae3badbb\",\"839dccf6126e00c93c9d187e4d970effb59fc7db\",\"19a134b86cb0cd5ecd5d55685b71cea6a78c046b\",\"43599b201a0c8e46b1d692e29fc8708ed8b635e1\",\"e1c9bc4a28903af7fe7576f07e8f065abcc9ee21\",\"871e3f4eb12a74453a1072e36702bba0b62a4ebc\",\"f17a935e6482232ec5b045e5f6a4e40b1a1520d7\",\"6b35019fae5092f271ddbd58594f203665f34fac\",\"f9f85a96bbc0a13ae72363ab9b64faff11651ff1\",\"c7a64019e451989f4f8e994747677e7a0bbf4959\",\"5daa6b005c4513e6b9b56cc51c9d4b142106832a\",\"e540c452a95acf14a8027c77add4131323dc3b10\",\"fb6af2813457e41a509e17c0015df1a5dd13d14e\",\"25eb064aa67fe787bf15211c6bd62038ece1bde4\",\"989cfda01e83a5f1b8ef6704da95dacd4f4eb6a7\",\"01afd6631a398462f222e1d01bd8eda2f3e9faa9\",\"26a04425ec79d56fce58a6154e0a2e7405b6ee40\",\"1e1e9183cd193308514e3eda452768514432a7ff\",\"91b175468442b298490c5430b7deafe41dc2794f\",\"f8ad8c676580a2a2fd26566377bdd2babb5744b6\",\"556812d5766f5fe7b0a6f83a0d055e0025fcad05\",\"e9cf6d17b0eb2233c4ed259a8a45019d38e8c3f3\",\"6998545c23704da1d30459f321ee429a41dab809\",\"e633618053d27fc62eed78f730020b4acbaad73d\",\"bc23bcfa6af74ac70f9076b722f3a55499a16570\",\"3eca4793710a3ae91b70ad1f60de7141743be73f\",\"5302ff6613a425563be85a408c7be8a91a5d9f39\",\"624830ab4c93e4bc4cad46d572a50ee5fe2413a2\",\"829da571b38270b37645650aa6152388d21cf34a\",\"7894b493fff36d91d33349dc828e60ccd704c159\",\"98a5956fb9232ed11f67fb2c5cdd80db5ddc79c0\",\"439d15d00df528b7667e0fa73589b17c325d7de3\",\"dd7bfcdfaf0552ebbc186be8ea900d469b4dd138\",\"5d7eec1315ea164b2d40aab16272c221e4a7fb6f\",\"12c9187483b2a28a25ef02cd29fdd517cea06677\",\"b5b9ca40aa089805438dd4d69b35ed15c87b0c75\",\"011eaa7a506718f5d71d364ea59a1078b31d562f\",\"d643bfc75340c6f3e3f083acd356967c152644a7\",\"9a14b52f69ac69c1f2f1b4e7138f100405cfcc54\",\"1531ab350f63723823c16c4920f91420f8ff8d57\",\"d688bc8acddcc9d33c466236f1c84611f1ab5264\",\"befc6f7de9002e3b8bdbd73be3721a10e4784609\",\"eaa58dc4cca1ce231fbf9591c54a33ed288389b5\",\"63a612304031b09dd795fd68a76b8f6d7e99e3eb\",\"37d26a35f03762a2d559fe3bd685cebbdca52a73\",\"cf662f63b60491a18fb6863122d85ef3121d1872\",\"0ba6a82bb12e6a333620d1d44243452d028ec53b\",\"f265651d2f03e5fa76969e1d42ede8a5fcb8a53f\",\"40df71ba1e8deaf369be29854672ca171397bc5d\",\"de5d68df50eaaa83251bb5c1adca061dffb4f744\",\"736dce57f74eab0dcf4ae7d1428950d7286b1670\",\"07a21c60178666422e8b45c490388770d4039b57\",\"f17941cf30f033a7ae9c9c3a38f7a4fd794c2940\",\"17de38c1d8321e795387fa08fd93b1392f08a8ea\",\"4866b08ce1cdbeca4e8491f71a4afb82473cf2ed\",\"f4fe5782dbba35db281df7ba7e8764fa30135832\",\"85004ab39fd324d86c4ae72f1a7b13883de0cb2d\",\"2b45f3fb2b540de11c7c0e385c74364446e06cb0\",\"d0df497e1dcea8c4765b16555d463740327d0751\",\"a36e3a5703fbd9ae8cdec8c416cde658020914d6\",\"5cc812c9a61e0ad8d7e25ac4221c3ffe253ab311\",\"4cd015d576bc0f418ba14dd0f38ebf02bd77efcc\",\"a9cfbc13fe9d16f436a9654dd079cdaf61a79c79\",\"43fcbff5d1289e4fb5473cfbf83c2bfe523b4110\",\"1b718baba56396502c14330458239376ae6a0399\",\"1cbff85af5a31bb5465378cb30a15578e25f7fd5\",\"a08f1d9fb34cf18d98cb244ca8738a973a2c2cac\",\"f42f9538fb02036cf6f6e4df96027efa8460c95e\",\"666e9aa65bc8fa4cef208e3da153c8b981bc50ee\",\"704d55e8b04226f3d36cad917340abd1c98812e6\",\"a84ac4d838c257c809bce16745da6a22727d9a85\",\"f243ebc19e4606ca137828014e6c76463591cfa3\",\"85aa9bd94d88afe535f7d57c46f8ce2bf25d118e\",\"d550c8d7f5265c77aebea99b88ba4d31088aa672\",\"807663b26f9cd247591a68c00966c7dd6e796e38\",\"c7933ecc253deeb47e12cab9e882a54c538f327b\",\"4b807b99ab6863c4cab2044f9234de0260ea5254\",\"b5265022941b6801f42ea6095c6c0011c2de1b49\",\"4acbafa34f1d835d73c4a192fdff8bb2f8afaa9c\",\"94bc31e643a4a9baff46674c7c624605cda87d96\",\"f08717849d6e74204a22b70792ca6cd2f7b8c46e\",\"9257c734beb0b6bbdcb65b8791025e32f832798e\",\"8eb8421690f54df68da211d8712c1741fe7ea865\",\"cc7cd4022a71567c7c9a4280aa8f786cade71ec8\",\"1580f4835dbd3e0d11f3d3cbfb0061fde7cd16c9\",\"548e8089154ee6eba16e65a31dfb8fe185e98e66\"],\"Messages\":[\"Merge branch 'release20221130' into 'master' See merge request !3985717\",\"STRUC#6582 调试代码\",\"STRUC#6582 调试代码\",\"STRUC#6582 调试代码\",\"STRUC#6582 调试代码\",\"STRUC#6582 调试代码\",\"STRUC#6582 调试代码\",\"STRUC#6582\",\"STRUC#6582\",\"STRUC#6582\",\"STRUC#6582\",\"STRUC#6582\",\"STRUC#6582\",\"STRUC#6582\",\"STRUC#6582\",\"STRUC#6582 test case:测试mq发送失败的情况\",\"STRUC#6582 test case:测试mq发送失败的情况\",\"STRUC#6582 test case:测试mq发送失败的情况\",\"STRUC#6582 日志优化\",\"STRUC#6582 发布mq代码优化\",\"STRUC#6582 test case:测试mq发送失败的情况\",\"STRUC#6582 test case:测试mq发送失败的情况\",\"STRUC#6582 测试代码,配置mq发送确认\",\"STRUC#6582 测试代码,配置mq发送确认\",\"STRUC#6582 测试代码,配置mq发送确认\",\"STRUC#6582 测试代码,配置监听器\",\"STRUC#6582 modify some logs\",\"STRUC#6582 modify some logs\",\"STRUC#6582 modify some logs\",\"STRUC#6582 modify some logs\",\"STRUC#6582 modify some logs\",\"STRUC#6582 陆吾门禁代码优化\",\"STRUC#6582 代码优化\",\"STRUC#6582 代码优化\",\"STRUC#6582 代码优化\",\"STRUC#6582 代码优化\",\"STRUC#6577 代码优化\",\"STRUC#6577 代码优化\",\"STRUC#6520 发布环境管控\",\"STRUC#6520 发布环境管控\",\"STRUC#6520 mock代码\",\"STRUC#6520 ssdlc扫描失败可立即发起扫描\",\"STRUC#6520 ssdlc扫描异常消息丢弃\",\"STRUC#6520 测试代码\",\"STRUC#6520 测试代码\",\"STRUC#6520 sql优化\",\"STRUC#6520 测试代码\",\"STRUC#6520 代码优化\",\"STRUC#6520 代码优化\",\"STRUC#6520 代码优化\",\"STRUC#6520 mock代码\",\"STRUC#6520 ssdlc扫描\\u0026结果通知\",\"STRUC#6520 ssdlc扫描\",\"STRUC#6520 优化mq发送代码\",\"STRUC#6520 配置监听器线程池\",\"STRUC#6520 代码优化\",\"STRUC#6520 测试代码\",\"STRUC#6520 测试代码\",\"STRUC#6520 测试代码\",\"STRUC#6520 代码优化\",\"STRUC#6520 代码优化\",\"STRUC#6520 代码优化\",\"STRUC#6520 代码优化\",\"STRUC#6520 代码优化\",\"STRUC#6520 代码优化\",\"STRUC#6520 代码优化\",\"STRUC#6520 代码优化\",\"STRUC#6520 代码优化\",\"STRUC#6520 代码优化\",\"STRUC#6520 代码优化\",\"STRUC#6520 代码优化\",\"STRUC#6520 代码优化\",\"STRUC#6520 代码优化\",\"STRUC#6520 代码优化\",\"STRUC#6520 修改mq消费线程池\",\"STRUC#6520 发布效率优化\",\"STRUC#6520 发布效率优化\",\"STRUC#6520 发布效率优化\",\"STRUC#6520 陆吾门禁验证落表bug修复\",\"STRUC#6520 优化我参与\\u0026我创建的为空时显示全量数据bug\",\"STRUC#6520 测试mq消费代码,同时消费两个,且先进先出\",\"STRUC#6520 发布效率优化代码\",\"STRUC#6116 优化版本列表查询\",\"STRUC#6116 取交集后集合为空直接返回\",\"STRUC#6116 优化版本列表查询:根据应用名字查询无结果直接返回\",\"STRUC#6116 优化版本列表查询:根据应用名字查询无结果直接返回\",\"STRUC#6116 优化版本列表查询\",\"STRUC#6116 mock代码\",\"STRUC#6116 mock代码\",\"STRUC#6116 mock代码\",\"STRUC#6116 heracles验收通知标题修改\",\"STRUC#6116 mock代码\",\"STRUC#6116 mock代码\",\"STRUC#6519 应用发布结果view对象添加排名信息字段\",\"STRUC#6519 删除冗余代码\",\"STRUC#6519 支持发布门禁在配置后置空,清理内存中的配置\"],\"RepositoryName\":\"heracles\",\"Namespace\":\"af-archops\"}",
      "form": []
    },
    "tests": []
  }
]